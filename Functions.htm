<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Funktionen - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie mehr über Funktionen im Allgemeinen, Parameter, Rückgabewerte, interne Funktionen, variadische Funktionen, etc." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>Funktionen</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung und einfache Beispiele</a></li>
  <li><a href="#param">Parameter</a></li>
  <li><a href="#optional">Optionale Parameter</a></li>
  <li><a href="#return">Werte an den Aufrufer zurückgeben</a></li>
  <li><a href="#Variadic">Variadische Funktionen</a></li>
  <li><a href="#Local">Lokale Variablen</a></li>
  <li><a href="#DynCall">Dynamisches Aufrufen einer Funktion</a></li>
  <li><a href="#ShortCircuit">Boolesche Kurzschlussauswertung</a></li>
  <li><a href="#nested">Verschachtelte Funktionen</a></li>
  <li><a href="#remarks">Return, Exit und allgemeine Bemerkungen</a></li>
  <li><a href="#include">Skripte mittels #Include auf die gleichen Funktionen zugreifen lassen</a></li>
  <li><a href="#BuiltIn">Interne Funktionen</a></li>
</ul>
<h2 id="intro">Einführung und einfache Beispiele</h2>
<p id="define">Eine Funktion ist so etwas Ähnliches wie eine Subroutine, allerdings mit dem Unterschied, dass eine Funktion zusätzlich mit Parametern (Eingabewerten) aufgerufen werden kann. Eine Funktion kann außerdem einen Wert direkt an ihren Aufrufer zurückgeben. Das folgende Beispiel ist eine einfache Funktion, die zwei Zahlen akzeptiert und ihre Summe zurückgibt:</p>
<pre>Addieren(x, y)
{
    <a href="commands/Return.htm">return</a> x + y
}</pre>
<p>So etwas nennt man auch eine <em>Funktionsdefinition</em>, weil es eine Funktion mit dem Namen "Addieren" erstellt (nicht Groß-/Kleinschreibung-sensitiv) und festlegt, dass jeder, der sie aufruft, genau zwei Parameter (x und y) bereitstellen muss. Um die Funktion aufzurufen, weisen Sie ihr Ergebnis einer Variable mithilfe des <a href="Variables.htm#AssignOp"><code>:=</code>-Operators</a> zu. Zum Beispiel:</p>
<pre>Var := Addieren(2, 3)  <em>; Speichert die Zahl 5 in Var.</em></pre>
<p>Man kann eine Funktion auch aufrufen, ohne ihren Rückgabewert speichern zu müssen:</p>
<pre>Addieren(2, 3)
Addieren 2, 3  <em>; Runde Klammern können am Anfang einer Zeile weggelassen werden.</em></pre>
<p>In diesem Fall aber wird der zurückgegebene Wert der Funktion verworfen; diese Art von Aufruf ist nur sinnvoll, wenn die Funktion mehr als nur einen Rückgabewert zurückgibt.</p>
<p>Innerhalb eines Ausdrucks wird ein Funktionsaufruf ausgewertet und mit dem Rückgabewert der Funktion "ersetzt". Der Rückgabewert kann wie oben gezeigt in eine Variable gespeichert werden oder wie folgt direkt benutzt werden:</p>
<pre>if <a href="commands/InStr.htm">InStr</a>(MeineVar, "Fuchs")
    MsgBox "Die Variable MeineVar enthält das Wort Fuchs."</pre>

<h2 id="param">Parameter</h2>
<p>Die Parameter einer Funktion werden in die runden Klammern rechts neben dem Funktionsnamen eingefügt (zwischen dem Namen und der runden Startklammer sind keine Leerzeichen erlaubt). Wenn die Funktion keine Parameter akzeptiert, können die runden Klammern leer gelassen werden; zum Beispiel: <code>ErmittleAktuellenZeitstempel()</code>.</p>
<p id="ByRef"><strong>ByRef-Parameter</strong>: Innerhalb der Funktion werden Parameter grundsätzlich wie <a href="#Local">lokale Variablen</a> behandelt, es sei denn, sie werden wie im folgenden Beispiel als <em>ByRef</em> gekennzeichnet:</p>
<pre>a := 1, b := 2
Tauschen(&amp;a, &amp;b)
MsgBox a ',' b

Tauschen(&amp;Links, &amp;Rechts)
{
    temp := Links
    Links := Rechts
    Rechts := temp
}</pre>
<p>Im obigen Beispiel wird der Aufrufer durch <code>&amp;</code> gezwungen, eine <a href="Concepts.htm#variable-references">VarRef</a> zu übergeben, die üblicherweise einer der Variablen des Aufrufers entspricht. Jeder Parameter wird zu einem Alias für die Variable, die von der VarRef repräsentiert wird. Das heißt, dass der Parameter und die Variable des Aufrufers auf den gleichen Inhalt im Speicher verweisen. Auf diese Weise kann die Tauschen-Funktion die Variablen des Aufrufers ändern, indem sie den Inhalt der <em>Links</em>-Variable in die <em>Rechts</em>-Variable verschiebt, und umgekehrt.</p>
<p>Würde man <em>ByRef</em> hingegen nicht verwenden, wären <em>Links</em> und <em>Rechts</em> nur Kopien der Variablen des Aufrufers - die Tauschen-Funktion hätte keine externe Auswirkung. Die Funktion könnte jedoch stattdessen so geändert werden, dass jede VarRef explizit <a href="Variables.htm#deref">dereferenziert</a> wird. Zum Beispiel:</p>
<pre>Tauschen(Links, Rechts)
{
    temp := %Links%
    %Links% := %Rechts%
    %Rechts% := temp
}</pre>
<p>VarRefs können als Ergänzung zu <a href="commands/Return.htm">Return</a> verwendet werden, um mehr als einen Wert zurückzugeben. Um das zu erreichen, muss der Aufrufer eine Referenz, die auf eine (meist leere) Variable verweist, übergeben, in der die Funktion einen Wert speichern soll.</p>
<p>Die Übergabe langer Zeichenketten an eine Funktion via <em>ByRef</em> ist leistungsfähiger und verhindert, dass die Zeichenketten doppelten Speicherplatz verbrauchen, weil von ihnen eine Kopie erstellt werden muss. Auch die Rückgabe von langen Zeichenketten an den Aufrufer via <em>ByRef</em> ist in der Regel performanter als so etwas wie <code>Return LangeZeichenkette</code>. Was die Funktion erhält, ist jedoch nicht eine Referenz zur Zeichenkette, sondern eine Referenz zur <em>Variable</em>. Zukünftige Verbesserungen könnten die Verwendung von ByRef für diese Zwecke überflüssig machen.</p>
<p>Bekannte Einschränkungen:</p>
<ul>
  <li>Es ist nicht möglich, eine VarRef für eine Eigenschaft eines Objekts (z. B. <code>foo.bar</code>), <a href="misc/A_Clipboard.htm">A_Clipboard</a> oder eine andere <a href="Variables.htm#BuiltIn">interne Variable</a> zu konstruieren, sodass diese nicht via <em>ByRef</em> übergeben werden können.</li>
  <li>Variablen, die innerhalb eines Funktionsparameters aufgelöst werden müssen (z. B. <code>Var</code> oder <code>++Var</code> oder <code>Var *= 2</code>), können von links oder rechts befindlichen Parametern geändert werden, bevor sie an die Funktion übergeben werden. <code>MeineFunk(Var, Var++)</code> würde beispielsweise unerwartet 0 und 1 als Parameter übergeben, wenn <em>Var</em> zu Beginn 0 ist, weil das erste <em>Var</em> erst dereferenziert wird, wenn der Funktionsaufruf ausgeführt wird. Dieses unlogische Verhalten wird eventuell in einer zukünftigen Version geändert.</li>
</ul>
<h2 id="optional">Optionale Parameter</h2>
<p>Bei der Definition einer Funktion können ein oder mehrere Parameter als optional gekennzeichnet werden. Um das zu tun, müssen Sie <code>:=</code> anfügen, gefolgt vom Standardwert des Parameters, der Folgendes sein kann: <code>true</code>, <code>false</code>, <code>unset</code>, ein direkt geschriebener Integer, eine direkt geschriebene Floating-Point-Zahl oder eine direkt geschriebene, in Anführungszeichen gesetzte Zeichenkette wie "fox" oder "".</p>
<p>Die folgende Funktion hat einen Z-Parameter, der als optional gekennzeichnet ist:</p>
<pre>Addieren(X, Y, Z := 0) {
    return X + Y + Z
}</pre>
<p>Ruft man die Funktion mit <strong>drei</strong> Parametern auf, wird der Standardwert von Z ignoriert. Ruft man aber die Funktion nur mit <strong>zwei</strong> Parametern auf, bekommt die Z-Variable automatisch eine 0 zugewiesen.</p>
<p id="missing">Es ist nicht möglich, optionale Parameter in der Mitte der Parameterliste zu platzieren. Alle Parameter auf der rechten Seite des ersten optionalen Parameters müssen in diesem Fall auch optional sein. Allerdings könne optionale Parameter in der Mitte der Parameterliste weggelassen werden, wenn die Funktion aufgerufen wird. Zum Beispiel:</p>
<pre>MeineFunk(1,, 3)
MeineFunk(X, Y:=2, Z:=0) {  <em>; Beachten Sie, dass Z in diesem Fall weiterhin optional sein muss.</em>
    MsgBox X ", " Y ", " Z
}</pre>
<p id="OptionalByRef"><a href="#ByRef">ByRef-Parameter</a> können auch optional sein; zum Beispiel: <code>MeineFunk(&amp;p1 := "")</code>. Jedes Mal, wenn die Funktion ohne diesen Parameter aufgerufen wird, wird eine lokale Variable mit dem angegebenen Standardwert erstellt; das heißt, dass die Funktion sich so verhalten wird, als wäre das Symbol "&amp;" nicht vorhanden.</p>
<p id="unset"><strong>Unset:</strong> Um genau festzustellen, ob der Aufrufer einen Parameter weggelassen hat, geben Sie <code>unset</code> als Standardwert an und ermitteln Sie mit <a href="commands/IsSet.htm">IsSet</a>, ob der Parameter einen Wert erhalten hat, wie unten gezeigt:</p>
<pre>
MeineFunk(p := unset) {
    if IsSet(&amp;p)
        MsgBox "Aufrufer hat " p " übergeben"
    else
        MsgBox "Aufrufer hat nichts übergeben"
}

MeineFunk(42)
MeineFunk
</pre>

<h2 id="return">Werte an den Aufrufer zurückgeben</h2>
<p>Wie in der <a href="#intro">Einführung</a> bereits erwähnt, kann eine Funktion einen Wert via <a href="commands/Return.htm">Return</a> an ihren Aufrufer zurückgeben.</p>
<pre>
MsgBox returnTest()

returnTest() {
    return 123
}
</pre>
<p>Wenn Sie noch mehr Ergebnisse aus einer Funktion zurückgeben möchten, können Sie auch <a href="#ByRef">ByRef (&amp;)</a> nutzen:</p>
<pre>
returnByRef(&amp;A,&amp;B,&amp;C)
MsgBox A "," B "," C

returnByRef(&amp;val1, &amp;val2, val3)
{
    val1 := "A"
    val2 := 100
    %val3% := 1.1  <em>; % wird verwendet, weil &amp; weggelassen wurde.</em>
    return
}
</pre>
<p>Mithilfe von Objekten und Arrays können mehrere Werte oder sogar benannte Werte zurückgegeben werden:</p>
<pre>
Test1 := returnArray1()
MsgBox Test1[1] "," Test1[2]

Test2 := returnArray2()
MsgBox Test2[1] "," Test2[2]

Test3 := returnObject()
MsgBox Test3.id "," Test3.val

returnArray1() {
    Test := [123,"ABC"]
    return Test
}

returnArray2() {
    x := 456
    y := "EFG"
    return [x, y]
}

returnObject() {
    Test := {id: 789, val: "HIJ"}
    return Test
}
</pre>
<h2 id="Variadic">Variadische Funktionen</h2>
<p>Es ist möglich, den letzten Parameter in einer Funktionsdefinition mit einem Sternchen zu versehen, um eine Funktion variadisch zu machen, oder anders gesagt, um sie eine variable Anzahl von Parametern akzeptieren zu lassen:</p>
<pre>Verbinden(sep, <b class="blue">params*</b>) {
    for index,param in params
        str .= param . sep
    return SubStr(str, 1, -StrLen(sep))
}
MsgBox Verbinden("`n", "eins", "zwei", "drei")</pre>
<p>Wenn man eine variadische Funktion aufruft, werden alle überschüssigen Parameter in ein Objekt gespeichert, das im letzten Parameter der Funktion enthalten ist. Der erste überschüssige Parameter ist <code>params[1]</code>, der Zweite ist <code>params[2]</code> und so weiter. Da es sich hierbei um ein <a href="objects/Array.htm">Array</a> handelt, kann <code>params.<a href="objects/Array.htm#Length">Length</a></code> genutzt werden, um die Parameteranzahl zu ermitteln.</p>
<p>Der Versuch, eine nicht-variadische Funktion mit mehr Parametern als möglich aufzurufen, wird als Fehler erkannt. Schreiben Sie <code>*</code> als letzten Parameter (ohne Parametername), um eine Funktion beliebig viele Parameter akzeptieren zu lassen, <em>ohne</em> ein Array zum Speichern der überschüssigen Parameter zu erstellen.</p>
<p class="warning"><strong>Hinweis:</strong> Der "variadische" Parameter kann nur am Ende der formalen Parameterliste erfolgen.</p>

<h3 id="VariadicCall">Variadische Funktionsaufrufe</h3>
<p>Variadische Funktionen können mithilfe eines Arrays eine variable Anzahl von Parametern <i>akzeptieren</i>, während variadische Funktionsaufrufe verwendet werden können, um eine variable Anzahl von Parametern an eine <i>beliebige</i> Funktion mithilfe derselben Syntax zu übergeben:</p>
<pre>TeilZketten := ["eins", "zwei", "drei"]
MsgBox Verbinden("`n", <b class="blue">TeilZketten*</b>)</pre>
<p>Hinweise:</p>
<ul>
  <li>Das Objekt kann ein <a href="objects/Array.htm">Array</a> oder eine andere Art von enumerierbares Objekt (also ein Objekt mit einer <a href="Objects.htm#__Enum">__Enum</a>-Methode) oder <a href="objects/Enumerator.htm">Enumerator</a> sein. Wenn das Objekt kein Array ist, wird __Enum mit einem Zähler von 1 und der Enumerator mit nur jeweils einem Parameter aufgerufen.</li>
  <li><a href="objects/Array.htm">Array</a>-Elemente ohne Wert (wie z. B. das erste Element in <code>[,2]</code>) sind das gleiche wie, als würde man den Parameter weglassen; das heißt, dass der Standardwert des Parameters verwendet wird, wenn er optional ist, ansonsten wird eine Ausnahme ausgelöst.</li>
  <li>Diese Syntax kann auch beim Aufrufen von Methoden oder beim Setzen oder Abrufen von Objekteigenschaften verwendet werden; zum Beispiel <code>Objekt.Eigenschaft[Params*]</code>.</li>
</ul>
<p>Bekannte Einschränkungen:</p>
<ul>
  <li>Nur der Parameter ganz rechts kann auf diese Weise erweitert werden. Zum Beispiel wird <code>MeineFunk(x, y*)</code> unterstützt, aber nicht <code>MeineFunk(x*, y)</code>.</li>
  <li>Zwischen dem Sternchen (<code>*</code>) und dem Symbol, das die Parameterliste beendet, dürfen keine Leerraumzeichen stehen.</li>
  <li><a href="Language.htm#function-call-statements">Funktionsaufrufanweisungen</a> können nicht variadisch sein; das heißt, dass die Parameterliste in runden Klammern (oder in eckigen Klammern bei einer Eigenschaft) gesetzt werden muss.</li>
</ul>
<h2 id="Locals">Lokale und globale Variablen</h2>
<h3 id="Local">Lokale Variablen</h3>
<p>Lokale Variablen sind funktionsspezifisch und nur innerhalb dieser Funktion sichtbar. Folglich kann eine lokale Variable den gleichen Namen wie eine globale Variable haben, aber einen anderen Inhalt aufweisen. Verschiedene Funktionen können bedenkenlos die gleichen Variablennamen benutzen.</p>
<p>Alle lokalen Variablen, die nicht <a href="#static">statisch</a> sind, werden automatisch freigegeben (leer gemacht), wenn die Funktion ihr Ende erreicht hat, mit Ausnahme von Variablen, die an ein <a href="#closures">Closure</a> oder eine <a href="Concepts.htm#variable-references">VarRef</a> gebunden sind (solche Variablen werden gleichzeitig mit dem Closure oder der VarRef freigegeben).</p>
<p>Interne Variablen wie <a href="misc/A_Clipboard.htm">A_Clipboard</a> und <a href="Variables.htm#TimeIdle">A_TimeIdle</a> sind nie lokal (sie sind von überall aus erreichbar) und können nicht neu deklariert werden. (Dies gilt nicht für interne Klassen wie <a href="objects/Object.htm">Object</a>; sie sind als <a href="#Global">globale</a> Variablen definiert.)</p>
<p id="AssumeLocal">Funktionen sind standardmäßig im <strong>Assume-Local</strong>-Modus. Variablen, die innerhalb einer Assume-Local-Funktion zugegriffen oder erstellt werden, sind standardmäßig lokal, aber es gibt folgende Ausnahmen:</p>
<ul>
  <li><a href="#Global">Globale</a> Variablen, die von der Funktion nur gelesen, nicht zugewiesen oder mit dem <a href="Variables.htm#ref">Referenzoperator (&amp;)</a> verwendet werden.</li>
  <li><a href="#nested">Verschachtelte Funktionen</a> können auf lokale und statische Variablen verweisen, die von einer äußeren Funktion erstellt wurden.</li>
</ul>
<p>Siehe unten, wie das Standardverhalten überschrieben werden kann (indem man die Variable deklariert oder den Modus der Funktion ändert).</p>

<h3 id="Global">Globale Variablen</h3>
<p id="AssignLocal">Jede Variablenreferenz in einer <a href="#AssumeLocal">Assume-Local</a>-Funktion kann in eine globale Variable aufgelöst werden, wenn sie nur gelesen wird. Wenn eine Variable jedoch in einer Zuweisung oder mit dem <a href="Variables.htm#ref">Referenzoperator (&amp;)</a> verwendet wird, ist sie standardmäßig automatisch lokal. Dadurch können Funktionen globale Variablen lesen oder globale oder interne Funktionen aufrufen, ohne dass sie innerhalb der Funktion deklariert werden müssen. Außerdem wird das Skript vor unbeabsichtigten Seiteneffekten geschützt, wenn der Name einer zugewiesenen lokalen Variable mit einer globalen Variable identisch sein sollte. Zum Beispiel:</p>
<pre>InDateiLoggen(ZuLoggenderText)
{
    <em>; LogDateiName hat bereits ein Wert außerhalb dieser Funktion zugewiesen bekommen.
    ; FileAppend ist eine vordefinierte globale Variable, die eine interne Funktion enthält.</em>
    FileAppend ZuLoggenderText "`n", LogDateiName
}</pre>
<p>Um ansonsten innerhalb einer Funktion auf eine vorhandene globale Variable zu verweisen (oder eine neue zu erstellen), deklarieren Sie die Variable als globale Variable, bevor Sie sie verwenden. Zum Beispiel:</p>
<pre>DatenVerzSetzen(Verz)
{
    <strong>global</strong> LogDateiName
    LogDateiName := Verz . "\Meine.log"
    <strong>global</strong> DatenVerz := Verz  <em>; Deklaration kombiniert mit Zuweisung, wie <a href="#DeclareInit">unten</a> beschrieben.</em>
}
</pre>
<p id="AssumeGlobal"><strong>Assume-Global-Modus</strong>: Muss eine Funktion viele globale Variablen erstellen oder auf sie zugreifen, kann die Funktion so definiert werden, dass sie all ihre Variablen (außer ihre Parameter) global behandelt. Dazu muss in der ersten Zeile das Wort "global" stehen. Zum Beispiel:</p>
<pre>StandardwerteSetzen()
{
    <strong>global</strong>
    GlobaleVar := 33  <em>; Speichert 33 in eine globale Variable und erstellt sie, falls notwendig.</em>
    local x, y:=0, z  <em>; Lokale Variablen müssen in diesem Modus deklariert werden, weil sie sonst global behandelt werden.</em>
}</pre>

<h3 id="static">Statische Variablen</h3>
<p>Obwohl statische Variablen immer indirekt lokal sind, unterscheiden sie sich von lokalen Variablen, weil ihre Werte zwischen den Funktionsaufrufen erhalten bleiben. Zum Beispiel:</p>
<pre>InDateiLoggen(ZuLoggenderText)
{
    <strong>static</strong> GeloggteZeilen := 0
    GeloggteZeilen += 1  <em>; Behandelt einen Zähler lokal (der Wert bleibt zwischen den Funktionsaufrufen erhalten).</em>
    global LogDateiName
    FileAppend GeloggteZeilen ": " ZuLoggenderText "`n", LogDateiName
}</pre>
<p id="InitStatic">Es ist möglich, eine statische Variable bei ihrer Deklaration zu initialisieren. Fügen Sie einfach auf der rechten Seite des Variablennamens den Operator <code>:=</code> und einen beliebigen <a href="Variables.htm#Expressions">Ausdruck</a> an. Zum Beispiel: <code>static X:=0, Y:="fox"</code>. Statische Deklarationen werden genauso ausgewertet wie <a href="#Local">lokale</a> Deklarationen, außer dass nach erfolgreicher Auswertung einer statischen Initialisierung (oder einer Gruppe von verbundenen Initialisierungen) diese effektiv aus dem Kontrollfluss entfernt und kein zweites Mal ausgeführt wird.</p>
<p id="AssumeStatic"><strong>Assume-Static-Modus</strong>: Eine Funktion kann so definiert werden, dass sie all ihre undeklarierten lokalen Variablen (außer ihre Parameter) statisch behandelt. Dazu muss in der ersten Zeile das Wort "static" stehen. Zum Beispiel:</p>
<pre>VomStatischenArrayAbrufen(ElementNummer)
{
    <strong>static</strong>
    static ErsterAufruf := true  <em>; Jede Initialisierung einer statischen Deklaration wird nur einmal ausgeführt.</em>
    if ErsterAufruf  <em>; Erstellt ein statisches Array beim ersten Aufruf, aber nicht mehr danach.</em>
    {
        ErsterAufruf := false
        Loop 10
            StatischesArray%A_Index% := "Wert #" . A_Index
    }
    return StatischesArray%ElementNummer%
}</pre>
<p>Im Assume-Static-Modus muss jede Variable, die nicht statisch sein soll, als lokal oder global deklariert werden (mit den gleichen Ausnahmen wie beim <a href="#AssumeLocal">Assume-Local-Modus</a>).</p>

<h3 id="More_about_locals_and_globals">Mehr über lokale und globale Variablen</h3>
<p>Mehrere Variablen können mithilfe eines Kommas auf derselben Zeile deklariert werden. Zum Beispiel:</p>
<pre>global LogDateiName, MaxVersuche := 5
static GesamtVersuche := 0, VorherErgebnis</pre>
<p id="DeclareInit">Es ist möglich, eine Variable bei ihrer Deklaration auf derselben Zeile zu initialisieren. Fügen Sie einfach auf der rechten Seite des Variablennamens eine Zuweisung an. Im Gegensatz zu <a href="#InitStatic">statischen Initialisierungen</a> werden die Initialisierungen von lokalen oder globalen Variablen jedes Mal ausgeführt, wenn die Funktion aufgerufen wird. Eine Zeile wie <code>local x := 0</code> hätte also den gleichen Effekt wie, als würde man zwei einzelne Zeilen schreiben: <code>local x</code>, gefolgt von <code>x := 0</code>. Jeder <a href="Variables.htm#AssignOp">Zuweisungsoperator</a> kann verwendet werden, allerdings erfordert eine Verbundzuweisung wie <code>global Trefferanzahl += 1</code>, dass der Variable zuvor ein Wert zugewiesen wurde.</p>
<p>Da die Wörter <em>local</em>, <em>global</em> und <em>static</em> unmittelbar beim Starten des Skripts verarbeitet werden, kann eine Variable nicht mithilfe einer <a href="commands/If.htm">IF-Anweisung</a> deklariert werden. Das heißt, dass eine Deklaration innerhalb eines IF- oder ELSE-<a href="commands/Block.htm">Blocks</a> bedingungslos für die gesamte Funktion wirksam wird (aber alle in der Deklaration enthaltenen Initialisierungen sind immer noch bedingt). Eine dynamische Deklaration wie <code>global Array%i%</code> ist nicht möglich, da alle nicht-dynamischen Referenzen zu Variablen wie <code>Array1</code> oder <code>Array99</code> bereits in Adressen aufgelöst worden wären.</p>

<h2 id="DynCall">Dynamisches Aufrufen einer Funktion</h2>
<p>Obwohl ein Funktionsaufrufausdruck normalerweise mit einem direkt geschriebenen Funktionsnamen beginnt, kann das Ziel des Aufrufs ein beliebiger Ausdruck sein, der ein <a href="objects/Functor.htm">Funktionsobjekt</a> erzeugt. Im Ausdruck <code>GetKeyState("Shift")</code> ist <em>GetKeyState</em> eigentlich eine Variablenreferenz, obwohl sie üblicherweise auf eine schreibgeschützte Variable verweist, die eine interne Funktion enthält.</p>
<p>Ein Funktionsaufruf wird als <em>dynamisch</em> bezeichnet, wenn das Ziel des Aufrufs während der Ausführung des Skripts ermittelt wird, nicht vor dem Start des Skripts. Die gleiche Syntax wird wie bei normalen Funktionsaufrufen verwendet; der einzige offensichtliche Unterschied besteht darin, dass bestimmte Fehlerprüfungen für nicht-dynamische Aufrufe beim Laden des Skripts, aber für dynamische Aufrufe jedoch erst während der Ausführung des Skripts durchgeführt werden.</p>
<p>Zum Beispiel würde <code>MeineFunk()</code> das in <em>MeineFunk</em> enthaltene <a href="objects/Functor.htm">Funktionsobjekt</a> aufrufen, das entweder der tatsächliche Name einer Funktion oder einfach eine Variable, der eine Funktion zugewiesen wurde, sein kann.</p>
<p>Es können auch andere Ausdrücke als Ziel eines Funktionsaufrufs verwendet werden, einschließlich <a href="Variables.htm#deref">Doppeldereferenzierungen</a>. Zum Beispiel würde <code>MeinArray[1]()</code> die Funktion aufrufen, die im ersten Element von MeinArray enthalten ist, während <code>%MeineVar%()</code> die Funktion aufrufen würde, die in der <em>Variable</em> enthalten ist, deren <em>Name</em> in MeineVar enthalten ist. Mit anderen Worten: Der Ausdruck vor der Parameterliste wird zuerst ausgewertet, um ein <a href="objects/Functor.htm">Funktionsobjekt</a> abzurufen, danach wird dieses Objekt aufgerufen.</p>
<p>Wenn der Zielwert aus einem der folgenden Gründe nicht aufgerufen werden kann, wird ein <a href="objects/Error.htm">Error</a> ausgelöst:</p>
<ul>
  <li>Wenn der Zielwert aufgrund seines Typs nicht aufgerufen werden kann, wird ein <a href="objects/Error.htm#MethodError">MethodError</a> ausgelöst. Jeder Wert mit einer Call-Methode kann aufgerufen werden, daher kann mit <code>HasMethod(Wert, "Call")</code> dieser Fehler vermieden werden.</li>
  <li>Es wurden zu wenig oder zu viele Parameter übergeben. Dies kann oft verhindert werden, indem man die <a href="objects/Func.htm#MinParams">MinParams</a>-, <a href="objects/Func.htm#MaxParams">MaxParams</a>- und <a href="objects/Func.htm#IsVariadic">IsVariadic</a>-Eigenschaft der Funktion überprüft.</li>
  <li>Es wurde etwas anderes als eine <a href="Concepts.htm#variable-references">Variablenreferenz</a> (VarRef) an einen <a href="#ByRef">ByRef</a>- oder AusgabeVar-Parameter übergeben. Dies kann mithilfe der <a href="objects/Func.htm#IsByRef">IsByRef-Methode</a> vermieden werden.</li>
</ul>
<p>Der Aufrufer einer Funktion sollte grundsätzlich wissen, was jeder Parameter bedeutet und wie viele es sind, bevor er die Funktion aufruft. Handelt es sich jedoch um einen dynamischen Aufruf, wird der Code der Funktion oft an den Funktionsaufruf angepasst, sodass in solchen Fällen die Ursache des Fehlers nicht unbedingt falsche Parameterwerte, sondern auch ein Schreibfehler in der Funktionsdefinition sein kann.</p>

<h2 id="ShortCircuit">Boolesche Kurzschlussauswertung</h2>
<p><em>AND, OR</em> und der <a href="Variables.htm#ternary">ternäre Operator</a> innerhalb eines <a href="Variables.htm#Expressions">Ausdrucks</a> reduzieren die Auswertung auf ein Minimum, um die Leistung zu erhöhen (egal ob Funktionsaufrufe vorhanden sind oder nicht). Beim Kurzschließen werden nur Bereiche des Ausdrucks ausgewertet, die Einfluss auf das Endergebnis haben. Im folgenden Beispiel wird gezeigt, wie genau das abläuft:</p>
<pre>if (FarbeName != "" AND not FindeFarbe(FarbeName))
    MsgBox FarbeName " konnte nicht gefunden werden."</pre>
<p>Wenn die <em>FarbeName</em>-Variable leer sein sollte, wird die FindeFarbe()-Funktion nie aufgerufen, weil die linke Seite von <em>AND</em> als <em>falsch</em> gewertet wird, wodurch die rechte Seite nicht mehr in der Lage wäre, das Endergebnis auf <em>wahr</em> zu bringen.</p>
<p>Dieses Verhalten führt dazu, dass die Nebeneffekte einer Funktion (wie das Ändern des Inhalts einer globalen Variable) nie auftreten werden, wenn diese Funktion auf der rechten Seite von <em>AND</em> oder <em>OR</em> aufgerufen wird.</p>
<p>Beachten Sie außerdem, dass die Kurzschlussauswertung verschachtelte <em>AND</em>s und <em>OR</em>s stufenweise abarbeitet. Wenn <em>FarbeName</em> z. B. im folgenden Ausdruck leer ist, wird nur der Vergleich ganz links durchgeführt, weil die linke Seite dann ausreichen würde, um das Endergebnis zweifelsfrei zu bestimmen:</p>
<pre>if (FarbeName = "" <u>OR</u> FindeFarbe(FarbeName, Region1) <u>OR</u> FindeFarbe(FarbeName, Region2))
    break   <em>; Nichts zu durchsuchen oder Übereinstimmung gefunden.</em></pre>
<p>Wie die Beispiele oben zeigen, sollten umfangreiche (zeitaufwendige) Funktionen in der Regel auf der rechten Seite von <em>AND</em> oder <em>OR</em> aufgerufen werden, um die Leistung zu erhöhen. Diese Technik kann auch genutzt werden, um das Aufrufen einer Funktion zu verhindern, wenn ihr ein Wert übergeben wurde, den sie für unpassend hält (z. B. eine leere Zeichenkette).</p>
<p>Der <a href="Variables.htm#ternary">ternäre Bedingungsoperator (?:)</a> wendet auch die Kurzschlussauswertung an, indem er nur die gewinnende Abzweigung auswertet.</p>

<h2 id="nested">Verschachtelte Funktionen</h2>
<p>Eine <em>verschachtelte</em> Funktion ist eine Funktion, die in einer anderen Funktion definiert ist. Zum Beispiel:</p>
<pre>
außen(x) {
    innen(y) {
        MsgBox(y, x)
    }
    innen("eins")
    innen("zwei")
}
außen("Titel")
</pre>
<p>Der Zugriff auf eine verschachtelte Funktion kann nicht via Name außerhalb der äußeren Funktion erfolgen, aber überall innerhalb dieser Funktion, einschließlich innerhalb von weiteren verschachtelten Funktionen.</p>
<p>Standardmäßig kann eine verschachtelte Funktion auf beliebige <a href="#static">statische</a> Variablen der äußeren Funktion zugreifen, sogar dynamisch.</p>
<p id="capture-var">Standardmäßig "erfasst" eine verschachtelte Funktion automatisch eine nicht-statische lokale Variable einer äußeren Funktion, wenn die folgenden Voraussetzungen erfüllt sind:</p>
<ol>
  <li>Die äußere Funktion muss auf die Variable auf mindestens eine der folgenden Arten verweisen:
    <ol type="a">
      <li>Indem man sie mit <code>local</code> deklariert.</li>
      <li>Indem man sie in der Parameterliste deklariert.</li>
      <li>Als nicht-dynamisches Ziel einer Zuweisung oder des <a href="Variables.htm#ref">Referenzoperators (&amp;)</a>.</li>
    </ol>
  </li>
  <li>Die innere Funktion (oder eine darin verschachtelte Funktion) muss nicht-dynamisch auf die Variable verweisen.</li>
</ol>
<p>Eine verschachtelte Funktion, die erfasste Variablen hat, wird als <a href="#closures">Closure</a> bezeichnet.</p>
<p>Der <a href="Language.htm#dynamic-variables">dynamische Zugriff</a> auf nicht-statische lokale Variablen der äußeren Funktion ist nicht möglich, es sei denn, sie wurden erfasst.</p>
<p>Explizite Deklarationen haben immer Vorrang vor lokalen Variablen der umschließenden Funktion. <code>local x</code> beispielsweise deklariert eine Variable, die lokal für die aktuelle Funktion ist, unabhängig von einem <code>x</code> in der äußeren Funktion. <a href="#Global">Globale</a> Deklarationen in der äußeren Funktion gelten auch für verschachtelte Funktionen, es sei denn, sie wurden mit einer expliziten Deklaration überschrieben.</p>
<p>Wenn eine Funktion als <a href="#AssumeGlobal">Assume-Global</a> deklariert ist, sind alle lokalen oder statischen Variablen, die <em>außerhalb</em> dieser Funktion erstellt wurden, für die Funktion selbst oder eine ihrer verschachtelten Funktionen nicht direkt zugänglich. Eine verschachtelte Assume-Static-Funktion hingegen kann immer noch auf die Variablen der äußeren Funktion zugreifen.</p>
<p>Funktionen sind standardmäßig im <a href="#AssumeLocal">Assume-Local</a>-Modus, was auch für verschachtelte Funktionen gilt, sogar innerhalb einer <a href="#AssumeStatic">Assume-Static</a>-Funktion. Wenn die äußere Funktion jedoch im <a href="#AssumeGlobal">Assume-Global</a>-Modus ist, verhalten sich verschachtelte Funktionen so, als gelte standardmäßig Assume-Global, außer dass sie auf die lokalen und statischen Variablen der äußeren Funktion zugreifen können.</p>
<p>Jede Funktionsdefinition erzeugt eine schreibgeschützte Variable, die die Funktion selbst enthält; also ein <a href="objects/Func.htm">Func</a>- oder <a href="#closures">Closure</a>-Objekt. Weiter unten finden Sie Beispiele, wie dies verwendet werden kann.</p>

<h3 id="closures">Closures</h3>
<p>Ein <em>Closure</em> ist eine verschachtelte Funktion, die an eine Reihe von <em>freien Variablen</em> gebunden ist. Freie Variablen sind lokale Variablen der äußeren Funktion, auf die verschachtelte Funktionen zugreifen können. Closures ermöglichen es, dass eine oder mehrere verschachtelte Funktionen ihre Variablen mit der äußeren Funktion teilen, selbst wenn die äußere Funktion bereits ihr Ende erreicht hat.</p>
<p>Um ein Closure zu erstellen, definieren Sie einfach eine verschachtelte Funktion, die auf die Variablen der äußeren Funktion verweist. Zum Beispiel:</p>
<pre>
Begrüßer_erstellen(f)
{
    begrüße(Subjekt)  <em>; Dies wird wegen f ein Closure sein.</em>
    {
        MsgBox Format(f, Subjekt)
    }
    return begrüße  <em>; Das Closure zurückgeben.</em>
}

g := Begrüßer_erstellen("Hallo, {}!")
g(A_UserName)
g("Welt")
</pre>
<p>Closures können auch mit internen Funktionen wie z. B. <a href="commands/SetTimer.htm">SetTimer</a> oder <a href="commands/Hotkey.htm">Hotkey</a> verwendet werden. Zum Beispiel:</p>
<pre>
app_hotkey(tastenname, app_titel, app_pfad)
{
    aktivieren(tastenname)  <em>; Dies wird wegen app_titel und app_pfad ein Closure sein.</em>
    {
        if WinExist(app_titel)
            WinActivate
        else
            Run app_pfad
    }
    Hotkey tastenname, aktivieren
}
<em>; Win+N aktiviert oder startet Notepad.</em>
app_hotkey "#n", "ahk_class Notepad", "notepad.exe"
<em>; Win+W aktiviert oder startet WordPad.</em>
app_hotkey "#w", "ahk_class WordPadClass", "wordpad.exe"
</pre>
<p>Eine verschachtelte Funktion ist automatisch ein Closure, wenn sie alle nicht-statischen lokalen Variablen der äußeren Funktion erfasst. Die Variable, die dem Closure selbst entspricht (z. B. <code>aktivieren</code>), ist ebenfalls eine nicht-statische lokale Variable, so dass alle verschachtelten Funktionen, die auf ein Closure verweisen, ebenfalls automatisch Closures sind.</p>
<p>Jeder Aufruf der äußeren Funktion erzeugt neue Closures, die sich von allen vorherigen Aufrufen unterscheiden. Benannte Closures werden bei jedem Aufruf der äußeren Funktion nur einmal erzeugt, während Fat-Arrow-Ausdrücke jedes Mal ein neues Closure erzeugen, wenn sie ausgewertet werden.</p>
<p id="circular-closure">Es ist ratsam, eine Referenz zu einem Closure nicht in eine der freien Variablen des Closure zu speichern, da dies einen <a href="Objects.htm#Circular_References">Zirkelbezug</a> erzeugt, der unterbrochen werden muss (z. B. durch Leeren der Variable), bevor das Closure freigegeben werden kann. Eine Closure kann jedoch bedenkenlos auf sich selbst und andere Closures mittels ihrer ursprünglichen Variablen verweisen, ohne einen Zirkelbezug zu erzeugen. Zum Beispiel:</p>
<pre>
timertest() {
    x := "tack!"
    tick() {
        MsgBox x           <em>; x macht dies zu einem Closure.</em>
        SetTimer tick, 0   <em>; Die originale Var des Closures kann bedenkenlos verwendet werden.</em>
        ; SetTimer t, 0    <em>; Das Erfassen von t würde einen Zirkelbezug erzeugen.</em>
    }
    t := tick              <em>; Das ist okay, da t oben nicht erfasst wird.</em>
    SetTimer t, 1000
}
timertest()
</pre>

<h2 id="remarks">Return, Exit und allgemeine Bemerkungen</h2>
<p>Wenn der Ausführungsablauf die geschweifte Endklammer der Funktion vor einem <a href="commands/Return.htm">Return</a> erreicht hat, endet die Funktion und gibt eine leere Zeichenkette zurück. Es wird auch ein leerer Wert zurückgegeben, wenn die Funktion den Parameter von <a href="commands/Return.htm">Return</a> explizit weglässt.</p>
<p>Wenn eine Funktion ein <a href="commands/Exit.htm">Exit</a> zum Terminieren des <a href="misc/Threads.htm">aktuellen Threads</a> verwendet, erhält ihr Aufrufer überhaupt keinen Rückgabewert. Das <code>Var</code> in <code>Var := Addieren(2, 3)</code> bliebe beispielsweise unverändert, wenn <code>Addieren()</code> via Exit beendet wird. Das gleiche passiert, wenn die Funktion wegen <a href="commands/Throw.htm">Throw</a> oder eines Laufzeitfehlers (z. B. <a href="commands/Run.htm">Ausführen</a> einer nicht-existierenden Datei) beendet wird.</p>
<p>Um eine Funktion mit einem oder mehreren leeren Werten (leeren Zeichenketten) aufzurufen, verwenden Sie zwei aufeinanderfolgende Anführungszeichen. Zum Beispiel: <code>FindeFarbe(FarbeName, "")</code>.</p>
<p>Da das Aufrufen einer Funktion keinen neuen <a href="misc/Threads.htm">Thread</a> startet, werden Änderungen an Einstellungen wie <a href="commands/SendMode.htm">SendMode</a> und <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a> auch für den Aufrufer wirksam.</p>
<p><a href="commands/ListVars.htm">ListVars</a> kann, wenn es in einer Funktion verwendet wird, die Namen und Inhalte von <a href="#Local">lokalen Variablen</a> anzeigen. Solche Informationen können helfen, ein Skript zu debuggen (Fehler zu finden und zu beseitigen).</p>
<h2 id="Style_and_Naming_Conventions">Stil- und Namenskonventionen</h2>
<p>Bei komplexen Funktionen kann es hilfreich sein, die speziellen Variablen mit eindeutigen Präfixen zu versehen, um die Übersichtlichkeit und Wartbarkeit des Skripts zu erhöhen. Die Namen der Parameter einer Funktion können beispielsweise mit "p" oder "p_" beginnen, damit die Parameter auf den ersten Blick leicht zu erkennen sind, besonders um die Übersicht zu bewahren, wenn eine Funktion mehrere Dutzend <a href="#Local">lokale Variablen</a> enthält. Ebenso kann das Präfix "r" oder "r_" für <a href="#ByRef">ByRef-Parameter</a> und "s" oder "s_" für <a href="#static">statische Variablen</a> verwendet werden.</p>
<p>Der <a href="commands/Block.htm#otb">One True Brace Style</a> (OTB) kann je nach Bedarf angewendet werden, um Funktionen zu definieren. Zum Beispiel:</p>
<pre>Addieren(x, y) {
    return x + y
}</pre>

<h2 id="include">Skripte mittels #Include auf die gleichen Funktionen zugreifen lassen</h2>
<p>Die <a href="commands/_Include.htm">#Include</a>-Direktive kann verwendet werden, um Funktionen aus einer externen Datei zu laden.</p>

<h2 id="BuiltIn">Interne Funktionen</h2>
<p>Eine interne Funktion gilt als überschrieben, wenn im Skript eine Funktion mit demselben Namen definiert ist. Zum Beispiel könnte man anstelle der normalen WinExist-Funktion eine selbstdefinierte Funktion verwenden. Allerdings kann danach die originale Funktion nicht mehr aufgerufen werden.</p>
<p>Externe Funktionen, die sich in DLL-Dateien befinden, können via <a href="commands/DllCall.htm">DllCall</a> aufgerufen werden.</p>
<p>Eine Liste aller internen Funktionen finden Sie unter <a href="commands/index.htm">Alphabetischer Funktionsindex</a>.</p>
</body>
</html>

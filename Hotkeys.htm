<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Hotkeys - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie mehr über Hotkeys im Allgemeinen, Modifikatorsymbole, kontextabhängige Hotkeys, benutzerdefinierte Kombinationen, Mausrad-Hotkeys, Funktions-Hotkeys, etc." />
<meta name="keywords" content="hotkey,hotkeys,hot key,hot keys,shortcut,shortcuts,shortcut key,shortcut keys,keyboard shortcut,keyboard shortcuts,button,buttons,click,press,tastenkürzel,tastaturkurzbefehl,schnelltaste,schnelltasten,tastenkombination,tastenkombinationen,taste,tasten,klicken,drücken">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotkeys <span class="headnote">(Maus-, Joystick- und Tastaturkurzbefehle)</span></h1>


<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfache Beispiele</a></li>
  <li><a href="#Symbols">Hotkey-Modifikatorsymbole</a></li>
  <li><a href="#Context">Kontextabhängige Hotkeys</a></li>
  <li><a href="#combo">Benutzerdefinierte Kombinationen</a></li>
  <li><a href="#Features">Sonstige Features</a></li>
  <li><a href="#Wheel">Mausrad-Hotkeys</a></li>
  <li><a href="#Remarks">Tipps und Hinweise</a></li>
  <li><a href="#alttab">Alt-Tab-Hotkeys</a></li>
  <li><a href="#Function">Benannte Funktions-Hotkeys</a></li>
</ul>

<h2 id="Intro">Einführung und einfache Beispiele</h2>
<p>Hotkeys werden manchmal auch als Tastaturkurzbefehle bezeichnet, weil sie schnell und einfach eine Aktion auslösen können (eine Aktion wäre beispielsweise das Starten eines Programms oder <a href="misc/Macros.htm">Tastatur-Makros</a>). Das folgende Beispiel zeigt, wie der Texteditor mit dem Hotkey <kbd>Win</kbd>+<kbd>N</kbd> gestartet werden kann. Das Raute-Zeichen [#] ist ein sogenannter <em>Modifikator</em> und symbolisiert <kbd>Win</kbd>:</p>
<pre>#n::
{
    Run "notepad"
}</pre>
<p id="HotBraces">Im Beispiel oben dienen die geschweiften Klammern dazu, einen <a href="Functions.htm">Funktionskörper</a> für den Hotkey zu definieren. Die geschweifte Startklammer kann in der gleichen Zeile wie das Doppelpunktpaar stehen, um den <a href="commands/Block.htm#otb">OTB-Style (One True Brace)</a> zu unterstützen. Wenn ein Hotkey allerdings nur eine einzige Zeile ausführen muss, kann diese Zeile rechts neben dem Doppelpunkt-Paar geschrieben werden. Mit anderen Worten sind die geschweiften Klammern implizit:</p>
<pre>#n::Run "notepad"</pre>
<p id="ThisHotkey">Beim Auslösen eines Hotkeys wird der Name des Hotkeys (ohne Doppelpunkte am Ende) als erster Parameter namens ThisHotkey übergeben. Zum Beispiel:</p>
<pre>#n::MsgBox ThisHotkey  <em>; Meldet #n</em></pre>
<p>Bis auf wenige Ausnahmen ähnelt dies der internen Variable <a href="Variables.htm#ThisHotkey">A_ThisHotkey</a>. Der Parametername kann mithilfe einer <a href="#Function">benannten Funktion</a> geändert werden.</p>
<p>Um zu erreichen, dass ein Hotkey von mehr als einem Modifikator ausgelöst werden kann, müssen diese nebeneinander aufgelistet werden (die Reihenfolge spielt keine Rolle). Das folgende Beispiel benutzt <code>^!s</code>, um <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd> zu kennzeichnen:</p>
<pre>^!s::
{
    <a href="commands/Send.htm">Send</a> "Mit freundlichen Grüßen,{enter}Max Mustermann"  <em>; Diese Zeile sendet Tastendrücke an das aktive (vorderste) Fenster.</em>
}</pre>
<h2 id="Symbols">Hotkey-Modifikatorsymbole</h2>
<p>Folgende Modifikatorsymbole sind zum Definieren von Hotkeys möglich:</p>
<table class="info fixed">
  <tr>
    <th class="center" style="width:30px">Symbol</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center bold">#</td>
    <td>
      <p>WIN-Taste (Windows-Logo-Taste).</p>
      <p id="win-l">Hotkeys in Verbindung mit <kbd>Win</kbd> (z. B. #a) werden warten, bis <kbd>Win</kbd> losgelassen wird, bevor ein beliebiger Text mit einem <kbd>L</kbd>-Tastendruck gesendet wird. Dadurch wird verhindert, dass ein <a href="commands/Send.htm">Send</a> in so einem Hotkey den PC unbeabsichtigt sperrt. Dieses Verhalten gilt für alle Send-Modi, außer <a href="commands/Send.htm#SendPlayDetail">SendPlay</a> (weil es das nicht braucht), <a href="commands/Send.htm#blind">Blind-Modus</a> und <a href="commands/Send.htm#SendText">Text-Modus</a>.</p>
      <p class="note"><strong>Hinweis:</strong> Das Drücken eines Hotkeys, der <kbd>Win</kbd> enthält, kann zu zusätzlichen simulierten Tastendrücken führen (standardmäßig <kbd>Strg</kbd>). Siehe <a href="misc/A_MenuMaskKey.htm">A_MenuMaskKey</a>.</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">!</td>
    <td>
      <p><kbd>Alt</kbd></p>
      <p class="note"><strong>Hinweis:</strong> Das Drücken eines Hotkeys, der <kbd>Alt</kbd> enthält, kann zu zusätzlichen simulierten Tastendrücken führen (standardmäßig <kbd>Strg</kbd>). Siehe <a href="misc/A_MenuMaskKey.htm">A_MenuMaskKey</a>.</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">^</td>
    <td><kbd>Strg</kbd></td>
  </tr>
  <tr>
    <td class="center bold">+</td>
    <td><kbd>Umschalt</kbd></td>
  </tr>
  <tr>
    <td class="center bold">&amp;</td>
    <td>Mit einem Und-Zeichen können zwei beliebige Tasten oder Maustasten zu einem benutzerdefinierten Hotkey kombiniert werden. Siehe <a href="#combo">unten</a> für weitere Details.</td>
  </tr>
  <tr id="LeftRight">
    <td class="center bold">&lt;</td>
    <td>Verwendet die linke Taste des Tastenpaares. Zum Beispiel würde &lt;!a das gleiche wie !a bewirken, allerdings kann der Hotkey nur mit der linken <kbd>Alt</kbd>-Taste ausgelöst werden.</td>
  </tr>
  <tr>
    <td class="center bold">&gt;</td>
    <td>Verwendet die rechte Taste des Tastenpaares.</td>
  </tr>
  <tr id="AltGr">
    <td class="center bold">&lt;^&gt;!</td>
    <td><p><kbd>AltGr</kbd> (<a href="https://de.wikipedia.org/wiki/Alt_Gr">alternative Grafik bzw. alternativer Schriftsatz</a>). Wenn Ihre Tastaturbelegung <kbd>AltGr</kbd> anstelle einer rechten <kbd>Alt</kbd>-Taste aufweist, kann diese Symbolreihe in der Regel für <kbd>AltGr</kbd> benutzt werden. Zum Beispiel:</p>
      <pre>&lt;^&gt;!m::MsgBox "Sie haben ALTGR+M gedrückt."
&lt;^&lt;!m::MsgBox "Sie haben STRGLinks+ALTLinks+M gedrückt."</pre>
      <p>Wenn die <kbd>AltGr</kbd>-Taste stattdessen selbst zu einem Hotkey gemacht werden soll, muss der folgende Hotkey benutzt werden (ohne dass Hotkeys wie oben vorhanden sind):</p>
      <pre>LControl &amp; RAlt::MsgBox "Sie haben ALTGR gedrückt."</pre></td>
  </tr>
  <tr id="wildcard">
    <td class="center bold">*</td>
    <td><p>Platzhalter: Bewirkt, dass der Hotkey immer ausgelöst wird, egal ob zusätzliche Modifikatoren gedrückt gehalten werden. Dieses Symbol wird oft zum <a href="misc/Remap.htm">Neubelegen</a> von Tasten oder Maustasten benutzt. Zum Beispiel:</p>
      <pre>*#c::Run "calc.exe"  <em>; WIN+C, UMSCHALT+WIN+C und STRG+WIN+C usw. können diesen Hotkey auslösen.</em>
*ScrollLock::Run "notepad"  <em>; ScrollLock wird diesen Hotkey immer auslösen, egal ob Modifikatoren gedrückt gehalten werden.</em></pre>
      <p>Platzhalter-Hotkeys sowie Hotkeys, die mit einem Platzhalter-Hotkey übereinstimmen würden, benutzen immer den Tastatur-Hook. Zum Beispiel würde die Anwesenheit von <code>*a::</code> bewirken, dass <code>^a::</code> immer auf den Hook zugreifen wird.</p></td>
  </tr>
  <tr id="Tilde">
    <td class="center bold">~</td>
    <td><p>Verhindert, dass die ursprünglichen Funktionen der Hotkey-Tasten blockiert werden (bzw. im System versteckt werden). Die Hotkeys im folgenden Beispiel bewirken, dass der Mausklick des Benutzers an das aktive Fenster gesendet wird, egal welche Aktionen ihnen zugewiesen sind:</p>
      <pre>~RButton::MsgBox "Sie haben die rechte Maustaste gedrückt."
~RButton &amp; C::MsgBox "Sie haben C gedrückt, während Sie die rechte Maustaste gedrückt hielten."</pre>
      <p>Im Gegensatz zu den anderen Präfix-Symbolen darf das Tilde-Präfix in einigen <a href="commands/_HotIf.htm#variant">Varianten</a> eines Hotkeys vorkommen und in anderen nicht. Wenn ein Tildezeichen allerdings an die <a href="#prefix">Präfixtaste</a> einer beliebigen benutzerdefinierten Tastenkombination angefügt wurde, die weder ausgeschaltet noch suspendiert ist, wird das Verhalten dieser Präfixtaste bei <em>allen</em> Kombinationen beeinflusst.</p>
      <p>Spezielle Hotkeys, die etwas mit <a href="#alttab">Alt-Tab</a> zu tun haben, ignorieren immer das Tilde-Präfix.</p>
      <p>Wenn das Tilde-Präfix an eine benutzerdefinierte Modifikatortaste (<a href="#prefix">Präfixtaste</a>) angefügt wird, die selbst auch ein Hotkey ist, wird dieser Hotkey ausgelöst, sobald die Taste nach unten gedrückt wird, und nicht erst, nachdem die Taste losgelassen wurde. Zum Beispiel wird der oben genannte Hotkey <em>~RButton</em> bereits ausgelöst, wenn die Maustaste nach unten gedrückt wird.</p>
      <p>Wenn das Tilde-Präfix nur an die benutzerdefinierte Tastenkombination angefügt wird, aber nicht an den kombinationslosen Hotkey, wird die ursprüngliche Funktion der Taste weiterhin blockiert. Zum Beispiel bewirkt das folgende Skript, dass das Halten der <kbd>Menü</kbd>-Taste nicht das Kontextmenü auslöst, sondern einen Tooltip anzeigt:</p>
      <pre>AppsKey::ToolTip "Drücken Sie &lt; oder &gt; zum Durchschalten der Fenster."
AppsKey Up::ToolTip
~AppsKey &amp; &lt;::Send "!+{Esc}"
~AppsKey &amp; &gt;::Send "!{Esc}"</pre>
      <p>Sobald der Tilde-Modifikator bei mindestens einer Variante eines Tastatur-Hotkeys angegeben ist, wird dieser Hotkey immer den Tastatur-Hook benutzen.</p>
    </td>
  </tr>
  <tr id="prefixdollar">
    <td class="center bold">$</td>
    <td>
      <p>Dieses Präfix ist normalerweise nur notwendig, um zu verhindern, dass ein Hotkey sich selbst via <a href="commands/Send.htm">Send</a>-Funktion auslösen kann. Das $-Präfix zwingt den <a href="commands/InstallKeybdHook.htm">Tastatur-Hook</a> diesen Hotkey zu implementieren, um zu erreichen, dass dieser Hotkey nicht mehr durch die <a href="commands/Send.htm">Send</a>-Funktion ausgelöst werden kann. Dieses Präfix ist das gleiche wie, als hätte man <code><a href="commands/_UseHook.htm">#UseHook</a></code> irgendwo vor der Hotkey-Definition angegeben.</p>
      <p>Das $-Präfix hat keinen Effekt auf Maus-Hotkeys, weil solche Hotkeys immer auf den Maus-Hook zugreifen. Außerdem hat es keinen Effekt auf Hotkeys, die den Tastatur-Hook bereits einbeziehen, wie z. B. Tastatur-Hotkeys mit <a href="#Tilde">Tilde</a>- (~) oder <a href="#wildcard">Platzhalter</a>-Modifikatoren (*), KeyUp-Hotkeys und benutzerdefinierte Kombinationen. Mit <a href="commands/ListHotkeys.htm">ListHotkeys</a> kann man feststellen, ob ein bestimmter Hotkey den Tastatur-Hook benutzt.</p>
      <p><a href="commands/_InputLevel.htm">#InputLevel</a> und <a href="commands/SendLevel.htm">SendLevel</a> ermöglichen zusätzliche Kontrolle darüber, welche Hotkeys und Hotstrings von der Send-Funktion ausgelöst werden können.</p>
    </td>
  </tr>
  <tr id="keyup">
    <td class="center">UP</td>
    <td><p>Das UP-Wort muss nach dem Namen eines Hotkeys erfolgen und bewirkt, dass der Hotkey erst ausgelöst wird, wenn die Taste losgelassen wird, und nicht, wenn sie bereits nach unten gedrückt wird. Das folgende Beispiel zeigt, wie die linke <kbd>Win</kbd>-Taste <a href="misc/Remap.htm">neubelegt</a> werden kann, um den Effekt der linken <kbd>Strg</kbd>-Taste nachzuahmen:</p>
      <pre>*LWin::Send "{LControl down}"
*LWin Up::Send "{LControl up}"
</pre>
      <p>Das UP-Wort kann auch bei normalen Hotkeys angewendet werden. Zum Beispiel: <code>^!r Up::MsgBox "Sie haben STRG+ALT+R gedrückt und losgelassen"</code>. Dieses Wort funktioniert auch bei <a href="#combo">Kombinations-Hotkeys</a> (z. B. <code>F1 &amp; e Up::</code>)</p>      
      <p>Einschränkungen: 1) UP funktioniert nicht in Verbindung mit <a href="KeyList.htm">Joystick-Tasten</a>; und 2) Ein UP-Hotkey ohne entsprechenden Counterpart (normaler Hotkey oder DOWN-Hotkey) wird diese Taste komplett übernehmen, um zu verhindern, dass sie stecken bleibt. Eine Möglichkeit dies zu verhindern wäre es, ein <a href="#Tilde">Tilde-Präfix</a> anzufügen (z. B. <code>~LControl up::</code>)</p>
      <p>UP-Hotkeys und ihre Counterparts (DOWN-Hotkeys, sofern vorhanden) benutzen immer den Tastatur-Hook.</p>
      <p>Erwähnenswert ist außerdem, dass mit einer ähnlichen Methode wie oben ein Hotkey zu einer Präfix-Taste gemacht werden kann. Der Vorteil: Obwohl der Hotkey nach dem Loslassen ausgelöst wird, wird er dies nur tun, wenn Sie keine andere Taste drücken, während er gedrückt gehalten wurde. Zum Beispiel:</p>
      <pre>LControl &amp; F1::return  <em>; Die linke STRG-Taste wird zu einem Präfix, sobald sie mindestens einmal vor "&amp;" verwendet wird.</em>
LControl::MsgBox "Sie haben LControl losgelassen, ohne mit ihr eine andere Taste zu modifizieren."</pre></td>
  </tr>
</table>
<p class="note"><strong>Hinweis</strong>: Die <a href="KeyList.htm">Tastenliste</a> enthält alle unterstützten Tastatur-, Maus- oder Joystick-Tasten.</p>
<p>Mehrere Hotkeys können übereinandergestapelt werden, um sie die gleiche Aktion durchführen zu lassen. Zum Beispiel:</p>
<pre>^Numpad0::
^Numpad1::
{
    MsgBox "Drücken Sie entweder STRG+Numpad0 oder STRG+Numpad1, um diese Meldung anzuzeigen."
}
</pre>
<p>Um eine Taste oder Tastenkombination im kompletten System zu deaktivieren, ist es erforderlich, sie nichts tun zu lassen. Das folgende Beispiel deaktiviert die rechte <kbd>Win</kbd>-Taste:</p>
<pre>RWin::return</pre>

<h2 id="Context">Kontextabhängige Hotkeys</h2>
<p>Die <a href="commands/_HotIf.htm">#HotIf</a>-Direktive kann genutzt werden, um Hotkeys je nach Bedingung unterschiedliche (oder überhaupt keine) Aktionen durchführen zu lassen. Zum Beispiel:</p>
<pre>#HotIf WinActive("ahk_class Notepad")
^a::MsgBox "Sie haben STRG+A gedrückt, während der Texteditor aktiv ist. Drückt man STRG+A in irgendeinem anderen Fenster, wird die Tastenkombination selbst gesendet."
#c::MsgBox "Sie haben WIN+C gedrückt, während der Texteditor aktiv ist."

#HotIf
#c::MsgBox "Sie haben WIN+C gedrückt, während ein beliebiges Fenster außer Texteditor aktiv ist."

#HotIf MausIstÜber("ahk_class Shell_TrayWnd") <em>; Für MausIstÜber, siehe <a href="commands/_HotIf.htm#ExVolume">#HotIf-Beispiel 1</a>.</em>
WheelUp::Send "{Volume_Up}"     <em>; Mausrad über die Taskleiste: Lautstärke erhöhen/verringern.</em>
WheelDown::Send "{Volume_Down}" <em>;</em>
</pre>

<h2 id="combo">Benutzerdefinierte Kombinationen</h2>
<p>Um eine benutzerdefinierte Kombination zu definieren, die aus zwei Tasten (außer Joystick-Tasten) besteht, ist es erforderlich, " &amp; " zwischen diesen Tasten zu setzen. Das folgende Beispiel zeigt, wie ein Hotkey ausgelöst werden kann, wenn Numpad0 gedrückt gehalten und danach eine zweite Taste gedrückt wird:</p>
<pre id="prefix">Numpad0 &amp; Numpad1::MsgBox "Sie haben Numpad1 gedrückt, während Sie Numpad0 gedrückt hielten."
Numpad0 &amp; Numpad2::Run "Notepad"</pre>
<p><strong>Die Präfixtaste verliert ihre ursprüngliche Funktion:</strong> Im oberen Beispiel wurde Numpad0 zu einer <em>Präfixtaste</em> gemacht; allerdings hat dies den Effekt, dass Numpad0 ihre originale/ursprüngliche Funktion nicht durchführen kann, sobald sie selbst gedrückt wird. Um das zu vermeiden, können Sie das Skript so konfigurieren, dass Numpad0 eine neue Aktion durchführt, wie z. B.:</p>
<pre>Numpad0::WinMaximize "A"   <em>; Maximiert das aktive/vorderste Fenster.</em>
Numpad0::Send "{Numpad0}"  <em>; Numpad0 erzeugt nach dem <i>Loslassen</i> einen Numpad0-Tastendruck. Siehe unteren Kommentar.</em></pre>
<p><strong>Hotkey nach dem Loslassen auslösen:</strong> Bereits einer der oben genannten benutzerdefinierten Kombinations-Hotkeys bewirkt, dass die definierte Aktion erst ausgelöst wird, wenn Numpad0 <em>losgelassen</em> wird, aber nur, wenn Sie keine andere Taste drücken, während Numpad0 gedrückt gehalten wurde. Dieses Verhalten kann unterdrückt werden, wenn man ein <a href="#Tilde">Tilde-Präfix</a> an beiden Hotkeys anfügt.</p>
<p id="combo_mods"><strong>Modifikatoren:</strong> Im Gegensatz zu normalen Hotkeys verhalten sich benutzerdefinierte Kombinationen so, als hätten sie standardmäßig den <a href="#wildcard">Platzhalter-Modifikator (*)</a>. Zum Beispiel wird <code>1 &amp; 2::</code> immer ausgelöst, egal ob man beim Drücken von <kbd>1</kbd> und <kbd>2</kbd> die <kbd>Strg</kbd>- oder <kbd>Alt</kbd>-Taste gedrückt hält, während <code>^1::</code> nur durch Drücken von <kbd>Strg</kbd>+<kbd>1</kbd> ausgelöst werden kann, und nicht durch <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>1</kbd>.</p>
<p>In Bezug auf standardmäßigen Modifikatortasten funktionieren normale Hotkeys in der Regel genauso oder besser als "benutzerdefinierte" Kombinationen. Zum Beispiel ist <code>&lt;+s::</code> eher zu empfehlen als <code>LShift &amp; s::</code>.</p>
<p>Kombinationen, die aus drei oder mehr Tasten bestehen, werden nicht unterstützt. Kombinationen können, sofern sie von Ihrer Tastatur unterstützt werden, mithilfe von <a href="commands/_HotIf.htm">#HotIf</a> und <a href="commands/GetKeyState.htm">GetKeyState</a> erkannt werden, allerdings ist ein konsistentes Ergebnis nicht immer gegeben. Zum Beispiel:</p>
<pre><em>; Halten Sie die MENÜ- und ALT-Taste gedrückt, und drücken Sie dann Bindestrich (-).</em>
#HotIf GetKeyState("AppsKey", "P")
Alt &amp; -::MsgBox "Hotkey aktiviert."

<em>; Notwendig, wenn ALT zuerst gedrückt gehalten wird:</em>
#HotIf GetKeyState("Alt", "P")
AppsKey &amp; -::MsgBox "Hotkey aktiviert."

<em>; , &amp; . &amp; -::</em>
#HotIf GetKeyState(",") &amp;&amp; GetKeyState(".")
-::MsgBox</pre>
<p><strong>Tastatur-Hook:</strong> Benutzerdefinierte Kombinationen, die Tastatur-Tasten enthalten, sowie Hotkeys, die die Präfixtaste als Suffix benutzen, verwenden immer den Tastatur-Hook. Zum Beispiel würde <code>a &amp; b::</code> bewirken, dass <code>^a::</code> immer den Hook einbeziehen wird.</p>

<h2 id="Features">Sonstige Features</h2>
<p><strong>NUM-, FESTSTELL- und ROLLEN-Taste</strong>: Diese Tasten können gezwungen werden, "AlwaysOn" (immer an) oder "AlwaysOff" (immer aus) zu sein. Zum Beispiel: <code><a href="commands/SetNumScrollCapsLockState.htm">SetNumLockState</a> "AlwaysOn"</code>.</p>
<p><strong>Explorer-Hotkeys überschreiben</strong>: Die vordefinierten Windows-Hotkeys wie <kbd>Win</kbd>+<kbd>E</kbd> (#e) und <kbd>Win</kbd>+<kbd>R</kbd> (#r) können jeweils mit einer beliebigen benutzerdefinierten Aktion überschrieben werden. Siehe "<a href="misc/Override.htm">Überschreiben oder Deaktivieren von Hotkeys</a>" für Details.</p>
<p><strong>Alt-Tab ersetzen</strong>: Hotkeys können eine alternative Methode für Alt-Tab bereitstellen. Zum Beispiel bewirken die folgenden zwei Hotkeys, dass die Alt-Tab-Prozedur mit der rechten Hand durchgeführt werden kann:</p>
<pre>RControl &amp; RShift::AltTab  <em>; Halten Sie rechte STRG gedrückt und drücken Sie mehrmals rechte UMSCHALT, um durchzuschalten.</em>
RControl &amp; Enter::ShiftAltTab  <em>; Halten Sie weiter rechte STRG gedrückt und drücken Sie ENTER, um in die andere Richtung durchzuschalten.</em></pre>
<p>Siehe <a href="#alttab">Alt-Tab</a> für weitere Details.</p>

<h2 id="Wheel">Mausrad-Hotkeys</h2>
<p>Mit den Tastennamen WheelDown und WheelUp können Hotkeys erstellt werden, die durch Drehen des Mausrads ausgelöst werden können. Hier einige Beispiele für Mausrad-Hotkeys:</p>
<pre>MButton &amp; WheelDown::MsgBox "Sie haben das Mausrad nach unten gedreht, während Sie die mittlere Maustaste gedrückt hielten."
^!WheelUp::MsgBox "Sie haben das Mausrad nach oben gedreht, während Sie STRG+ALT gedrückt hielten."</pre>
<p id="HWheel">Wenn die Maus horizontales Scrollen unterstützt, kann es über die Tastennamen WheelLeft und WheelRight erkannt werden. Einige Mäuse haben ein einzelnes Rad, das hoch und runter gescrollt oder nach links und rechts gekippt werden kann. Grundsätzlich werden in solchen Fällen WheelLeft- oder WheelRight-Signale wiederholt gesendet, während das Rad seitlich gekippt wird, um ein kontinuierliches Scrollen zu simulieren. Dies führt in der Regel dazu, dass die Hotkeys wiederholt ausgeführt werden.</p>
<p>Die interne Variable <strong>A_EventInfo</strong> enthält die Anzahl, wie häufig das Mausrad stufenweise gedreht wurde (üblicherweise 120). Allerdings kann A_EventInfo größer oder kleiner als 120 sein, wenn folgende Bedingungen zutreffen:</p>
<ul>
  <li>Wenn die Maus-Hardware Distanzen kleiner als einen Schritt meldet, kann A_EventInfo einen Wert kleiner als 120 enthalten;</li>
  <li>Wenn das Mausrad schnell gedreht wird (abhängig vom Typ der Maus), kann A_EventInfo größer als 120 sein. Mit dem folgenden Hotkey können Sie Ihre Maus analysieren: <code>~WheelDown::ToolTip A_EventInfo</code></li>
</ul>
<p>Einige der nützlichsten Mausrad-Hotkeys sind solche, die alternative Methoden zum Scrollen eines Fenstertextes bereitstellen. Folgende Hotkey-Paare bewirken beispielsweise, dass das Scrollen horizontal statt vertikal erfolgt, wenn Sie das Mausrad drehen, während Sie die linke <kbd>Strg</kbd>-Taste gedrückt halten:</p>
<pre>~LControl &amp; WheelUp::  <em>; Scrollt nach links.</em>
{
    Loop 2  <em>; &lt;-- Erhöhe diesen Wert, um das Scrollen zu beschleunigen.</em>
        SendMessage 0x0114, 0, 0, ControlGetFocus("A")  <em>; 0x0114 ist WM_HSCROLL und die 0 danach SB_LINELEFT.</em>
}

~LControl &amp; WheelDown::  <em>; Scrollt nach rechts.</em>
{
    Loop 2  <em>; &lt;-- Erhöhe diesen Wert, um das Scrollen zu beschleunigen.</em>
        SendMessage 0x0114, 1, 0, ControlGetFocus("A")  <em>; 0x0114 ist WM_HSCROLL und die 1 danach SB_LINERIGHT.</em>
}</pre>
<p>Da Mausrad-Hotkeys nur Down-Ereignisse (nie Up-Ereignisse) erzeugen, können sie nicht als <a href="#keyup">KeyUp-Hotkeys</a> verwendet werden.</p>

<h2 id="Remarks">Tipps und Hinweise</h2>
<p>Jede Ziffernblocktaste kann umfunktioniert werden, um je nach Status der <kbd>Num</kbd>-Taste zwei verschiedene Hotkey-Subroutinen zu starten. Alternativ kann man eine Ziffernblocktaste auch unabhängig vom Status die gleiche Subroutine starten lassen. Zum Beispiel:</p>
<pre>NumpadEnd::
Numpad1::
{
    MsgBox "Dieser Hotkey wurde unabhängig vom Status der NUM-Taste ausgelöst."
}
</pre>
<p>Wenn der <a href="#Tilde">Tilde-Operator (~)</a> einmal in Verbindung mit einer <a href="#prefix">Präfixtaste</a> gebracht wurde, ändert er das Verhalten dieser Präfixtaste bei allen Kombinationen. Bei den beiden Hotkeys unten würden beispielsweise alle Rechtsklick-Ereignisse beim aktiven Fenster ankommen, obwohl nur eine der Definitionen das Tilde-Zeichen enthält:</p>
<pre>~RButton &amp; LButton::MsgBox "Sie haben die linke Maustaste gedrückt, während Sie die Rechte gedrückt hielten."
RButton &amp; WheelUp::MsgBox "Sie haben das Mausrad nach oben gedreht, während Sie die rechte Maustaste gedrückt hielten."</pre>
<p>Die <a href="commands/Suspend.htm">Suspend</a>-Funktion kann vorübergehend alle Hotkeys deaktivieren, außer Hotkeys, die Sie gezielt ausgeschlossen haben. Mit <a href="commands/_HotIf.htm">#HotIf</a> kann man besser abstimmen, welche Hotkeys wann und wo aktiv sein sollen.</p>
<p>Mithilfe der <a href="commands/Hotkey.htm">Hotkey</a>-Funktion können Hotkeys dynamisch erstellt werden, während das Skript läuft. Die Hotkey-Funktion kann zudem bereits existierende Hotkeys einzeln bearbeiten, deaktivieren oder aktivieren.</p>
<p>Aktuell unterstützen Joystick-Hotkeys keine Modifikatorpräfixe wie ^ (Strg) und # (Win). Allerdings kann dieser Effekt mit <a href="commands/GetKeyState.htm">GetKeyState</a> nachgeahmt werden:</p>
<pre>Joy2::
{
    if not GetKeyState("Control")  <em>; Weder die linke noch die rechte STRG-Taste ist unten.</em>
        return  <em>; also nichts tun.</em>
    MsgBox "Sie haben die zweite Taste des ersten Joysticks gedrückt, während Sie die STRG-Taste gedrückt hielten."
}</pre>
<p>Manchmal ist es sinnvoll, dass ein Hotkey erst ausgelöst werden soll, wenn seine Modifikatortasten wieder oben sind. Schauen Sie sich dazu das folgende Beispiel an:</p>
<pre>^!s::Send "{Delete}"</pre>
<p>Wenn man in diesem Fall <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd> drückt, wird das System fälschlicherweise ein <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>Entf</kbd> erkennen (aufgrund der aggressiven Erkennung dieser Tastenkombination). Um das zu umgehen, können Sie <a href="commands/KeyWait.htm">KeyWait</a> verwenden, um auf das Loslassen der Tasten zu warten; zum Beispiel:</p>
<pre>^!s::
{
    KeyWait "Control"
    KeyWait "Alt"
    Send "{Delete}"
}
</pre>
<p>Wenn ein Hotkey wie z. B. <code>#z::</code> den Fehler "Invalid Hotkey" (ungültiger Hotkey) erzeugt, ist es sehr wahrscheinlich, dass das betroffene Zeichen ("Z" in diesem Fall) in der Tastaturbelegung/Sprache Ihres Systems fehlt. Versuchen Sie es mit einem Zeichen, das auf Ihrer Tastaturbelegung zu finden ist.</p>
<p>Die Funktion eines Hotkeys kann vom Skript nur dann explizit aufgerufen werden, wenn die Funktion benannt wurde. Siehe <a href="#Function">benannte Funktions-Hotkeys</a>.</p>
<p>Häufig werden Hotkeys dazu verwendet, eine sich wiederholende Aktion, z. B. eine Reihe von Tastendrücken oder Mausklicks, zu starten und zu stoppen. Ein Beispiel dazu findet man in den <a href="FAQ.htm#repeat">Häufig gestellten Fragen (FAQ)</a>.</p>
<p>Jedes Skript kann quasi aus <a href="misc/Threads.htm">mehreren Threads</a> bestehen, dadurch ist es möglich, dass ein neuer Hotkey gestartet werden kann, während eine andere Hotkey-Subroutine noch läuft. Neue Hotkeys können jederzeit ausgelöst werden, egal ob ein anderer Hotkey beispielsweise ein <a href="commands/MsgBox.htm">Mitteilungsfenster</a> anzeigt.</p>

<h2 id="alttab"><span id="AltTabDetail"></span>Alt-Tab-Hotkeys</h2>
<p>Alt-Tab-Hotkeys vereinfachen die Neubelegung der Alt-Tab-Hotkeys des Systems, die zum Aufrufen eines Menüs für den Wechsel von Aufgaben (Aktivieren von Fenstern) verwendet werden.</p>
<p>Jeder Alt-Tab-Hotkey muss entweder eine einzelne Taste sein, oder eine Kombination aus zwei Tasten, was typischerweise über das Und-Zeichen (&amp;) erreicht wird. Das folgende Beispiel zeigt, wie man mit der rechten <kbd>Alt</kbd>-Taste und den Tasten <kbd>J</kbd> oder <kbd>K</kbd> im Alt-Tab-Menü navigieren kann:</p>
<pre>RAlt &amp; j::AltTab
RAlt &amp; k::ShiftAltTab</pre>
<p><em>AltTab</em> und <em>ShiftAltTab</em> gehören zu speziellen Befehlen, die nur erkannt werden, wenn sie in Verbindung mit einem einzeiligen Hotkey benutzt werden. Hier die komplette Liste:</p>
<p><strong>AltTab</strong>: Navigiert im Alt-Tab-Menü nach rechts, sofern das Menü sichtbar ist. Ansonsten wird das Menü geöffnet (nur wenn der Hotkey eine Kombination aus zwei Tasten ist, sonst passiert nichts).</p>
<p><strong>ShiftAltTab</strong>: Das gleiche wie oben, aber in die andere Richtung.</p>
<p><strong>AltTabMenu</strong>: Zeigt oder versteckt das Alt-Tab-Menü.</p>
<p><strong>AltTabAndMenu</strong>: Navigiert im Alt-Tab-Menü nach rechts, sofern das Menü sichtbar ist. Ansonsten wird das Menü geöffnet.</p>
<p><strong>AltTabMenuDismiss</strong>: Schließt das Alt-Tab-Menü.</p>
<p>Zum Beispiel wäre es möglich, die Alt-Tab-Prozedur mit dem Mausrad durchzuführen. Wenn die folgenden Hotkeys aktiv sind, kann das Menü mit der mittleren Maustaste geöffnet und mit dem Mausrad durchgeschaltet werden:</p>
<pre>MButton::AltTabMenu
WheelDown::AltTab
WheelUp::ShiftAltTab</pre>
<p>Um das Alt-Tab-Menü zu schließen, ohne das ausgewählte Fenster zu aktivieren, drücken oder senden Sie <kbd>Esc</kbd>. Das folgende Beispiel zeigt, wie man durch Halten der linken <kbd>Strg</kbd>-Taste und Drücken von <kbd>Feststell</kbd> das Menü öffnen und durchschalten kann, und wie man durch Loslassen der linken <kbd>Strg</kbd>-Taste das ausgewählte Fenster aktivieren und durch Drücken des Mausrads das Menü schließen kann. Definieren Sie die <a href="#AltTabWindow">AltTabFenster</a>-Fenstergruppe wie unten gezeigt, bevor Sie dieses Beispiel ausführen.</p>
<pre>LCtrl &amp; CapsLock::AltTab
#HotIf WinExist("ahk_group AltTabFenster")  <em>; Setzt voraus, dass das Alt-Tab-Menü auf dem Bildschirm vorhanden ist.</em>
*MButton::Send "{Blind}{Escape}"  <em>; Das *-Präfix ermöglicht dessen Auslösung, egal ob die Alt-Taste gedrückt gehalten wird oder nicht.</em>
#HotIf</pre>
<p>Wenn das Skript <code>{Alt Down}</code> gesendet hat (z. B. um das Alt-Tab-Menü aufzurufen), muss eventuell noch <code>{Alt Up}</code> gesendet werden, wie im Beispiel weiter unten gezeigt.</p>

<h3 id="AltTabRemarks">Allgemeine Bemerkungen</h3>
<p>Zurzeit müssen alle speziellen Alt-Tab-Aktionen direkt einem Hotkey wie oben zugewiesen werden (das heißt, dass sie nicht wie Funktionen behandelt werden können). Sie werden <span class="red">nicht von <a href="commands/_HotIf.htm">#HotIf</a> beeinflusst</span>.</p>
<p>Eine Alt-Tab-Aktion kann bei Taste-Unten und/oder Taste-Oben erfolgen, unabhängig davon, ob das Schlüsselwort <code>up</code> verwendet wird, außerdem kann diese Aktion nicht mit einer anderen Aktion auf derselben Taste kombiniert werden. Zum Beispiel wird die kombinierte Verwendung von <code>F1::AltTabMenu</code> und <code>F1 up::AndereAktion()</code> nicht unterstützt.</p>
<p id="AltTabWindow">Benutzerdefinierte Alt-Tab-Aktionen können auch via Hotkeys erstellt werden. Da sich die Identität des Alt-Tab-Menüs zwischen den Betriebssystemversionen unterscheidet, empfiehlt es sich, eine Fenstergruppe wie unten gezeigt zu verwenden. Bei den Beispielen oben und unten, die <code>ahk_group AltTabFenster</code> verwenden, wird erwartet, dass diese Fenstergruppe während der <a href="Scripts.htm#auto">Startphase des Skripts</a> definiert wird. Alternativ kann <code>ahk_group AltTabFenster</code> je nach System mit dem geeigneten <code>ahk_class</code>-Kriterium ersetzt werden.</p>
<pre>GroupAdd "AltTabFenster", "ahk_class MultitaskingViewFrame"  <em>; Windows 10</em>
GroupAdd "AltTabFenster", "ahk_class TaskSwitcherWnd"  <em>; Windows Vista, 7, 8.1</em>
GroupAdd "AltTabFenster", "ahk_class #32771"  <em>; Älter, oder mit aktiviertem klassischen Alt-Tab</em></pre>
<p>Das folgende Beispiel zeigt, wie man mit <kbd>F1</kbd> das Menü öffnen und durchschalten kann und wie man mit <kbd>F2</kbd> das ausgewählte Fenster aktivieren und mit <kbd>Esc</kbd> das Menü schließen kann:</p>
<pre>*F1::Send "{Alt down}{tab}" <em>; Sternchen ist in diesem Fall notwendig.</em>
!F2::Send "{Alt up}"  <em>; Lässt die ALT-Taste los, um das ausgewählte Fenster zu aktivieren.</em>
#HotIf WinExist("ahk_group AltTabFenster")
~*Esc::Send "{Alt up}"  <em>; Wenn das Menü abgebrochen wird, die Alt-Taste automatisch loslassen.
;*Esc::Send "{Esc}{Alt up}"  ; Ohne Tilde (~) müsste Escape gesendet werden.</em>
#HotIf</pre>

<h2 id="Function">Benannte Funktions-Hotkeys</h2>
<p>Wenn die Funktion eines Hotkeys aufgerufen werden soll, ohne den Hotkey selbst auszulösen, können Sie einem oder mehreren Hotkeys eine benannte <a href="Functions.htm">Funktion</a> zuweisen, indem Sie sie einfach unterhalb des Doppelpunktpaares definieren. Zum Beispiel:</p>
<pre><em>; STRG+UMSCHALT+O, um den enthaltenen Ordner im Explorer zu öffnen.
; STRG+UMSCHALT+E, um den Ordner zu öffnen und darin die aktuelle Datei zu markieren.
; Unterstützt SciTE und Notepad++.</em>
^+o::
^+e::
    editor_ordner_öffnen(ThisHotkey)
    {
        pfad := WinGetTitle("A")
        if RegExMatch(pfad, "\*?\K(.*)\\[^\\]+(?= [-*] )", &amp;pfad)
            if (FileExist(pfad[0]) &amp;&amp; ThisHotkey = "^+e")
                Run Format('explorer.exe /select,"{1}"', pfad[0])
            else
                Run Format('explorer.exe "{1}"', pfad[1])
    }</pre>
<p id="function-details">Hotstrings können auch auf diese Weise definiert werden. Mehrere Hotkeys oder Hotstrings können übereinandergestapelt werden, um die gleiche Funktion aufzurufen.</p>
<p>Es dürfen nur Leerraumzeichen oder Kommentare zwischen dem Hotkey/Hotstring und der Funktion vorkommen.</p>
<p>Außerdem fördert das Benennen einer Funktion selbstdokumentierende Hotkeys; im Code oben beschreibt der Funktionsname zum Beispiel den Hotkey.</p>
<p>Mit der <a href="commands/Hotkey.htm">Hotkey</a>-Funktion kann einem Hotkey auch eine Funktion oder ein Funktionsobjekt zugewiesen werden.</p>

</body>
</html>

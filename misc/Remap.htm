<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Neubelegung von Tasten (Tastatur, Maus und Joystick) | AutoHotkey v2</title>
<meta name="description" content="Freier Tastatur-Remapper, der auch Maus- und Joystick-Tasten neubelegen kann. Zudem kann er repetitive Aufgaben durch Senden von Tastendrücken &amp; Mausklicks automatisieren.">
<meta name="keywords" content="tastatur,remapper,neubelegen,neubelegung,taste,tastendrücke,klicks,maus,tasten,joystick,hotkeys,hotkey">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Neubelegung von Tasten <span class="headnote">(Tastatur, Maus und Joystick)</span></h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#Remap">Neubelegung von Tastatur und Maus</a></li>
  <li><a href="#remarks">Bemerkungen</a></li>
  <li><a href="#moving-the-mouse-cursor">Mauszeiger mittels Tastatur bewegen</a></li>
  <li><a href="#registry">Neubelegung via Registry (Scancode Map)</a></li>
  <li><a href="#related">Siehe auch</a></li>
</ul>

<h2 id="intro">Einführung</h2>
<p><strong>Einschränkung</strong>: Die unten beschriebene Neubelegungsmethode von AutoHotkey ist in der Regel nicht so eindeutig und effektiv wie die direkte Neubelegung via Windows-Registry. Die Vor- und Nachteile der einzelnen Ansätze finden Sie unter <a href="#registry">Neubelegung via Registry</a>.</p>
<h2 id="Remap">Neubelegung von Tastatur und Maus</h2>
<p>Die Syntax zum Neubelegen einer Taste ist <code>Originaltaste::Zieltaste</code>. Ein <a href="../Scripts.htm">Skript</a>, das nur die folgende Zeile enthält, würde zum Beispiel dafür sorgen, dass sich <kbd>A</kbd> wie <kbd>B</kbd> verhält:</p>
<pre>a::b</pre>
<p>Das obige Beispiel führt keine Änderung an <kbd>B</kbd> selbst durch. <kbd>B</kbd> sendet weiterhin "b", es sei denn, Sie belegen die Taste wie im folgenden Beispiel mit etwas anderem:</p>
<pre>a::b
b::a</pre>
<p>Die obigen Beispiele verwenden Kleinbuchstaben. Die Kleinschreibung wird für die meisten Zwecke empfohlen, da damit auch die entsprechenden Großbuchstaben abgedeckt werden. Mit anderen Worten: Es werden Großbuchstaben gesendet, wenn <kbd>Feststell</kbd> eingeschaltet ist oder <kbd>Umschalt</kbd> gedrückt gehalten wird. Ein Großbuchstabe als Zieltaste würde hingegen die Großschreibung erzwingen. Das folgende Beispiel erzeugt ein großes B, wenn Sie entweder "a" oder "A" eingeben (sofern <kbd>Feststell</kbd> ausgeschaltet ist):</p>
<pre>a::B</pre>
<p>Umgekehrt werden alle Modifikatoren, die auf der linken Seite, aber nicht auf der rechten Seite enthalten sind, automatisch losgelassen, wenn die Taste gesendet wird. Zum Beispiel würden die folgenden zwei Zeilen ein kleines "b" erzeugen, wenn man entweder UMSCHALT+A oder STRG+A drückt:</p>
<pre>A::b
^a::b</pre>

<h3 id="RemapMouse">Neubelegung der Maus</h3>
<p>Maustasten können mit derselben Vorgehensweise neubelegt werden. Zum Beispiel:</p>
<table class="info">
  <tr>
    <th style="min-width: 11em;">Beispiel</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td><code>MButton::Shift</code></td>
    <td>Die mittlere Maustaste verhält sich wie <kbd>Umschalt</kbd>.</td>
  </tr>
  <tr>
    <td><code>XButton1::LButton</code></td>
    <td>Die vierte Maustaste verhält sich wie die linke Maustaste.</td>
  </tr>
  <tr>
    <td><code>RAlt::RButton</code></td>
    <td>Die rechte <kbd>Alt</kbd>-Taste verhält sich wie die rechte Maustaste.</td>
  </tr>
</table>

<h3 id="other-useful-remappings">Weitere nützliche Neubelegungen</h3>
<table class="info">
  <tr>
    <th style="min-width: 11em;">Beispiel</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td><code>CapsLock::Ctrl</code></td>
    <td><kbd>Feststell</kbd> verhält sich wie <kbd>Strg</kbd>. Um <kbd>Feststell</kbd> weiterhin ein- oder ausschalten zu können, fügen Sie zunächst die Neubelegung <code>+CapsLock::CapsLock</code> hinzu. Dies ermöglicht es Ihnen, <kbd>Feststell</kbd> durch Halten von <kbd>Umschalt</kbd> und Drücken von <kbd>Feststell</kbd> ein- oder auszuschalten. Da bei beiden Neubelegungen zusätzliche Modifikatortasten gedrückt gehalten werden können, muss die spezifischere Neubelegung <code>+CapsLock::CapsLock</code> zuerst platziert werden, damit sie funktioniert.</td>
  </tr>
  <tr>
    <td><code>XButton2::^LButton</code></td>
    <td>Die fünfte Maustaste (XButton2) erzeugt einen via STRG modifizierten Klick.</td>
  </tr>
  <tr>
    <td><code>RAlt::AppsKey</code></td>
    <td>Die rechte <kbd>Alt</kbd>-Taste verhält sich wie <kbd>Menü</kbd> (die Taste zum Öffnen des Kontextmenüs).</td>
  </tr>
  <tr>
    <td><code>RCtrl::RWin</code></td>
    <td>Die rechte <kbd>Strg</kbd>-Taste verhält sich wie die rechte <kbd>Win</kbd>-Taste.</td>
  </tr>
  <tr>
    <td><code>Ctrl::Alt</code></td>
    <td>Beide <kbd>Strg</kbd>-Tasten verhalten sich wie <kbd>Alt</kbd>. Siehe jedoch <a href="#AltTab">Alt-Tab-Probleme</a>.</td>
  </tr>
  <tr>
    <td><code>^x::^c</code></td>
    <td><kbd>Strg</kbd>+<kbd>X</kbd> verhält sich wie <kbd>Strg</kbd>+<kbd>C</kbd>. Dies bewirkt auch, dass sich <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>X</kbd> wie <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd> verhält, usw.</td>
  </tr>
  <tr>
    <td><code>RWin::Return</code></td>
    <td>Deaktiviert <kbd>Win</kbd> mittels einfachem <a href="../commands/Return.htm">Return</a>.</td>
  </tr>
</table>
<p>Um diese Beispiele zu testen, kopieren Sie sie in eine neue Textdatei, z. B. "Remap.ahk", und starten Sie die Datei.</p>
<p>In der <a href="../KeyList.htm">Tastenliste</a> finden Sie alle möglichen Namen der Tastatur- und Maustasten.</p>
<h2 id="remarks">Bemerkungen</h2>
<p>Die <a href="../commands/_HotIf.htm">HotIf</a>-Direktive kann verwendet werden, um eine oder mehrere Neubelegungen nur für bestimmte Fenster aktiv zu machen. Zum Beispiel:</p>
<pre>#HotIf WinActive("ahk_class Notepad")
a::b  <em>; 'a' verhält sich im Texteditor wie 'b'.</em>
#HotIf  <em>; Sorgt dafür, dass nachfolgende Neubelegungen und Hotkeys für alle Fenster aktiv sind.</em></pre>
<p>Das Neubelegen einer Taste wird bei folgenden Punkten als "vollständig" angesehen:</p>
<ul>
  <li>Hält man eine Modifikatortaste wie <kbd>Strg</kbd> oder <kbd>Umschalt</kbd> gedrückt, während man die Originaltaste eingibt, wird diese Modifikatortaste auch für die Zieltaste wirksam. <code>b::a</code> würde beispielsweise <kbd>Strg</kbd>+<kbd>A</kbd> erzeugen, wenn Sie <kbd>Strg</kbd>+<kbd>B</kbd> drücken.</li>
  <li><kbd>Feststell</kbd> hat grundsätzlich denselben Effekt auf neubelegte Tasten wie auf normale Tasten.</li>
  <li>Die Zieltaste bleibt so lange gedrückt, wie Sie die Originaltaste gedrückt halten. Einige Spiele unterstützen jedoch kein Neubelegen der Tasten; in solchen Fällen verhalten sich Tastatur und Maus so, als ob sie nicht neubelegt wären.</li>
  <li>Neubelegte Tasten werden wiederholt gesendet, wenn sie gedrückt gehalten werden (außer Tasten, die zu Maustasten neubelegt wurden).</li>
</ul>
<p id="HookHotkeys">Eine neubelegte Taste kann normale Hotkeys auslösen, aber standardmäßig keine Maus- oder <a href="../commands/_UseHook.htm">Hook-Hotkeys</a> (mit <a href="../commands/ListHotkeys.htm">ListHotkeys</a> können Sie herausfinden, welche Hotkeys "gehooked" sind). Nutzt man z. B. die Neubelegung <code>a::b</code> und drückt man <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd>, wird der Hotkey <code>^!b</code> nur ausgelöst, wenn <code>^!b</code> kein Hook-Hotkey ist. Wenn <code>^!b</code> ein Hook-Hotkey ist, können Sie <code>^!a</code> als Hotkey definieren, wenn <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> die gleiche Aktion ausführen soll wie <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>B</kbd>. Zum Beispiel:</p>
<pre>a::b
^!a::
^!b::ToolTip "Sie haben " ThisHotkey " gedrückt."
</pre>
<p>Alternativ kann man <a href="../commands/_InputLevel.htm">#InputLevel</a> verwenden, um das Standardverhalten zu überschreiben. Zum Beispiel:</p>
<pre>#InputLevel 1
a::b

#InputLevel 0
^!b::ToolTip "Sie haben " ThisHotkey " gedrückt."
</pre>
<p id="SendPlay">Die Nutzung von <a href="../commands/SendMode.htm">SendMode</a> während der <a href="../Scripts.htm#auto">Startphase des Skripts</a> beeinflusst alle Neubelegungen. Da jede Neubelegung allerdings den <a href="../commands/Send.htm#blind">Blind-Modus</a> verwendet und die <a href="../commands/SendMode.htm">SendPlay-Methode</a> diesen Modus nicht in vollem Umfang unterstützt, könnten einige Neubelegungen im SendPlay-Modus nicht richtig funktionieren (insbesondere <kbd>Strg</kbd>, <kbd>Umschalt</kbd>, <kbd>Alt</kbd> und <kbd>Win</kbd>). Um das zu umgehen, sollten Sie während der <a href="../Scripts.htm#auto">Startphase des Skripts</a>, sofern Neubelegungen vorhanden sind, auf <code>SendMode "Play"</code> verzichten und jedes Send im Skript mit <a href="../commands/Send.htm#SendPlay">SendPlay</a> ersetzen. Alternativ können Sie Ihre Neubelegungen in Hotkeys übersetzen (wie unten beschrieben), die explizit SendEvent statt Send aufrufen.</p>
<p id="EscapeBrace">Wenn <em>Zieltaste</em> <code>{</code> sein soll, muss es mit einem <a href="EscapeChar.htm">Escapezeichen</a> versehen werden; zum Beispiel <code>x::`{</code>. Ansonsten wird sie als geschweifte Startklammer für die Funktion des <a href="../Hotkeys.htm">Hotkeys</a> interpretiert.</p>
<p id="actually">Beim Starten eines Skripts wird jede Neubelegung in ein <a href="../Hotkeys.htm">Hotkey</a>-Paar übersetzt. Zum Beispiel enthält ein Skript mit <code>a::b</code> eigentlich die folgenden zwei Hotkeys:</p>
<pre>*<strong>a</strong>::
{
    SetKeyDelay -1   <em>; Nutzt SetMouseDelay, wenn die Zieltasten Maustasten sind.</em>
    Send "<a href="../commands/Send.htm#blind">{Blind}</a>{<strong>b</strong> DownR}"  <em>; <a href="../commands/Send.htm#DownR">DownR</a> verhält sich wie Down, außer dass andere Send-Funktionen im Skript nicht davon ausgehen, dass "b" beim Senden unten bleiben soll.</em>
}

*<strong>a up</strong>::
{
    SetKeyDelay -1  <em>; Siehe den Hinweis unten, warum die Druckdauer bei beiden SetKeyDelays fehlt.</em>
    Send "{Blind}{<strong>b</strong> Up}"
}</pre>
<p>Allerdings unterscheiden sich die obigen Hotkeys unter folgenden Umständen:</p>
<ol>
  <li>Wenn die Originaltaste die linke <kbd>Strg</kbd>-Taste und die Zieltaste <kbd>Alt</kbd> ist, wird die Zeile <code>Send "{Blind}{LAlt DownR}"</code> durch <code>Send "{Blind}<strong>{LCtrl up}</strong>{LAlt DownR}"</code> ersetzt. Das Gleiche gilt, wenn die Originaltaste die rechte <kbd>Strg</kbd>-Taste ist, außer dass stattdessen <code>{RCtrl up}</code> verwendet wird.</li>
  <li>Beim Umbelegen einer Tastaturtaste in eine Maustaste (z. B. <code>RCtrl::RButton</code>) verwenden die obigen Hotkeys SetMouseDelay statt SetKeyDelay. Außerdem wird der erste Hotkey oben mit folgendem ersetzt, um zu verhindern, dass die Autowiederholungsfunktion der Tastatur wiederholte Mausklicks erzeugt:
    <pre>*RCtrl::
{
    SetMouseDelay -1
    if not GetKeyState("RButton")  <em>; wenn die rechte Maustaste noch nicht unten ist ...</em>
        Send "{Blind}{RButton DownR}"
}</pre>
  </li>
  <li>Wenn die Originaltaste eine <a href="../Hotkeys.htm#combo">benutzerdefinierte Kombination</a> ist, wird der Platzhalter-Modifikator (*) weggelassen, damit der Hotkey funktioniert.</li>
</ol>
<p>Beachten Sie, dass der zweite SetKeyDelay-Parameter (<a href="../commands/SetKeyDelay.htm#dur">Druckdauer</a>) bei den Hotkeys oben weggelassen wurde, da eine Druckdauer nicht auf Nur-Unten- oder Nur-Oben-Ereignisse wie <code>{b down}</code> und <code>{b up}</code> anwendbar sind. Allerdings wird sie auf Änderungen in Bezug auf den Zustand der Modifikatortasten (Umschalt, Strg, Alt und Win) angewendet, was sich auf Neubelegungen wie <code>a::B</code> oder <code>a::^b</code> auswirkt. Folglich würde jede Druckdauer, die während der <a href="../Scripts.htm#auto">Startphase des Skripts</a> in Kraft gesetzt wird, für alle Neubelegungen gelten.</p>
<p>Da Neubelegungen wie oben beschrieben in Hotkeys übersetzt werden, können sie von der <a href="../commands/Suspend.htm">Suspend</a>-Funktion beeinflusst und mit der <a href="../commands/Hotkey.htm">Hotkey</a>-Funktion deaktiviert oder modifiziert werden. Zum Beispiel würden die zwei folgenden Funktionen die Neubelegung <code>a::b</code> deaktivieren.</p>
<pre>Hotkey "*a", "Off"
Hotkey "*a up", "Off"</pre>
<p id="AltTab">Alt-Tab-Probleme: Wenn Sie eine Taste mit <kbd>Alt</kbd> neubelegen, können Sie mit dieser wahrscheinlich keine vernünftigen Alt-Tab-Aktionen durchführen. Eine mögliche Übergangslösung ist es, den Hotkey <code>*Tab::Send "{Blind}{Tab}"</code> einzufügen - aber seien Sie sich bewusst, dass dieser Hotkey wahrscheinlich die Nutzung der echten <kbd>Alt</kbd>-Taste bei Alt-Tab-Aktionen stören wird. Dieser Hotkey sollte daher nur verwendet werden, wenn Sie Alt-Tab-Aktionen ausschließlich mit neubelegten Tasten und/oder <a href="../Hotkeys.htm#alttab">Alt-Tab-Hotkeys</a> durchführen.</p>
<p>Neben den Tasten in der <a href="../KeyList.htm">Tastenliste</a> kann die Originaltaste auch eine virtuelle Taste (VKnn) oder ein Scancode (SCnnn) sein; siehe dazu <a href="../KeyList.htm#SpecialKeys">Sondertasten</a>. Dasselbe gilt für die Zieltaste, außer dass bei ihr optional ein Scancode nach der virtuellen Taste angegeben werden kann. Bei den meisten Tastaturbelegungen wäre beispielsweise <code>sc01e::vk42sc030</code> das gleiche wie <code>a::b</code>.</p>
<p>Um eine Taste zu deaktivieren statt neu zu belegen, verwenden Sie einfach ein <a href="../commands/Return.htm">Return</a>. <code>F1::Return</code> beispielsweise würde <kbd>F1</kbd> deaktivieren.</p>
<p>Die folgenden Tasten werden nicht von der internen Neubelegungsmethode unterstützt:</p>
<ul>
  <li>Das Mausrad (WheelUp/Down/Left/Right).</li>
  <li>"Pause" als Zieltastenname (da es mit einer gleichnamigen internen Funktion übereinstimmt). Verwenden Sie stattdessen <code>vk13</code> oder den entsprechenden Scancode.</li>
  <li>Geschweifte Klammern {} als Zieltasten. Verwenden Sie stattdessen die <a href="../commands/Send.htm#vk">VK/SC-Methode</a>; z. B. <code>x::+sc01A</code> und <code>y::+sc01B</code>.</li>
</ul>
<h2 id="moving-the-mouse-cursor">Mauszeiger mittels Tastatur bewegen</h2>
<p>Es ist möglich, den Mauszeiger mittels Tastatur zu bewegen, wie das voll funktionsfähige <a href="../scripts/index.htm#NumpadMouse">Tastatur-zu-Maus-Skript</a> zeigt. Dieses Skript ermöglicht neben anderen Features eine flüssige Mausbewegung und -beschleunigung. Es ist für Benutzer gedacht, die viele Mausaktionen mit der Tastatur durchführen möchten. Das folgende Beispiel ist eine vereinfachte Version davon:</p>
<pre>*#up::MouseMove 0, -10, 0, "R"  <em>; WIN + NACH-OBEN =&gt; Zeiger nach oben bewegen</em>
*#Down::MouseMove 0, 10, 0, "R"  <em>; WIN + NACH-UNTEN =&gt; Zeiger nach unten bewegen</em>
*#Left::MouseMove -10, 0, 0, "R"  <em>; WIN + NACH-LINKS =&gt; Zeiger nach links bewegen</em>
*#Right::MouseMove 10, 0, 0, "R"  <em>; WIN + NACH-RECHTS =&gt; Zeiger nach rechts bewegen</em>

*&lt;#RCtrl::  <em>; WIN-LINKS + STRG-RECHTS =&gt; Linksklick (halten Sie STRG/UMSCHALT gedrückt, um einen via STRG oder UMSCHALT modifizierten Klick zu erzeugen).</em>
{
    SendEvent "{Blind}{LButton down}"
    KeyWait "RCtrl"  <em>; Hindert die Tastatur-Auto-Wiederholung daran, den Mausklick zu wiederholen.</em>
    SendEvent "{Blind}{LButton up}"
}

*&lt;#AppsKey::  <em>; WIN-LINKS + MENÜ =&gt; Rechter Mausklick</em>
{
    SendEvent "{Blind}{RButton down}"
    KeyWait "AppsKey"  <em>; Hindert die Tastatur-Auto-Wiederholung daran, den Mausklick zu wiederholen.</em>
    SendEvent "{Blind}{RButton up}"
}</pre>
<h2 id="registry">Neubelegung via Registry (Scancode Map)</h2>
<p><strong>Vorteile:</strong></p>
<ul>
  <li>Die Neubelegung via Registry ist in der Regel eindeutiger und effektiver als die <a href="#Remap">Neubelegung via AutoHotkey</a>. Sie unterstützt zum Beispiel eine breitere Auswahl von Videospielen, sie hat keine bekannten <a href="#AltTab">Alt-Tab-Probleme</a>, und kann Hook-Hotkeys von AutoHotkey auslösen (während die Neubelegung via AutoHotkey einen <a href="#HookHotkeys">Workaround</a> erfordert).</li>
  <li>Beim manuellen Erstellen der Registry-Einträge (wie unten beschrieben) ist absolut keine externe Software notwendig. Hilfsprogramme wie <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> haben immer noch den Vorteil, dass sie im Gegensatz zu AutoHotkey nicht die ganze Zeit laufen müssen.</li>
</ul>
<p><strong>Nachteile:</strong></p>
<ul>
  <li>Eine Registry-Neubelegung ist unflexibel: Es wird ein Neustart benötigt, um Änderungen rückgängig zu machen oder um neue Änderungen in Kraft zu setzen.</li>
  <li>Eine Registry-Neubelegung wirkt sich global aus: Es können keine Neubelegungen für bestimmte Benutzer, Anwendungen oder Sprachen/Regionen erstellt werden.</li>
  <li>Eine Registry-Neubelegung kann keine via <kbd>Umschalt</kbd>, <kbd>Strg</kbd>, <kbd>Alt</kbd> oder <kbd>AltGr</kbd> modifizierten Tastendrücke senden. Es ist zum Beispiel nicht möglich, einen Kleinbuchstaben in einen Großbuchstaben umzubelegen.</li>
  <li>Eine Registry-Neubelegung unterstützt nur die Tastatur (AutoHotkey beherrscht <a href="#RemapMouse">Maus-Neubelegung</a> und <a href="RemapJoystick.htm">limitierte Joystick-Neubelegung</a>).</li>
</ul>
<p><strong>Wie man Änderungen an der Registry vornimmt:</strong> Es gibt mindestens zwei Methoden, wie man Tasten via Registry neubelegen kann:</p>
<ol>
  <li>Verwenden Sie Hilfsprogramme wie <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> (Freeware), um Tasten visuell neu zu belegen. Solche Programme werden die Registry für Sie ändern.</li>
  <li>Verwenden Sie eine .reg-Datei (Klartext), um neubelegte Tasten manuell in die Registry zu laden. Siehe dazu <a href="https://www.autohotkey.com/forum/post-56216.html#56216">www.autohotkey.com/forum/post-56216.html#56216</a>.</li>
</ol>
<h2 id="related">Siehe auch</h2>
<ul>
  <li><a href="../KeyList.htm#Joystick">Liste mit Tasten</a></li>
  <li><a href="../commands/GetKeyState.htm">GetKeyState</a></li>
  <li><a href="RemapJoystick.htm">Neubelegung eines Joysticks</a></li>
</ul>
</body>
</html>

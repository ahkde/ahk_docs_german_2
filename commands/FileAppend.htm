<!DOCTYPE HTML>
<html lang="de">
<head>
<title>FileAppend - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die FileAppend-Funktion schreibt Text oder binäre Daten an das Ende einer Datei (und erstellt sie erst, falls notwendig)." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>FileAppend</h1>

<p>Schreibt Text oder binäre Daten an das Ende einer Datei (und erstellt sie erst, falls notwendig).</p>

<pre class="Syntax"><span class="func">FileAppend</span> Text <span class="optional">, Dateiname, Optionen</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Text</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#objects">Objekt</a></p>
    <p>Der Text oder rohe Binärdaten, die an das Ende der Datei angefügt werden sollen. Der Text kann Zeilenumbruchszeichen (`n) enthalten, um neue Zeilen beginnen zu können. Außerdem kann mithilfe eines <a href="../Scripts.htm#continuation">Fortsetzungsbereichs</a> eine lange Zeile in mehreren kurzen Zeilen aufgeteilt werden.</p>
    <p>Es ist möglich, ein <a href="../objects/Buffer.htm">Buffer</a>-ähnliches Objekt zu übergeben, um rohe Binärdaten anzufügen. Beim Erstellen einer Datei wird nur eine Byte-Order-Markierung (BOM) geschrieben, wenn "UTF-8" oder "UTF-16" in <em>Optionen</em> angegeben wurde. Die <a href="../Variables.htm#FileEncoding">Standardcodierung</a> wird ignoriert und die im Objekt enthaltenen Daten werden unverändert geschrieben, unabhängig von <em>Optionen</em>. Es kann ein beliebiges Objekt mit einer <a href="../objects/Buffer.htm#Ptr">Ptr</a>- und <a href="../objects/Buffer.htm#Size">Size</a>-Eigenschaft verwendet werden.</p>
    <p>Wenn <em>Text</em> leer ist, wird <em>Dateiname</em> als leere Datei erstellt (wenn die Datei bereits existiert, wird nur ihr Änderungsdatum aktualisiert).</p>
  </dd>

  <dt>Dateiname</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Name der Datei, die erweitert werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet. Das Zielverzeichnis muss bereits vorhanden sein.</p>
    <p id="stdout"><strong>Standardausgabe (stdout)</strong>: Ein Sternchen (*) im Parameter <em>Dateiname</em> bewirkt, dass der <em>Text</em> zur Standardausgabe (stdout) gesendet wird. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Zum Beispiel wäre die folgende Zeile als Eingabeaufforderung gültig:</p>
      <pre class="no-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" &gt;"Fehlerprotokoll.txt"</pre>
    <p>Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von wo aus die Zeile gestartet wurde. Dies kann umgangen werden, indem 1) das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert, oder 2) die Ausgabe des Skripts via Piping an einen anderen Befehl oder an ein anderes Programm weitergeleitet wird. Zum Beispiel:</p>
      <pre class="no-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" |more</pre>
      <pre class="no-highlight">For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk""') do @Echo %L</pre>
    <p>Zwei Sternchen (**) in <em>Dateiname</em> bewirken, dass <em>Text</em> zur Standardfehlerausgabe (stderr) gesendet wird.</p>
    </dd>

  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Null oder mehr der folgenden Zeichenketten. Die Optionen müssen jeweils mit einem Leer- oder Tabulatorzeichen voneinander getrennt werden. Zum Beispiel: <code>"`n UTF-8"</code></p>
    <p><strong>Codierung</strong>: Geben Sie einen beliebigen Codierungsnamen an, der von <a href="FileEncoding.htm">FileEncoding</a> unterstützt wird (außer die leere Zeichenkette), um diese Codierung zu benutzen, falls die Datei keine UTF-8- oder UTF-16-Byte-Order-Markierung hat. Lässt man den Parameter weg, wird standardmäßig <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> verwendet (es sei denn, <em>Text</em> ist ein Objekt, dann wird keine Byte-Order-Markierung geschrieben).</p>
    <p><strong>RAW</strong>: Geben Sie das Wort RAW an (nicht Groß-/Kleinschreibung-sensitiv), um <em>Text</em> unverändert und ohne jegliche Umwandlungen in die Datei zu schreiben. Diese Option überschreibt jede zuvor festgelegte Codierung und umgekehrt. Wenn <em>Text</em> kein Objekt ist, ist die Datengröße immer ein Vielfaches von 2 Bytes, weil UTF-16 Zeichenketten verwendet werden.</p>
    <p><strong>`n</strong> (ein LF-Zeichen): Fügt vor jedem LF-Zeichen (`n) ein CR-Zeichen (`r) ein, sofern noch nicht vorhanden. Das heißt, dass `n in `r`n umgewandelt wird. Diese Umwandlung hat in der Regel keinen Einfluss auf die Leistung. Wenn diese Option nicht verwendet wird, werden die Zeilenenden innerhalb von <em>Text</em> nicht geändert.</p>
  </dd>

</dl>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Bei Misserfolg wird ein <a href="../objects/Error.htm#OSError">OSError</a> ausgelöst.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Um eine existierende Datei zu überschreiben, löschen Sie sie mit <a href="FileDelete.htm">FileDelete</a>, bevor Sie FileAppend verwenden.</p>
<p>Die Zieldatei wird nach Anfügen des Textes automatisch geschlossen (außer wenn FileAppend in seinem Einzelparameter-Modus innerhalb einer <a href="LoopRead.htm">Datei-lesenden/-schreibenden Schleife</a> ist).</p>
<p><a href="FileOpen.htm">FileOpen</a> im Anfügemodus bietet mehr Kontrolle als FileAppend und lässt die Datei geöffnet, anstatt sie jedes Mal neu zu öffnen und zu schließen. Sobald eine Datei im Anfügemodus geöffnet ist, kann die Zeichenkette mit <code>File.<a href="../objects/File.htm#Write">Write</a>(Zeichenkette)</code> angefügt werden. File-Objekte unterstützen auch binäre Verarbeitung mit <a href="../objects/File.htm#RawWrite">RawWrite</a>/<a href="../objects/File.htm#RawRead">RawRead</a> oder <a href="../objects/File.htm#WriteNum">Write<i>Num</i></a>/<a href="../objects/File.htm#ReadNum">Read<i>Num</i></a>.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopRead.htm">Datei-lesende Schleife</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Erstellt eine Datei, falls erforderlich, und fügt eine Zeile an.</p>
<pre>FileAppend "Eine weitere Zeile.`n", "C:\Meine Dokumente\Test.txt"</pre>
</div>

<div class="ex" id="ExContSect">
<p><a class="ex_number" href="#ExContSect"></a> Verwenden Sie einen <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a>, um die Übersichtlichkeit und Wartbarkeit des Skripts zu verbessern.</p>
<pre>FileAppend "
(
Eine Textzeile.
Standardmäßig befindet sich das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile.
	Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch in die Datei geschrieben.
)", A_Desktop "\Meine Datei.txt"</pre>
</div>

<div class="ex" id="ExFTP">
<p><a class="ex_number" href="#ExFTP"></a> Demonstriert, wie das FTP-Hochladen mithilfe des systeminternen FTP-Befehls automatisiert werden kann.</p>
<pre>FTPBefehlDatei := A_ScriptDir "\FTPBefehle.txt"
FTPLogDatei := A_ScriptDir "\FTPLog.txt"
try FileDelete FTPBefehlDatei  <em>; Falls das vorherige Ausführen vorzeitig terminiert wurde.</em>

FileAppend
(
"open host.domain.com
username
password
binary
cd htdocs
put " VarMitNamenDerZielDatei "
delete EineAndereDatei.htm
rename AlteDateiName.htm NeueDateiName.htm
ls -l
quit"
), FTPBefehlDatei

RunWait Format('{1} /c ftp.exe -s:"{2}" &gt;"{3}"', A_ComSpec, FTPBefehlDatei, FTPLogDatei)
FileDelete FTPBefehlDatei  <em>; Löscht sie aus Sicherheitsgründen.</em>
Run FTPLogDatei  <em>; Zeigt das Protokoll zum Untersuchen an.</em></pre>
</div>

</body>
</html>

<!DOCTYPE HTML>
<html lang="de">
<head>
<title>#ErrorStdOut - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die #ErrorStdOut-Direktive sendet alle Syntaxfehler, die den Start eines Skripts verhindern, zur Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>#ErrorStdOut</h1>

<p>Sendet alle Syntaxfehler, die den Start eines Skripts verhindern, zur Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen.</p>

<pre class="Syntax"><span class="func">#ErrorStdOut</span> <span class="optional">Codierung</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>
  <dt>Codierung</dt>
  <dd>
    <p>Eine <a href="FileEncoding.htm">Codierungszeichenkette</a>, die angibt, wie die Ausgabe kodiert werden soll. <code>#ErrorStdOut "UTF-8"</code> beispielsweise kodiert Fehlermeldungen als UTF-8, bevor sie zur stderr gesendet werden. Das Programm, das die Ausgabe erfasst, muss UTF-8 unterstützen, und in einigen Fällen muss es erst konfiguriert werden, damit es diese überhaupt erfassen kann. Lässt man diesen Parameter weg, wird standardmäßig <code>CP0</code> verwendet.</p>
    <p class="note"><strong>Hinweis:</strong> Dieser Parameter ist kein Ausdruck, kann aber in Anführungszeichen gesetzt werden (entweder 'einfach' oder "doppelt").</p>
  </dd>
</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Fehler werden in stderr statt in stdout geschrieben. Die Windows-Eingabeaufforderung und umfangreiche Texteditoren können in der Regel beide Ausgabetypen anzeigen.</p>
<p>Mit dieser Direktive können umfangreiche Texteditoren wie TextPad, SciTE, Crimson und EditPlus bei Syntaxfehlern auf die betreffende Zeile springen. Anstatt diese Direktive jedes Mal in ein Skript einzufügen, ist es üblicherweise besser, den Texteditor so einzustellen, dass er ein AutoHotkey-Skript mit der <a href="../Scripts.htm#cmd">Befehlszeilenoption</a> <strong>/ErrorStdOut</strong> startet (weiter unten finden Sie Anweisungen, wie Sie den Texteditor einstellen können).</p>
<p>Da AutoHotkey kein Konsolenprogramm ist, werden Fehler nicht direkt in der Windows-Eingabeaufforderung angezeigt. Dies kann umgangen werden, indem 1) das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert, oder 2) die Ausgabe des Skripts über Piping oder Weiterleitung abgefangen wird. Zum Beispiel:</p>
<pre class="no-highlight">"C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "Mein Skript.ahk" <strong>2&gt;&amp;1 |more</strong>
"C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "Mein Skript.ahk" <strong>2&gt;"Syntax-Fehler Log.txt"</strong></pre>
<p>Sie können die Ausgabe auch direkt via Piping in die Zwischenablage kopieren, indem Sie <a href="https://www.autohotkey.com/misc/cb.zip">cb.zip</a> (4 KB) herunterladen und dann das folgende Beispiel anwenden:</p>
<pre class="no-highlight">"C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "Mein Skript.ahk" <strong>2&gt;&amp;1 |cb.exe</strong></pre>
<p class="note"><strong>Hinweis:</strong> <code>2&gt;&amp;1</code> bewirkt, dass stderr an stdout weitergeleitet wird, während <code>2&gt;<i>DateiName</i></code> stderr nur an eine Datei weiterleitet.</p>
<p>#ErrorStdOut kann wie alle anderen Direktiven nicht bedingt ausgeführt werden.</p>

<h2 id="Instructions_for_specific_editors">Anweisungen für bestimmte Texteditoren</h2>
<p><strong>EditPlus</strong>:</p>
<ol>
  <li>Wählen Sie in der Menüleiste Tools &gt; Configure User Tools aus.</li>
  <li>Drücken Sie die Schaltfläche: Add Tool &gt; Program</li>
  <li>Menu Text: Beliebig</li>
  <li>Command: <code>C:\Program Files\AutoHotkey\AutoHotkey.exe</code></li>
  <li>Argument: <code class="no-highlight">/ErrorStdOut "$(FilePath)"</code></li>
  <li>Initial directory: <code>$(FileDir)</code></li>
  <li>Capture output: Yes</li>
</ol>
<p><strong>TextPad</strong>:</p>
<ol>
  <li>Wählen Sie in der Menüleiste Configure &gt; Preferences aus.</li>
  <li>Klappen Sie den Eintrag "Tools" auf.</li>
  <li>Drücken Sie die Schaltfläche "Add" und wählen Sie "Program" aus.</li>
  <li>Kopieren und fügen Sie folgendes ein (passen Sie gegebenenfalls den Pfad an): <code>C:\Windows\System32\cmd.exe</code> -- drücken Sie anschließend OK.</li>
  <li>Klicken Sie dreimal auf das neu hinzugefügte Element (cmd.exe) in der ListBox und benennen Sie es nach Belieben um (z. B. Skript starten).</li>
  <li>Drücken Sie "Apply".</li>
  <li>Wählen Sie das neue Element in der Baumstruktur links aus und tragen Sie folgende Informationen ein:</li>
  <li>Command (sollte bereits ausgefüllt sein): <code>cmd.exe</code> (oder der vollständige Pfad)</li>
  <li>Parameters (an eigenen Pfad anpassen, falls notwendig): <code class="no-highlight">/c ""C:\Program Files\AutoHotkey\AutoHotkey.exe" /ErrorStdOut "$File""</code></li>
  <li>Initial folder: <code>$FileDir</code></li>
  <li>Setzen Sie folgende Häkchen: 1) Run minimized; 2) Capture output.</li>
  <li>Drücken Sie OK. Das neu hinzugefügte Element sollte nun im Menü "Tools" vorhanden sein.</li>
</ol>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileAppend.htm">FileAppend</a> (weil es auch Text zur stderr oder stdout senden kann)</p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Sendet alle Syntaxfehler, die den Start des Skripts verhindern, zur stderr, anstatt ein Dialogfenster anzuzeigen.</p>
<pre>#ErrorStdOut</pre>
</div>

</body>
</html>

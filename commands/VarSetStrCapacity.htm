<!DOCTYPE HTML>
<html lang="de">
<head>
<title>VarSetStrCapacity - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die VarSetStrCapacity-Funktion vergrößert die Aufnahmekapazität einer Variable oder gibt deren Speicher frei. Normalerweise nicht erforderlich, kann aber zusammen mit DllCall oder SendMessage oder zum Optimieren einer mehrfachen Verkettung verwendet werden." />
<meta name="ahk:equiv-v1" content="commands/VarSetCapacity.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>VarSetStrCapacity</h1>

<p>Vergrößert die Aufnahmekapazität einer Variable oder gibt deren Speicher frei. Normalerweise nicht erforderlich, kann aber zusammen mit <a href="DllCall.htm">DllCall</a> oder <a href="SendMessage.htm">SendMessage</a> oder zum Optimieren einer mehrfachen Verkettung verwendet werden.</p>
<pre class="Syntax">GewährteKapazität := <span class="func">VarSetStrCapacity</span>(&amp;ZielVar <span class="optional">, GewünschteKapazität</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>&amp;ZielVar</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Eine Variablenreferenz. Zum Beispiel: <code>VarSetStrCapacity(&amp;MeineVar, 1000)</code>. Das kann auch eine dynamische Variable wie <code>Array%i%</code> oder ein <a href="../Functions.htm#ByRef">ByRef-Parameter einer Funktion</a> sein.</p>
  </dd>

  <dt>GewünschteKapazität</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Lässt man diesen Parameter weg, wird die aktuelle Kapazität der Variable zurückgegeben und der Inhalt der Variable nicht geändert. Ansonsten geht alles verloren, was sich in der Variable befindet (die Variable wird leer gemacht).</p>
    <p>Geben Sie für <em>GewünschteKapazität</em> die Anzahl der Zeichen an, die die Variable nach der Anpassung enthalten soll. <em>GewünschteKapazität</em> schließt den internen Null-Terminator nicht mit ein. Zum Beispiel könnte bei einem Wert von 1 die Variable, neben ihrem internen Terminator, bis zu einem Zeichen enthalten. Hinweis: Die Variable wird automatisch erweitert, wenn ihr später vom Skript ein größerer Wert zugewiesen wird.</p>
    <p>Da diese Funktion oft nur aufgerufen wird, um eine bestimmte Mindestkapazität für die Variable sicherzustellen, wird die Funktion die Variable aus Leistungsgründen erst verkleinern, wenn <em>GewünschteKapazität</em> 0 ist. Mit anderen Worten: Wenn die Kapazität der Variable bereits größer als <em>GewünschteKapazität</em> ist, wird sie nicht reduziert (allerdings wird die Variable aus Konsistenzgründen weiterhin leer gemacht).</p>
    <p>Zum expliziten Verkleinern einer Variable ist es daher erforderlich, erst ihr Speicher mit <code>VarSetStrCapacity(&amp;Var, 0)</code> freizugeben und dann <code>VarSetStrCapacity(&amp;Var, NeueKapazität)</code> zu verwenden -- oder lassen Sie die Variable einfach bei Bedarf automatisch von Null aus erweitern.</p>
    <p>Aus Leistungsgründen wird eine Variable mit einer ursprünglichen Kapazität von weniger als 64 Zeichen in der Regel nicht freigegeben, da ihr Speicher permanenter Natur ist. In diesem Fall wird die aktuelle Kapazität statt 0 zurückgegeben.</p>
    <p>Aus Leistungsgründen kann der Speicher einer Variable mit einer Kapazität von weniger als 4096 Bytes nicht durch Zuweisen einer leeren Zeichenkette (z. B. <code>Var := ""</code>) freigegeben werden. Allerdings kann <code>VarSetStrCapacity(&amp;Var, 0)</code> die Variable freigeben.</p>
    <p id="neg1">Geben Sie -1 für <em>GewünschteKapazität</em> an, um die intern-gespeicherte Zeichenkettenlänge der Variable auf die Länge des aktuellen Inhalts zu aktualisieren. Diese Methode ist in Situationen nützlich, wo die Zeichenkette indirekt geändert wurde, z. B. beim Übergeben ihrer <a href="StrPtr.htm">Adresse</a> via <a href="DllCall.htm">DllCall</a> oder <a href="SendMessage.htm">SendMessage</a>. In diesem Modus gibt VarSetStrCapacity nicht die Kapazität, sondern die Länge zurück.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Anzahl der Zeichen zurück, die die Variable nun enthalten kann, was größer gleich <em>GewünschteKapazität</em> sein wird.</p>

<h2 id="Failure">Misserfolg</h2>
<p>Es wird eine Ausnahme ausgelöst, sobald eine der folgenden Bedingungen zutrifft:</p>
<ul>
  <li><em>ZielVar</em> ist keine gültige Variablenreferenz. Es ist nicht möglich, eine <a href="../Objects.htm#Usage_Objects">Objekteigenschaft</a> oder <a href="../Variables.htm#BuiltIn">interne Variable</a> via Referenz zu übergeben, demzufolge ist es ungültig, so eine an diese Funktion zu übergeben.</li>
  <li>Der Kapazitätsbedarf ist zu groß, um in einen einzigen angrenzenden Speicherblock zu passen, der dem Skript zur Verfügung steht. In seltenen Fällen hängt das damit zusammen, dass dem System der Arbeitsspeicher ausgeht.</li>
  <li><em>GewünschteKapazität</em> ist kleiner als -1 oder größer als der Maximalwert, den die aktuelle Plattform theoretisch unterstützt.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p>Das <a href="../objects/Buffer.htm">Buffer</a>-Objekt ist übersichtlicher und flexibler im Umgang mit binären Daten, Strukturen, DllCall und ähnlichem. Zum Beispiel kann ein Buffer-Objekt einer Eigenschaft oder einem Array-Element zugewiesen werden, oder an eine Funktion übergeben oder von ihr zurückgegeben werden, ohne ihren Inhalt zu kopieren.</p>
<p>Diese Funktion kann genutzt werden, um die Leistung beim Verketten von Zeichenketten zu erhöhen. Diese Methode verhindert mehrere automatische Größenanpassungen, sofern Ihnen die finale Länge der Zeichenkette bekannt ist. In so einem Fall muss <em>GewünschteKapazität</em> nicht genau sein: Der Leistungsgewinn gilt auch dann noch, wenn die Kapazität zu niedrig ist, außerdem beginnt die Variable sich automatisch zu erweitern, wenn die Kapazität erschöpft ist. Bei einer zu hohen Kapazität ist ein Teil des Speichers verschwendet, aber nur vorübergehend, da der gesamte Speicher nach der Operation mithilfe von <code>VarSetStrCapacity(&amp;Var, 0)</code> oder <code>Var := ""</code> wieder freigegeben werden kann.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="../objects/Buffer.htm">Buffer-Objekt</a>, <a href="DllCall.htm">DllCall</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExConcat">
<p><a class="ex_number" href="#ExConcat"></a> Stellt sicher, dass <em>MeineVar</em> genügend Spielraum hat.</p>
<pre>VarSetStrCapacity(&amp;MeineVar, 5120000)  <em>; ~10 MB</em>
Loop
{
    <em>; ...</em>
    MeineVar .= ZuVerkettendeZkette
    <em>; ...</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> Verwenden Sie eine Variable, um eine Zeichenkette von einer via <a href="DllCall.htm">DllCall</a> aufgerufenen externen Funktion abzurufen. (Beachten Sie, dass bevorzugt ein <a href="../objects/Buffer.htm#ExString">Buffer-Objekt</a> verwendet werden sollte, insbesondere bei Unicode-fremden Zeichenketten.)</p>
<pre>max_chars := 10

Loop 2
{
    <em>; Reserviert Speicher für DllCall.</em>
    VarSetStrCapacity(&amp;buf, max_chars)

    if (A_Index = 1)
        <em>; Ändert die Variable indirekt via DllCall.</em>
        DllCall("wsprintf", <span class="red">"Ptr", StrPtr(buf)</span>, "Str", "0x%08x", "UInt", 4919, "CDecl")
    else
        <em>; Mit "str" kann die Länge automatisch aktualisiert werden:</em>
        DllCall("wsprintf", <span class="blue">"Str", buf</span>, "Str", "0x%08x", "UInt", 4919, "CDecl")

    <em>; Verkettet eine Zeichenkette, um zu zeigen, warum die Länge aktualisiert werden muss:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; Aktualisiert die Länge der Variable.</em>
    VarSetStrCapacity(&amp;buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox
    (
    "Vor der Aktualisierung
      Zeichenkette: " wrong_str "
      Länge: " wrong_len "

    Nach der Aktualisierung
      Zeichenkette: " right_str "
      Länge: " right_len
    )
}
</pre>
</div>

</body>
</html>

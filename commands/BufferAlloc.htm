<!DOCTYPE HTML>
<html lang="de">
<head>
<title>BufferAlloc - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die BufferAlloc-Funktion reserviert einen Bereich im Speicher und gibt ihn innerhalb eines Buffer-Objekts zurück." />
<meta name="ahk:equiv-v1" content="commands/VarSetCapacity.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>BufferAlloc</h1>

<p>Reserviert einen Bereich im Speicher und gibt ihn innerhalb eines <a href="../objects/Buffer.htm">Buffer</a>-Objekts zurück.</p>

<pre class="Syntax">Puffer := <span class="func">BufferAlloc</span>(ByteAnzahl <span class="optional">, FüllByte</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>
  <dt>ByteAnzahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Anzahl der zu reservierenden Bytes. Äquivalent zu <a href="../objects/Buffer.htm#Size">Buffer.Size</a>.</p>
  </dd>
  <dt>FüllByte</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Geben Sie eine Zahl im Bereich von 0 bis 255 an, um jedes Byte im Pufferspeicher mit dieser Zahl füllen.</p>
    <p>Dieser Parameter sollte in der Regel weggelassen werden, wenn der Pufferspeicher ohne vorheriges Lesen beschrieben wird, da dies ein Zeitaufwand im Verhältnis zur Anzahl der Bytes ist. Lässt man diesen Parameter weg, wird der Pufferspeicher nicht initialisiert; der Wert jedes Bytes ist willkürlich.</p>
  </dd>
</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Der Rückgabewert ist ein neues <a href="../objects/Buffer.htm">Buffer</a>-Objekt.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Es wird ein <a href="../objects/Error.htm#MemoryError">MemoryError</a> ausgelöst, wenn der Speicher nicht reserviert werden konnte, z. B. weil <em>ByteAnzahl</em> unerwartet groß ist oder das System über zu wenig virtuellen Speicher verfügt.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="../objects/Buffer.htm">Buffer-Objekt</a>, <a href="DllCall.htm">DllCall</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a>, <a href="StrPut.htm">StrPut</a>, <a href="StrGet.htm">StrGet</a>, <a href="../objects/File.htm#RawRead">File.RawRead</a>, <a href="../objects/File.htm#RawWrite">File.RawWrite</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExString">
<p><a class="ex_number" href="#ExString"></a> Verwenden Sie ein <a href="../objects/Buffer.htm">Buffer</a>-Objekt, um eine Zeichenkette von einer via <a href="DllCall.htm">DllCall</a> aufgerufenen externen Funktion abzurufen.</p>
<pre>
max_chars := 11

<em>; Pufferspeicher für die Unicode-Version von wsprintf reservieren.</em>
bufW := BufferAlloc(max_chars*2)

<em>; UTF-16-Zeichenkette via wsprintfW() in den Pufferspeicher schreiben.</em>
DllCall("wsprintfW", "Ptr", bufW, "Str", "0x%08x", "UInt", 4919, "CDecl")

<em>; Zeichenkette aus bufW lesen und anzeigen.</em>
MsgBox StrGet(bufW, "UTF-16")  <em>; Oder einfach nur StrGet(bufW).</em>

<em>; Pufferspeicher für die ANSI-Version von wsprintf reservieren.</em>
bufA := BufferAlloc(max_chars)

<em>; ANSI-Zeichenkette via wsprintfA() in den Pufferspeicher schreiben.</em>
DllCall("wsprintfA", "Ptr", bufA, "AStr", "0x%08x", "UInt", 4919, "CDecl")

<em>; Zeichenkette aus bufA lesen (konvertiert in das native Format) und anzeigen.</em>
MsgBox StrGet(bufA, "CP0")
</pre>
</div>

</body>
</html>

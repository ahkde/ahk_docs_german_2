<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComCall - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComCall-Funktion ruft eine native COM-Interface-Methode über ihre Indexnummer auf." />
<meta name="ahk:equiv-v1" content="AutoHotkey.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>ComCall</h1>

<p>Ruft eine native COM-Interface-Methode über ihre Indexnummer auf.</p>

<pre class="Syntax">Ergebnis := <span class="func">ComCall</span>(Index, ComObj <span class="optional">, Typ1, Arg1, Typ2, Arg2, RückgabeTyp</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Index</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die nullbasierte Indexnummer der Methode innerhalb der virtuellen Funktionstabelle.</p>
      <p><em>Index</em> entspricht der Position der Methode innerhalb der ursprünglichen Interface-Definition. Die Microsoft-Dokumentation listet Methoden grundsätzlich in alphabetischer Reihenfolge auf und ist demzufolge nicht zum Ermitteln der Indexnummer geeignet. Um die richtige Indexnummer zu ermitteln, müssen Sie die ursprüngliche Interface-Definition lokalisieren. Dies könnte z. B. in einer Header-Datei oder einer Typenbibliothek sein.</p>
      <p>Es ist wichtig, Methoden zu berücksichtigen, die von übergeordneten Interfaces geerbt wurden. Da alle COM-Interfaces letztlich von <a href="https://docs.microsoft.com/de-de/windows/win32/api/unknwn/nn-unknwn-iunknown">IUnknown</a> abgeleitet sind, sind die ersten drei Methoden immer QueryInterface (0), AddRef (1) und Release (2). <em>IShellItem2</em> beispielsweise ist eine Erweiterung von <em>IShellItem</em>, die bei Index 3 beginnt und 5 Methoden enthält, demzufolge ist die erste Methode von <em>IShellItem2</em> bei Index 8.</p>
      <p class="note"><strong>Tipp:</strong> COM-Interfaces, die von Microsoft bereitgestellt werden, finden Sie im Internet oder Windows SDK unter "<em>IInterfaceName</em><b>Vtbl</b>" - zum Beispiel "IUnknownVtbl". Die Microsoft-eigenen Interface-Definitionen werden von dieser Plain-C-Definition der virtuellen Funktionstabelle des Interfaces begleitet, die alle Methoden explizit in der richtigen Reihenfolge auflistet.</p>
      <p>Die Übergabe einer ungültigen Indexnummer kann zu undefiniertem Verhalten führen, inklusive (aber nicht beschränkt auf) Programmterminierung.</p>
  </dd>
  
  <dt>ComObj</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a>, <a href="ComValue.htm">ComValue</a> oder <a href="../objects/Object.htm">Objekt</a></p>
      <p>Das gewünschte COM-Objekt; also ein COM-Interface-Pointer. Der Pointer-Wert kann direkt übergeben oder innerhalb eines Objekts mit der <code>Ptr</code>-Eigenschaft gekapselt werden, wie z. B. ein <a href="ComValue.htm">ComValue</a> mit dem Variantentyp VT_UNKNOWN.</p>
      <p>Der Interface-Pointer dient zum Lokalisieren der Adresse der virtuellen Funktion, die die Interface-Methode implementiert, und wird auch als Parameter übergeben. Diesen Parameter findet man grundsätzlich nicht in Sprachen, die von sich aus Interfaces unterstützen, allerdings wird er in der C-Style-"Vtbl"-Definition angezeigt.</p>
      <p>Die Übergabe eines ungültigen Pointers kann zu undefiniertem Verhalten führen, inklusive (aber nicht beschränkt auf) Programmterminierung.</p>
  </dd>

  <dt>Typ1, Arg1</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Jedes dieser Paare repräsentiert einen einzelnen Parameter, der an die Methode übergeben werden soll. Die Anzahl der Paare ist unbegrenzt. Geben Sie für <em>Typ</em> einen Typ aus der <a href="DllCall.htm#types">DllCall-Typentabelle</a> an. Geben Sie für <em>Arg</em> einen Wert an, der an die Methode übergeben werden soll.</p>
  </dd>

  <dt>RückgabeTyp</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Lässt man diesen Parameter weg, wird standardmäßig <a href="DllCall.htm#HRESULT">HRESULT</a> verwendet, was der häufigste Rückgabetyp für COM-Interface-Methoden ist. Jedes Ergebnis, das auf einen Fehler hinweist, führt dazu, dass ein <a href="../objects/Error.htm#OSError">OSError</a> ausgelöst wird; daher darf der Rückgabetyp nur weggelassen werden, wenn der eigentliche Rückgabetyp HRESULT ist.</p>
      <p>Wenn die Methode vom Typ ist, der keinen Wert zurückgibt (der Rückgabetyp <code>void</code> in C), können Sie "Int" oder einen anderen numerischen Typ ohne Suffix (außer HRESULT) angeben und den Rückgabewert ignorieren. Da der Inhalt des Rückgabewertregisters in solchen Fällen willkürlich ist, wird eventuell eine Ausnahme ausgelöst, wenn <em>RückgabeTyp</em> weggelassen wird.</p>
      <p>Ansonsten können Sie einen der Argumenttypen aus der <a href="DllCall.htm#types">DllCall-Typentabelle</a> angeben. Das <a href="DllCall.htm#asterisk">Sternchen-Suffix</a> wird ebenfalls unterstützt.</p>
      <p id="cdecl">Obwohl ComCall das Schlüsselwort <em>Cdecl</em> gemäß <a href="DllCall.htm#cdecl">DllCall</a> unterstützt, wird es in der Regel nicht von COM-Interface-Methoden verwendet.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Wenn <em>RückgabeTyp</em> <a href="DllCall.htm#HRESULT">HRESULT</a> ist (oder weggelassen wird) und die Methode einen Fehlerwert (wie durch das <a href="https://docs.microsoft.com/de-de/windows/win32/api/winerror/nf-winerror-failed">FAILED-Makro</a> definiert) zurückgegeben hat, wird ein <a href="../objects/Error.htm#OSError">OSError</a> ausgelöst.</p>
<p>Ansonsten gibt ComCall den eigentlichen Rückgabewert der Methode zurück. Wenn die Methode vom Typ ist, der keinen Wert zurückgibt (mit einem Rückgabetyp, der in C als <code>void</code> definiert ist), ist das Ergebnis undefiniert und sollte ignoriert werden.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Die folgenden DllCall-Themen gelten auch für ComCall:</p>
<ul>
  <li><a href="DllCall.htm#types">Typen von Argumenten und Rückgabewerten</a></li>
  <li><a href="DllCall.htm#error">Fehlerbehandlung</a></li>
  <li><a href="DllCall.htm#except">Native Ausnahmen und A_LastError</a></li>
  <li><a href="DllCall.htm#struct">Strukturen und Arrays</a></li>
  <li><a href="DllCall.htm#limits">Bekannte Einschränkungen</a></li>
  <li><a href="DllCall.htm#dotnet">.NET Framework</a></li>
</ul>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComObject.htm">ComObject</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="ComValue.htm">ComValue</a>, <a href="../objects/Buffer.htm">Buffer-Objekt</a>, <a href="CallbackCreate.htm">CallbackCreate</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExTaskbar">
<p><a class="ex_number" href="#ExTaskbar"></a> Entfernt für 3 Sekunden das aktive Fenster aus der Taskleiste. Vergleichen Sie dies mit dem <a href="DllCall.htm#ExTaskbar">äquivalenten DllCall-Beispiel</a>.</p>
<pre><em>/*
  Methoden in der <a href="https://msdn.microsoft.com/de-de/library/bb774652.aspx">ITaskbarList</a>-VTable:
    IUnknown:
      0 QueryInterface  -- nutze stattdessen <a href="ComObjQuery.htm">ComObjQuery</a>
      1 AddRef          -- nutze stattdessen <a href="ObjAddRef.htm">ObjAddRef</a>
      2 Release         -- nutze stattdessen <a href="ObjAddRef.htm">ObjRelease</a>
    ITaskbarList:
      3 HrInit
      4 AddTab
      5 DeleteTab
      6 ActivateTab
      7 SetActiveAlt
*/</em>
IID_ITaskbarList  := "{56FDF342-FD6D-11d0-958A-006097C9A090}"
CLSID_TaskbarList := "{56FDF344-FD6D-11d0-958A-006097C9A090}"

<em>; Erstellt das TaskbarList-Objekt.</em>
tbl := ComObject(CLSID_TaskbarList, IID_ITaskbarList)

activeHwnd := WinExist("A")

ComCall(3, tbl)                     <em>; tbl.<a href="https://msdn.microsoft.com/de-de/library/bb774650.aspx">HrInit</a>()</em>
ComCall(5, tbl, "ptr", activeHwnd)  <em>; tbl.<a href="https://msdn.microsoft.com/de-de/library/bb774648.aspx">DeleteTab</a>(activeHwnd)</em>
Sleep 3000
ComCall(4, tbl, "ptr", activeHwnd)  <em>; tbl.<a href="https://msdn.microsoft.com/de-de/library/bb774646.aspx">AddTab</a>(activeHwnd)</em>

<em>; Wenn mit dem Objekt fertig, ersetze einfach alle Referenzen mit
; einem anderen Wert (oder wenn es sich um eine lokale Variable handelt, einfach return):</em>
tbl := ""
</pre>
</div>

<div class="ex" id="ExTaskbarClass">
<p><a class="ex_number" href="#ExTaskbarClass"></a> Demonstriert einige Techniken zum Wrappen von COM-Interfaces. Äquivalent zum vorherigen Beispiel.</p>
<pre>
tbl := TaskbarList()

activeHwnd := WinExist("A")

tbl.DeleteTab(activeHwnd)
Sleep 3000
tbl.AddTab(activeHwnd)

tbl := ""


class TaskbarList {
    static IID := "{56FDF342-FD6D-11d0-958A-006097C9A090}"
    static CLSID := "{56FDF344-FD6D-11d0-958A-006097C9A090}"
    
    <em>; Wird beim Start aufgerufen, um die Klasse zu initialisieren.</em>
    static __new() {
        <em>; Ermittelt das Base-Objekt für alle Instanzen der TaskbarList.</em>
        proto := this.Prototype
        
        <em>; Bound-Funktionen können genutzt werden, um Parameter vorab zu definieren,
        ; was die Methoden benutzerfreundlicher macht, ohne dass Wrapper-Funktionen erforderlich sind.
        ; HrInit selbst hat keine Parameter, also nur den Index binden,
        ; und der Aufrufer wird implizit 'this' bereitstellen.</em>
        proto.HrInit := ComCall.Bind(3)
        
        <em>; Lassen Sie einen Parameter leer, damit der Aufrufer einen Wert bereitstellen kann.
        ; In diesem Fall ist der leere Parameter 'this' (normalerweise versteckt).</em>
        proto.AddTab := ComCall.Bind(4,, "ptr")
        
        <em>; Ein Object- oder Map-Objekt kann genutzt werden, um Wiederholungen zu reduzieren.</em>
        for name, args in Map(
            "DeleteTab", [5,,"ptr"],
            "ActivateTab", [6,,"ptr"],
            "SetActiveAlt", [7,,"ptr"]) {
            proto.%name% := ComCall.Bind(args*)
        }
    }
    
    <em>; Wird bei einer neuen Instanz von TaskbarList() aufgerufen.</em>
    __new() {
        this.comobj := ComObject(TaskbarList.CLSID, TaskbarList.IID)
        this.ptr := this.comobj.ptr
        <em>; Initialisierung über ITaskbarList anfordern.</em>
        this.HrInit()
    }
}
</pre>
</div>

</body>
</html>

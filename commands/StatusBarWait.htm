<!DOCTYPE HTML>
<html lang="de">
<head>
<title>StatusBarWait - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die StatusBarWait-Funktion wartet, bis die Statusleiste eines Fensters eine bestimmte Zeichenkette enthält." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>StatusBarWait</h1>

<p>Wartet, bis die Statusleiste eines Fensters eine bestimmte Zeichenkette enthält.</p>

<pre class="Syntax"><span class="func">StatusBarWait</span> <span class="optional">LeisteText, Zeitlimit, SegmentNummer, FensterTitel, FensterText, Intervall, IgnoriereTitel, IgnoriereText</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>LeisteText</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Text oder Teiltext, auf den die Funktion warten soll. Wenn dieser Parameter leer ist, wartet StatusBarWait, bis die Statusleiste leer ist. Der Text ist Groß-/Kleinschreibung-sensitiv. Das Übereinstimmungsverhalten wird per <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> bestimmt, ähnlich wie bei <em>FensterTitel</em> unten.</p>
    <p>Um stattdessen zu warten, bis sich der Text des Balkens <em>ändert</em>, verwenden Sie entweder <a href="StatusBarGetText.htm">StatusBarGetText</a> in einer Schleife oder das RegEx-Beispiel weiter unten.</p>
  </dd>
  
  <dt>Zeitlimit</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#numbers">Float</a></p>
    <p>Die Dauer in Sekunden (kann einen Dezimalpunkt enthalten), wie lange StatusBarWait warten soll. Wenn die Zeit abgelaufen ist, wird eine Ausnahme ausgelöst. Wenn dieser Parameter weggelassen wird oder leer ist, wird die Funktion unendlich lang warten.</p>
  </dd>
  
  <dt>SegmentNummer</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Nummer des Leistenbereichs, dessen Text abgerufen werden soll. Wenn dieser Parameter leer ist, wird standardmäßig 1 verwendet (der erste Bereich enthält üblicherweise den interessanten Text).</p>
  </dd>

  <dt>FensterTitel</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a>, <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Objects.htm">Objekt</a></p>
    <p>Der Titel oder andere Möglichkeiten zum Identifizieren des Zielfensters. Weitere Informationen finden Sie unter <a href="../misc/WinTitle.htm">FensterTitel-Parameter</a>.</p>
  </dd>

  <dt>FensterText</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die in einem der Textelemente des Zielfensters enthalten ist (eventuell vorhandene Textelemente können mit dem internen Tool Window Spy aufgedeckt werden). Versteckte Textelemente werden nur erkannt, wenn <a href="DetectHiddenText.htm">DetectHiddenText</a> eingeschaltet ist.</p>
  </dd>

  <dt>Intervall</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wie oft die Statusleiste überprüft werden soll, während die Funktion wartet (in Millisekunden). 50 ist Standard. </p>
  </dd>

  <dt>IgnoriereTitel</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Alle Fenster, die diesen Wert in ihren Titeln enthalten, werden ignoriert.</p>
  </dd>

  <dt>IgnoriereText</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Alle Fenster, die diesen Wert in ihren Textelementen enthalten, werden ignoriert.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
<p>Diese Funktion gibt 1 (true) zurück, wenn eine Übereinstimmung gefunden wurde, oder 0 (false), wenn die Funktion das Zeitlimit überschritten hat.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Es wird in folgenden Fällen eine Ausnahme ausgelöst:</p>
<ul>
  <li><a href="../objects/Error.htm#TargetError">TargetError</a>: Das Zielfenster konnte nicht gefunden werden oder enthält keine standardmäßige Statusleiste.</li>
  <li><a href="../objects/Error.htm#OSError">OSError</a>: Es gab ein Problem beim Senden der SB_GETPARTS-Meldung, oder es erfolgte keine Antwort innerhalb von 2000 ms.</li>
  <li><a href="../objects/Error.htm#OSError">OSError</a>: Es konnte kein Speicher innerhalb des Prozesses, dem die Statusleiste gehört, reserviert werden.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p>StatusBarWait versucht, die erste <em>Standard</em>-Statusleiste eines Fensters zu lesen (typisches Steuerelement von Microsoft: msctls_statusbar32). Einige Programme verwenden ihre eigenen Statusleisten oder spezielle Versionen des Microsoft-Steuerelements. Solche Leisten werden nicht unterstützt.</p>
<p>Anstatt <a href="StatusBarGetText.htm">StatusBarGetText</a> in einer Schleife zu verwenden, ist es besser, StatusBarWait zu verwenden, weil es Optimierungen beinhaltet, die einen Overhead durch mehrfaches Aufrufen von <a href="StatusBarGetText.htm">StatusBarGetText</a> verhindern.</p>
<p>StatusBarWait bestimmt das Zielfenster, bevor es damit beginnt, auf eine Übereinstimmung zu warten. Falls dieses Zielfenster geschlossen wird, hört die Funktion auf zu warten, auch dann, wenn ein anderes Fenster mit dem gleichen <em>FensterTitel</em> und <em>FensterText</em> vorhanden ist.</p>
<p>Während die Funktion im Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkeys</a>, <a href="../objects/Menu.htm">benutzerdefinierte Menüpunkte</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>
<p>Fenstertitel und -texte sind Groß-/Kleinschreibung-sensitiv. Versteckte Fenster werden nur erkannt, wenn <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> eingeschaltet ist.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="StatusBarGetText.htm">StatusBarGetText</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="WinGetText.htm">WinGetText</a>, <a href="ControlGetText.htm">ControlGetText</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExSearch">
<p><a class="ex_number" href="#ExSearch"></a> Schreibt ein neues Suchmuster in ein vorhandenes Explorer-/Suchfenster.</p>
<pre>if WinExist("Suchergebnisse") <em>; Bestimmt das zuletzt gefundene Fenster, um das untere zu vereinfachen.</em>
{
    WinActivate
    Send "{tab 2}!o*.txt{enter}"  <em>; Schreibt das Suchmuster in das Suchfenster.</em>
    Sleep 400  <em>; Gewährt der Statusleiste Zeit, auf "Suchen" umzuwechseln.</em>
    if StatusBarWait("gefunden", 30)
        MsgBox "Die Suche wurde erfolgreich durchgeführt."
    else
        MsgBox "Die Funktion hat die Zeit überschritten."
}</pre>
</div>

<div class="ex" id="ExChange">
<p><a class="ex_number" href="#ExChange"></a> Wartet auf eine <strong>Änderung</strong> der Statusleiste im aktiven Fenster.</p>
<pre>SetTitleMatchMode "RegEx"  <em>; Akzeptiert <a href="SetTitleMatchMode.htm#RegEx">Reguläre Ausdrücke</a> für den nachfolgenden Gebrauch.</em>
if WinExist("A")  <em>; Setzt das zuletzt gefundene Fenster auf das aktive Fenster.</em>
{
    <span class="red">Originaltext</span> := StatusBarGetText()
    StatusBarWait "^(?!^\Q" <span class="red">Originaltext</span> "\E$)"  <em>; Dieser reguläre Ausdruck wartet auf eine Änderung des Textes.</em>
}</pre>
</div>

</body>
</html>

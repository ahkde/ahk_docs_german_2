<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComObjQuery - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComObjQuery-Funktion fordert ein Interface oder Service eines COM-Objekts an." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjQuery</h1>
<p>Fordert ein Interface oder Service eines COM-Objekts an.</p>
<pre class="Syntax">InterfacePointer := <span class="func">ComObjQuery</span>(ComObj, <span class="optional">SID,</span> IID)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>ComObj</dt>
  <dd>
    <p>Typ: <a href="ComValue.htm">ComValue</a>, <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein COM-Wrapper-Objekt, Interface-Pointer, oder ein Objekt mit einer <code>Ptr</code>-Eigenschaft, die einen Interface-Pointer zurückgibt.</p>
  </dd>

  <dt>IID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Interface-Identifikator (GUID) im Format "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p>
  </dd>

  <dt>SID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Service-Identifikator im selben Format wie IID. Lässt man diesen Parameter weg, muss auch das Komma weggelassen werden.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="ComValue.htm#Returns">ComValue</a></p>
<p>Wenn das Interface unterstützt wird, gibt diese Funktion ein COM-Wrapper-Objekt des <a href="ComObjType.htm#vt">Variantentyps</a> VT_UNKNOWN (13) zurück.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Bei Misserfolg wird eine Ausnahme ausgelöst.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Im Zwei-Parameter-Modus ist diese Funktion äquivalent zu <a href="https://msdn.microsoft.com/de-de/library/ms682521.aspx">IUnknown::QueryInterface</a>. Sind sowohl SID als auch IID angegeben, wird intern das <a href="https://msdn.microsoft.com/de-de/library/cc678965.aspx">IServiceProvider</a>-Interface angefordert und danach <a href="https://msdn.microsoft.com/de-de/library/cc678966.aspx">IServiceProvider::QueryService</a> aufgerufen.</p>
<p><a href="ComCall.htm">ComCall</a> kann verwendet werden, um native Interface-Methoden aufzurufen.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComCall.htm">ComCall</a>, <a href="ComObject.htm">ComObject</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExClassName">
<p><a class="ex_number" href="#ExClassName"></a> Ermittelt den Klassennamen eines Objekts.</p>
<pre>
obj := ComObject("Scripting.Dictionary")

MsgBox "Interface-Name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; IProvideClassInfo-Interface des Objekts anfordern.</em>
try
    pci := ComObjQuery(obj, IID_IProvideClassInfo)
catch
{
    MsgBox "IProvideClassInfo-Interface wird nicht unterstützt."
    return
}

<em>; GetClassInfo aufrufen, um einen Pointer zu erhalten, der auf das ITypeInfo-Interface verweist.</em>
ComCall(3, pci, "ptr*", &amp;ti := 0)

<em>; ti wrappen, um automatische Säuberung zu ermöglichen.</em>
ti := ComValue(13, ti)

<em>; GetDocumentation aufrufen, um den vollständigen Typennamen des Objekts zu erhalten.</em>
ComCall(12, ti, "int", -1, "ptr*", &amp;pname := 0, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; Den BSTR-Pointer in eine brauchbare Zeichenkette umwandeln.</em>
name := StrGet(pname, "UTF-16")

<em>; Säuberung.</em>
DllCall("oleaut32\SysFreeString", "ptr", pname)
pci := ti := ""

<em>; Den Typennamen anzeigen!</em>
MsgBox "Klassenname: " name
</pre>
</div>

<div class="ex" id="ExIE">
<p><a class="ex_number" href="#ExIE"></a> Automatisiert ein vorhandenes Internet-Explorer-Fenster.</p>
<pre>
sURL := "https://www.autohotkey.com/boards/"
if WebBrowser := GetWebBrowser()
    WebBrowser.Navigate(sURL)

GetWebBrowser()
{
    <em>; Einen rohen Pointer abrufen, der auf das Document-Objekt des obersten IE-Fensters verweist.</em>
    static msg := DllCall("RegisterWindowMessage", "Str", "WM_HTML_GETOBJECT")
    lResult := SendMessage(msg, 0, 0, "Internet Explorer_Server1", "ahk_class IEFrame")
    if !lResult
        return  <em>; IE nicht gefunden.</em>
    static IID_IHTMLDocument2 := GUID("{332C4425-26CB-11D0-B483-00C04FD90119}")
    static VT_UNKNOWN := 13
    DllCall("oleacc\ObjectFromLresult", "Ptr", lResult
        , "Ptr", IID_IHTMLDocument2, "Ptr", 0
        , "Ptr*", pdoc := ComValue(VT_UNKNOWN, 0))
    
    <em>; WebBrowserApp-Service anfordern. In diesem bestimmten Fall sind
    ; SID und IID identisch, was nicht immer so ist.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)
    
    <em>; WebBrowser-Objekt als IDispatch in verwendbarer Form zurückgeben:
    ; Dies funktioniert nur, weil IWebBrowserApp von IDispatch abgeleitet ist.
    ; pweb wird dessen ptr automatisch freigeben, also AddRef nutzen, um dem entgegenzuwirken.</em>
    ObjAddRef(pweb.ptr)
    static VT_DISPATCH := 9
    return ComValue(VT_DISPATCH, pweb.ptr)
}

GUID(sGUID) <em>; Wandelt eine Zeichenkette in eine binäre GUID um und gibt sie via Buffer-Objekt zurück.</em>
{
    GUID := Buffer(16, 0)
    if DllCall("ole32\CLSIDFromString", "WStr", sGUID, "Ptr", GUID) &lt; 0
        throw ValueError("Ungültiger Parameter #1", -1, sGUID)
    return GUID
}
</pre>
</div>

</body>
</html>

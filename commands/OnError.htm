<!DOCTYPE HTML>
<html lang="de">
<head>
<title>OnError - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die OnError-Funktion lässt eine bestimmte Funktion automatisch aufrufen, wenn ein unbehandelter Fehler auftritt." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>OnError</h1>
<p>Lässt eine bestimmte Funktion automatisch aufrufen, wenn ein unbehandelter Fehler auftritt.</p>

<pre class="Syntax"><span class="func">OnError</span> Funktion <span class="optional">, HinzufügenEntfernen</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Funktion</dt>
  <dd>
    <p>Typ: <a href="../objects/Functor.htm">Funktionsobjekt</a></p>
    <p>Ein Funktionsobjekt, das aufgerufen werden soll, wenn ein unbehandelter Fehler auftritt. Die Parameter und der Rückgabewert der Funktion sind <a href="#Function">unten</a> beschrieben.</p>
  </dd>
  
  <dt>HinzufügenEntfernen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn dieser Parameter weggelassen wird oder leer ist, wird standardmäßig 1 (die Funktion nach anderen zuvor registrierten Funktionen aufrufen) verwendet. Ansonsten können Sie eine der folgenden Zahlen angeben:</p>
    <ul>
      <li>1 = Die Funktion nach anderen zuvor registrierten Funktionen aufrufen.</li>
      <li>-1 = Die Funktion vor anderen zuvor registrierten Funktionen aufrufen.</li>
      <li>0 = Die Funktion nicht aufrufen.</li>
    </ul>
  </dd>

</dl>

<h2 id="Function">Funktion</h2>
<p>Die Funktion sollte zwei Parameter akzeptieren:</p>
<pre class="Syntax"><i>FunktionName</i>(Fehlersignal, Modus)</pre>
<dl>
  <dt>Fehlersignal</dt>
  <dd>
    <p>Typ: <a href="../objects/Any.htm">Any</a></p>
    <p>Der via Throw ausgelöste Wert, was üblicherweise ein <a href="../objects/Error.htm">Error-Objekt</a> ist.</p>
  </dd>
  <dt>Modus</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine der folgenden Zeichenketten:</p>
    <ul>
      <li><code>"Return"</code>: <em>Fehlersignal</em> ist ein fortsetzbarer Laufzeitfehler. Der Thread wird fortgesetzt, wenn die Callback-Funktion -1 zurückgibt; ansonsten wird der Thread beendet.</li>
      <li><code>"Exit"</code>: <em>Fehlersignal</em> ist ein nicht-fortsetzbarer Laufzeitfehler oder ein Wert, der vom Skript via <a href="Throw.htm">Throw</a> gemeldet wurde. Der Thread wird beendet.</li>
      <li><code>"ExitApp"</code>: <em>Fehlersignal</em> ist ein kritischer Laufzeitfehler, wie z. B. wenn DllCall einen korrumpierten Speicher erkennt. Das Programm wird beendet.</li>
    </ul>
  </dd>
</dl>

<h3 id="Return_Value">Rückgabewert</h3>
<p>Die Callback-Funktion kann einen der folgenden Werte zurückgeben (andere Werte sind für die zukünftige Verwendung reserviert und sollten vermieden werden):</p>
<ul>
  <li><code>0</code>, <code>""</code> oder kein <code>return</code>: Fehlerbehandlung normal fortsetzen lassen.</li>
  <li><code>1</code>: Standard-Fehlerdialogfenster und alle verbleibenden Fehler-Callbacks unterdrücken.</li>
  <li><code>-1</code>: Wie oben, aber wenn <em>Modus</em> die Zeichenkette <code>"Return"</code> ist, wird die Ausführung des aktuellen Threads fortgesetzt.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p><em>Funktion</em> wird nur bei Fehlern oder Ausnahmen aufgerufen, die normalerweise zu einer Fehlermeldung führen würden. Ladezeitfehler gehören nicht dazu, da OnError erst nach dem Laden des Skripts aufgerufen werden kann.</p>
<p><em>Funktion</em> wird während des aktuellen <a href="../misc/Threads.htm">Threads</a> aufgerufen, bevor er beendet wird (also bevor der Aufrufstapel abgearbeitet wurde).</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Throw.htm">Throw</a>, <a href="OnExit.htm">OnExit</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Protokolliert Fehler, die vom Skript verursacht werden, in eine Textdatei, anstatt sie dem Benutzer anzuzeigen.</p>
<pre>
OnError FehlerProtokollieren
i := Integer("Fehler_verursachen")

FehlerProtokollieren(Exception, Modus) {
    FileAppend "Fehler bei Zeile " Exception.Line ": " Exception.Message "`n"
        , "Fehlerprotokoll.txt"
    return true
}
</pre>
</div>

<div class="ex" id="ExAccumulator">
<p><a class="ex_number" href="#ExAccumulator"></a> Verwenden Sie OnError, um alternative Fehlerbehandlungsmethoden zu implementieren. Einschränkung: OnError ist unwirksam, während <a href="Try.htm">Try</a> aktiv ist.</p>
<pre>
AccumulateErrors()
{
    local ea := ErrorAccumulator()
    ea.Start()
    return ea
}

class ErrorAccumulator
{
    Errors := []                        <em>; Array für akkumulierte Fehler.</em>
    _cb := AccumulateError.Bind(this.Errors)
    Start() =&gt; OnError(this._cb, -1)    <em>; Unsere cb vor allen anderen registrieren.</em>
    Stop() =&gt; OnError(this._cb, 0)      <em>; Unsere cb deregistrieren.</em>
    Last =&gt; this.Errors[-1]             <em>; Aktuellster Fehler.</em>
    Count =&gt; this.Errors.Length         <em>; Anzahl der akkumulierten Fehler.</em>
    __item[i] =&gt; this.Errors[i]         <em>; Shortcut für Indexierung.</em>
    __delete() =&gt; this.Stop()           <em>; Zum Binden an Gültigkeitsbereich der Funktion.</em>
}

<em>; Nachfolgend die OnError-Callback-Funktion. 'errors' wird ein Wert via Bind() übergeben.</em>
AccumulateError(errors, e, mode)
{
    if mode != "Return" <em>; Nicht fortsetzbar.</em>
        return
    if e.What = "" <em>; Ausdrucksfehler oder ähnliches, keine interne Funktion.</em>
        return
    try {
        <em>; Versuchen, den Fehler in stdout auszugeben.</em>
        FileAppend Format("{1} ({2}) : ({3}) {4}`n", e.File, e.Line, e.What, e.Message), "*"
        if HasProp(e, "extra")
            FileAppend "     Specifically: " e.Extra "`n", "*"
    }
    errors.Push(e)
    return -1 <em>; Weiter.</em>
}

FensterNeuanordnen()
{
    <em>; Beginnen, Fehler in 'err' zu akkumulieren.</em>
    local err := AccumulateErrors()

    <em>; Einige Dinge tun, die fehlschlagen könnten...</em>
    MonitorGetWorkArea , &amp;Links, &amp;Oben, &amp;Rechts, &amp;Unten
    Breite := (Rechts-Links)//2, Höhe := Unten-Oben
    WinMove Links, Oben, Breite, Höhe, A_ScriptFullPath
    WinMove Links+Breite, Oben, Breite, Höhe, "Hilfe für AutoHotkey v2"

    <em>; Überprüfen, ob Fehler aufgetreten sind.</em>
    if err.Count
        MsgBox err.Count " Fehler; letzter Fehler auf Zeile #" err.Last.Line
    else
        MsgBox "Keine Fehler"

    <em>; Stop wird automatisch aufgerufen, wenn die Variable den Gültigkeitsbereich
    ; verlässt, da nur wir eine Referenz zum Objekt haben. Dies führt dazu,
    ; dass OnError aufgerufen wird, um die Callback-Funktion zu deregistrieren.
    ;err.Stop()</em>
}

<em>; Testfunktion aufrufen, die Fehler unterdrückt und akkumuliert.</em>
FensterNeuanordnen()
<em>; Andere Funktion aufrufen, um zu zeigen, dass normales Fehlerverhalten wiederhergestellt wird.</em>
WinMove 0, 0, 0, 0, "Nicht-existierendes Fenster"
</pre>
</div>

</body>
</html>

<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Switch - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Switch-Anweisung führt eine Case-Anweisung aus einer Liste von Kandidaten aus, die sich gegenseitig ausschließen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Switch</h1>

<p>Führt eine Case-Anweisung aus einer Liste von Kandidaten aus, die sich gegenseitig ausschließen.</p>

<pre class="Syntax"><span class="func">Switch</span> <span class="optional">SwitchWert, GroßKleinSensitiv</span>
{
<span class="func">Case</span> CaseWert1:
    <i>Anweisungen1</i>
<span class="func">Case</span> CaseWert2a, CaseWert2b:
    <i>Anweisungen2</i>
<span class="func">Default</span>:
    <i>Anweisungen3</i>
}</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>SwitchWert, GroßKleinSensitiv...</dt>
  <dd>
    <p>Werte, die verglichen werden sollen, wie in den <a href="#Remarks">Bemerkungen</a> unten beschrieben.</p>
  </dd>

  <dt>CaseSense</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Geben Sie optional einen der folgenden Werte an, um zu erzwingen, dass alle Werte als Zeichenketten verglichen werden:</p>
    <p><code>"On"</code> oder <code>1</code> (<code>True</code>): Jeder Vergleich erfolgt Groß-/Kleinschreibung-sensitiv.</p>
    <p><code>"Off"</code> oder <code>0</code> (<code>False</code>): Die Großbuchstaben A bis Z und die entsprechenden Kleinbuchstaben werden gleichwertig behandelt.</p>
    <p id="Locale"><code>"Locale"</code>: Jeder Vergleich erfolgt nicht Groß-/Kleinschreibung-sensitiv, gemäß den Regeln der aktuellen Sprach- und Regionseinstellungen des Benutzers. Weitere Informationen finden Sie unter <a href="StrCompare.htm">StrCompare</a>.</p>
  </dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Sofern vorhanden, wird <em>SwitchWert</em> einmal ausgewertet und mit jedem Case-Wert verglichen. Wenn eine Übereinstimmung gefunden wurde, wird das entsprechende Case ausgeführt. Ansonsten wird das erste Case ausgeführt, das als <a href="../Concepts.htm#boolean">True</a> (weder 0 noch leer) gewertet wird. Wenn kein passendes Case gefunden wird, wird <code>Default</code> ausgeführt, sofern vorhanden.</p>
<p>Genau wie bei den Operatoren <code>=</code> und <code>==</code> wird, sofern <em>GroßKleinSensitiv</em> weggelassen wird, ein numerischer Vergleich durchgeführt, wenn sowohl <em>SwitchWert</em> als auch der Case-Wert reine Zahlen sind, oder wenn einer der Werte eine reine Zahl und der andere eine numerische Zeichenkette ist. Jedes Case wird separat behandelt und beeinflusst nicht den Vergleichstyp von anderen Cases.</p>
<p>Wenn der <em>GroßKleinSensitiv</em>-Parameter vorhanden ist, werden alle Werte als Zeichenketten verglichen, nicht als Zahlen, und es wird ein <a href="../objects/Error.htm#TypeError">TypeError</a> ausgelöst, wenn <em>SwitchWert</em> oder <em>CaseWert</em> zu einem Objekt evaluiert wird.</p>
<p>Für jedes Case können bis zu 20 Werte angegeben werden. Jeder Wert muss ein <a href="../Language.htm#expressions">Ausdruck</a> sein, dazu zählen einfache Werte wie direkt geschriebene Nummern, in Anführungszeichen gesetzte Zeichenketten oder Variablen. <code>Case</code> und <code>Default</code> müssen mit einem Doppelpunkt <code>:</code> enden.</p>
<p>Die erste Anweisung eines Case kann entweder unter oder neben dem <code>Case</code> stehen. Jedes Case endet indirekt beim nächsten <code>Case</code>/<code>Default</code> oder bei der geschweiften Endklammer. Im Gegensatz zu den Switch-Anweisungen in einigen anderen Sprachen gibt es weder ein indirektes Fall-Through noch <a href="Break.htm">Break</a> (außer um eine Schleife zu unterbrechen).</p>
<p>Da alles Cases im gleichen Block sind, kann ein Label, das in einem Case definiert wurde, das Ziel von <a href="Goto.htm">Goto</a> aus einem anderen Case sein. Wenn allerdings ein Label direkt über <code>Case</code> oder <code>Default</code> platziert wird, verweist es auf das Ende des vorherigen Case, nicht auf den Anfang des nächsten Case.</p>
<p><code>Default</code> muss nicht als letztes aufgelistet werden.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="If.htm">If</a>, <a href="Else.htm">Else</a>, <a href="Block.htm">Blöcke</a></p>

<h2 id="examples">Beispiele</h2>
<div class="ex" id="ExInput">
<p><a class="ex_number" href="#ExInput"></a> Um dieses Beispiel zu testen, geben Sie <kbd>&lt;</kbd> gefolgt von einer der unten aufgelisteten Abkürzungen, weitere 5 Zeichen oder Enter/Esc/Tab/<kbd>.</kbd> ein; oder warten Sie 4 Sekunden.</p>
<pre>~&lt;::
{
    Hook := InputHook("V T5 L4 C", "{enter}.{esc}{tab}", "btw,otoh,fl,ahk,ca")
    Hook.Start()
    Hook.Wait()
    switch Hook.EndReason
    {
    case "Max":
        MsgBox 'Ihre Eingabe "' Hook.Input '" hat die maximale Textlänge erreicht.'
    case "Timeout":
        MsgBox 'Sie haben "' Hook.Input '" innerhalb der verfügbaren Zeit eingegeben.'
    case "EndKey":
        MsgBox 'Sie haben "' Hook.Input '" eingegeben und die Eingabe mit ' Hook.EndReason ' beendet.'
    default:  <em>; Übereinstimmung</em>
        switch Hook.Input
        {
        case "btw":   Send "{backspace 3}by the way"
        case "otoh":  Send "{backspace 4}on the other hand"
        case "fl":    Send "{backspace 2}Florida"
        case "ca":    Send "{backspace 2}California"
        case "ahk":
            Send "{backspace 3}"
            Run "https://www.autohotkey.com"
        }
    }
}</pre>
</div>

</body>
</html>

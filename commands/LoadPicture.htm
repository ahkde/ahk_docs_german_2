<!DOCTYPE HTML>
<html lang="de">
<head>
<title>LoadPicture - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die LoadPicture-Funktion lädt ein Bild aus einer Datei und gibt ein Bitmap- oder Symbol-Handle zurück." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>LoadPicture</h1>

<p>Lädt ein Bild aus einer Datei und gibt ein Bitmap- oder Symbol-Handle zurück.</p>
<pre class="Syntax">Handle := <span class="func">LoadPicture</span>(DateiName <span class="optional">, Optionen, &amp;BildTyp</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>DateiName</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Dateiname des Bildes. Wenn kein absoluter Pfad angegeben ist, wird das Bild im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet. Wenn der Name einer DLL- oder EXE-Datei ohne Pfad angegeben ist, wird sie eventuell aus dem Verzeichnis der aktuellen Programmdatei (AutoHotkey.exe oder ein kompiliertes Skript) oder aus einem Systemverzeichnis geladen.</p>
  </dd>
  
  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette von null oder mehreren der folgenden Optionen, die jeweils durch ein Leer- oder Tabulatorzeichen voneinander getrennt sind:</p>
    <p><strong>W</strong><em>n</em> und <strong>H</strong><em>n</em>: Die Breite und Höhe, mit der das Bild geladen werden soll - <em>n</em> muss ein Integer sein. Wenn eine Abmessung weggelassen wird oder -1 ist, wird sie unter Beibehaltung des Seitenverhältnisses automatisch auf Basis der anderen Abmessung berechnet. Wenn beide Abmessungen weggelassen werden, wird die Originalgröße des Bildes verwendet. Wenn eine der Abmessungen 0 ist, wird für diese Abmessung die Originalgröße verwendet. Zum Beispiel: <code>"w80 h50"</code>, <code>"w48 h-1"</code> oder <code>"w48"</code> (behält Seitenverhältnis bei), <code>"h0 w100"</code> (verwendet Originalhöhe, aber überschreibt Breite).</p>
    <p><strong>Icon</strong><em>n</em>: Kennzeichnet, welches Symbol aus einer Datei mit mehreren Symbolen geladen werden soll (in der Regel eine EXE- oder DLL-Datei). Zum Beispiel würde <code>"Icon2"</code> das zweite Symbol aus der Datei laden. Jedes unterstützte Bildformat kann in ein Symbol umgewandelt werden, wenn man <code>"Icon1"</code> angibt. Allerdings wird das Symbol wieder in eine Bitmap umgewandelt, wenn der <em>BildTyp</em>-Parameter weggelassen wird.</p>
    <p><strong>GDI+</strong>: Verwenden Sie GDI+ zum Laden eines Bildes, falls verfügbar. Zum Beispiel <code>"GDI+ w100"</code>.</p>
  </dd>
  
  <dt>&amp;BildTyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Eine Referenz, die auf eine Variable verweist, in der eine Nummer gespeichert werden soll, die den Typ des zurückgegebenen Handles kennzeichnet: 0 (IMAGE_BITMAP), 1 (IMAGE_ICON) oder 2 (IMAGE_CURSOR).</p>
    <p>Wenn dieser Parameter weggelassen wird, wird der Rückgabewert immer ein Bitmap-Handle sein (Symbole/Cursor werden umgewandelt, falls nötig). Ein Symbol/Cursor/Bitmap-Handle kann man nur zuverlässig nutzen oder löschen, wenn man weiß, um welchen Typ es sich handelt.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> zurück, je nachdem, ob ein Bild oder Symbol angegeben wurde.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>LoadPicture unterstützt auch <a href="../misc/ImageHandles.htm">die Handle-Syntax</a>, z. B. zum Erstellen eines skalierten Bildes auf Basis einer Symbol- oder Bitmap-Ressource, die bereits in den Speicher geladen worden ist, oder zum Konvertieren eines Symbols in eine Bitmap durch Weglassen von <em>BildTyp</em>.</p>
<p>Wenn das Bild aus dem Speicher freigegeben werden muss, kann je nach Typ des Handles eine passende Funktion aufgerufen werden.</p>
<pre>if (not BildTyp)  <em>; IMAGE_BITMAP (0) oder es wurde der BildTyp-Parameter weggelassen.</em>
    DllCall("DeleteObject", "ptr", Handle)
else if (BildTyp = 1)  <em>; IMAGE_ICON</em>
    DllCall("DestroyIcon", "ptr", Handle)
else if (BildTyp = 2)  <em>; IMAGE_CURSOR</em>
    DllCall("DestroyCursor", "ptr", Handle)</pre>

<h2 id="Related">Siehe auch</h2>
<p><a href="../misc/ImageHandles.htm">Bild-Handles</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExSlideShow">
<p><a class="ex_number" href="#ExSlideShow"></a> Lädt einige Bilder im Voraus und verwendet sie wieder.</p>
<pre>Bilder := []
<em>; Findet einige Bilder zum Anzeigen.</em>
Loop Files, A_WinDir "\Web\Wallpaper\*.jpg", "R"
{
    <em>; Lädt jedes Bild und fügt es in den Array ein.</em>
    Bilder.Push(LoadPicture(A_LoopFileFullPath))
}
if !Bilder.Length
{
    <em>; Wenn das passiert, müssen Sie den Pfad auf der Loop-Zeile darüber ändern.</em>
    MsgBox("Keine Bilder gefunden! Probieren Sie ein anderes Verzeichnis aus.")
    ExitApp
}
<em>; Fügt das Picture-Steuerelement hinzu, unter Beibehaltung des Seitenverhältnisses vom ersten Bild.</em>
MeineGui := Gui()
Pic := MeineGui.Add("Pic", "w600 h-1 +Border", "HBITMAP:*" Bilder[1])
MeineGui.OnEvent("Escape", (*) =&gt; ExitApp())
MeineGui.OnEvent("Close", (*) =&gt; ExitApp())
MeineGui.Show
Loop 
{
    <em>; Wechselt auf ein anderes Bild!</em>
    Pic.Value := "HBITMAP:*" Bilder[Mod(A_Index, Bilder.Length)+1]
    Sleep 3000
}</pre>
</div>

</body>
</html>

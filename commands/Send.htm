<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Send - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Funktionen Send, SendRaw, SendInput, SendPlay und SendEvent senden simulierte Tastendrücke und Mausklicks an das aktive Fenster." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Send, SendText, SendInput, SendPlay, SendEvent</h1>

<p>Sendet simulierte Tastendrücke und Mausklicks an das <a href="WinActivate.htm">aktive</a> Fenster.</p>

<pre class="Syntax"><span class="func">Send</span> Tasten
<span class="func">SendText</span> Tasten
<span class="func">SendInput</span> Tasten
<span class="func">SendPlay</span> Tasten
<span class="func">SendEvent</span> Tasten</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Tasten</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Reihe von Tasten, die gesendet werden sollen.</p>
    <p>Standardmäßig (also wenn weder SendText noch der <a href="#Raw">Raw-Modus</a> oder <a href="#Text">Text-Modus</a> verwendet wird) haben die Zeichen <code>^+!#{}</code> eine besondere Bedeutung. Die Zeichen <code>^+!#</code> repräsentieren die Modifikatortasten <kbd>Strg</kbd>, <kbd>Umschalt</kbd>, <kbd>Alt</kbd> und <kbd>Win</kbd>. Sie beeinflussen nur die direkt darauffolgende Taste. Um die entsprechende Modifikatortaste separat zu senden, umschließen Sie den Tastennamen mit geschweiften Klammern. Um die Taste nur gedrückt zu halten oder loszulassen, fügen Sie nach dem Tastennamen das Wort "down" oder "up" an, wie unten gezeigt.</p>
    <style>
      #modifierkeys td:not(:last-child) {
        white-space: nowrap;
        text-align: center
      }
    </style>
    <table id="modifierkeys" class="info">
      <tr>
        <th>Symbol</th>
        <th>Taste</th>
        <th>Drücken</th>
        <th>Loslassen</th>
        <th>Beispiele</th>
      </tr>
      <tr>
        <td>^</td>
        <td>{Ctrl}</td>
        <td>{Ctrl down}</td>
        <td>{Ctrl up}</td>
        <td><code>Send "^{Home}"</code> drückt <kbd>Strg</kbd>+<kbd>Pos1</kbd></td>
      </tr>
      <tr>
        <td>+</td>
        <td>{Shift}</td>
        <td>{Shift down}</td>
        <td>{Shift up}</td>
        <td><code>Send "+abC"</code> sendet den Text "AbC"<br>
          <code>Send "!+a"</code> drückt <kbd>Alt</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd></td>
      </tr>
      <tr>
        <td>!</td>
        <td>{Alt}</td>
        <td>{Alt down}</td>
        <td>{Alt up}</td>
        <td><code>Send "!a"</code> drückt <kbd>Alt</kbd>+<kbd>A</kbd></td>
      </tr>
      <tr>
        <td>#</td>
        <td>{LWin}<br>{RWin}</td>
        <td>{LWin down}<br>{RWin down}</td>
        <td>{LWin up}<br>{RWin up}</td>
        <td><code>Send "#e"</code> hält <kbd>Win</kbd> gedrückt und drückt dann <kbd>E</kbd></td>
      </tr>
    </table>
    <p class="note"><strong>Hinweis</strong>: Da Großbuchstaben durch Senden von <kbd>Umschalt</kbd> erzeugt werden, hat <code>A</code> in einigen Programmen einen anderen Effekt als <code>a</code>. Zum Beispiel bewirkt <code>!A</code>, dass <kbd>Alt</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> gedrückt wird, und <code>!a</code>, dass <kbd>Alt</kbd>+<kbd>A</kbd> gedrückt wird. Im Zweifelsfall immer Kleinbuchstaben verwenden.</p>
    <p>Die Zeichen <code>{}</code> werden genutzt, um <a href="#keynames">Tastennamen und andere Optionen</a> zu umschließen, und um Zeichen zu senden, die sonst eine spezielle Funktion hätten. Zum Beispiel wird <code>{Tab}</code> <kbd>Tab</kbd> drücken und <code>{!}</code> ein normales Ausrufezeichen senden.</p>
    <p>Wenn Sie einen reinen ASCII-Buchstaben (a-z oder A-Z) mit geschweiften Klammern umschließen, zwingen Sie Send, den Buchstaben als virtuellen Tastencode zu senden, egal ob das Zeichen im aktuellen Tastaturlayout existiert oder nicht. Mit anderen Worten: <code>Send "a"</code> erzeugt den Buchstaben "a", während <code>Send "{a}"</code> vielleicht den Buchstaben "a" erzeugt (abhängig vom Tastaturlayout). Einzelheiten finden Sie unter <a href="#AZ">Bemerkungen</a>.</p>
  </dd>

</dl>

<h2 id="Send_variants">Send-Varianten</h2>
<p><strong>Send:</strong> Standardmäßig ist Send synonym mit SendInput; allerdings kann es via <a href="SendMode.htm">SendMode</a> synonym mit SendEvent oder SendPlay gemacht werden.</p>
<p><strong>SendText:</strong> Ähnlich wie Send, außer dass alle Zeichen in <em>Tasten</em> als direkt geschriebener Text interpretiert und gesendet werden. Weitere Informationen finden Sie unter <a href="#Text">Text-Modus</a>.</p>
<p><strong id="SendInput">SendInput</strong> und <strong id="SendPlay">SendPlay</strong>: SendInput und SendPlay verwenden die gleiche Syntax wie Send, allerdings sind sie in der Regel schneller und zuverlässiger. Des Weiteren bewirken diese Modi, dass alle physischen Aktivitäten, die der Benutzer via Tastatur oder Maus durchführt, gepuffert (hinausgezögert) werden, bis die Send-Aktion abgeschlossen ist. Dadurch wird verhindert, dass die Tastendrücke des Benutzers mit denen, die gesendet werden, vermischt werden. Sie können <a href="SendMode.htm">SendMode</a> verwenden, um Send synonym mit SendInput oder SendPlay zu machen. Weitere Informationen zu jedem Modus finden Sie unter <a href="#SendInputDetail">SendInput</a> und <a href="#SendPlayDetail">SendPlay</a> weiter unten.</p>
<p id="SendEvent"><strong>SendEvent</strong>: SendEvent verwenden zum Senden von Tastendrücken die keybd_event-Funktion von Windows (siehe MSDN für Details). Die Geschwindigkeit, mit welcher die Tastendrücke gesendet werden, wird durch <a href="SetKeyDelay.htm">SetKeyDelay</a> beeinflusst. Sie können <a href="SendMode.htm">SendMode</a> verwenden, um Send synonym mit SendEvent oder SendPlay zu machen.</p>

<h2 id="Special_modes">Spezielle Modi</h2>
<p>Die folgenden Modi beeinflussen die Interpretation der Zeichen in <em>Tasten</em> oder das Verhalten von Funktionen, die Tasten senden, wie z. B. Send, SendInput, SendPlay, SendEvent und <a href="ControlSend.htm">ControlSend</a>. Diese Modi müssen in Form von <code>{x}</code> in <em>Tasten</em> angegeben werden, wobei x entweder Raw, Text oder Blind ist. Zum Beispiel <code>{Raw}</code>.</p>

<h3 id="Raw">Raw-Modus</h3>
<p id="SendRaw">Der Raw-Modus kann mit <code>{Raw}</code> aktiviert werden, wodurch alle nachfolgenden Zeichen, einschließlich <code>^+!#{}</code>, als direkt geschriebener Text interpretiert werden, anstatt dass <code>{Enter}</code> in <kbd>Enter</kbd>, <code>^c</code> in <kbd>Strg</kbd>+<kbd>C</kbd> usw. übersetzt wird. <code>Send "{Raw}{Tab}"</code> beispielsweise sendet <code>{Tab}</code> anstelle von <kbd>Tab</kbd>.</p>
<p>Der Raw-Modus hat keinen Einfluss auf die Interpretation von <a href="../misc/EscapeChar.htm">Escapesequenzen</a> und <a href="../Variables.htm#Expressions">Ausdrücke</a>. <code>Send "{Raw}``100`%"</code> beispielsweise sendet die Zeichenkette <code class="no-highlight">`100%</code>.</p>

<h3 id="Text">Text-Modus</h3>
<p id="SendText">Der Text-Modus kann entweder mit <code>{Text}</code>, SendText oder <a href="ControlSend.htm">ControlSendText</a> aktiviert werden, wodurch dasselbe wie der Raw-Modus bewirkt wird, aber ohne den Versuch, Zeichen (außer <code>`r</code>, <code>`n</code>, <code>`t</code> und <code>`b</code>) in Tastencodes umzuwandeln; stattdessen wird für alle übrigen Zeichen die <a href="#fallback">Fallback-Methode</a> angewandt. Dieser Modus verbessert die Zuverlässigkeit von SendEvent, SendInput und <a href="ControlSend.htm">ControlSend</a>, da die Zeichen kaum noch vom korrekten Modifikatorstatus abhängig sind. Dieser Modus kann mit dem Blind-Modus kombiniert werden, um das Loslassen von Modifikatortasten zu vermeiden: <code>Send "{Blind}{Text}Ihr Text"</code>. Einige Anwendungen setzen jedoch voraus, dass die Modifikatortasten losgelassen werden müssen.</p>
<p><code>`n</code>, <code>`r</code> und <code>`r`n</code> werden in einen einzelnen <kbd>Enter</kbd>-Tastendruck übersetzt - ganz im Gegensatz zum Standardverhalten und dem Raw-Modus, wo <code>`r`n</code> in zwei <kbd>Enter</kbd>-Tastendrücke übersetzt wird. <code>`t</code> wird in <kbd>Tab</kbd> und <code>`b</code> in <kbd>Backspace</kbd> übersetzt, während alle anderen Zeichen ohne Übersetzung gesendet werden.</p>
<p>Der Text-Modus ignoriert, wie der Blind-Modus auch, <a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a> (das heißt, dass der Status der <kbd>Feststell</kbd>-Taste nicht geändert wird) und wartet nicht auf <a href="../Hotkeys.htm#win-l">das Loslassen von <kbd>Win</kbd></a>. Der Grund dafür ist, dass der Text-Modus in der Regel nicht vom Status der <kbd>Feststell</kbd>-Taste abhängig ist und nicht den systeminternen <kbd>Win</kbd>+<kbd>L</kbd>-Hotkey auslösen kann. Dies gilt jedoch nur, wenn <em>Tasten</em> mit <code>{Text}</code> oder <code>{Blind}{Text}</code> beginnt.</p>

<h3 id="Blind">Blind-Modus</h3>
<p id="blind">Der Blind-Modus kann mit <code>{Blind}</code> aktiviert werden, wodurch das Skript mehr Kontrolle erhält, indem eine Reihe von Dingen deaktiviert werden, die normalerweise automatisch vorgenommen werden, damit die Dinge wie erwartet funktionieren. <code>{Blind}</code> muss das erste Element in der Zeichenkette sein, um den Blind-Modus zu aktivieren. Dieser Modus hat folgende Auswirkungen:</p>
<ul>
  <li>Der Blind-Modus verhindert, dass nach unten gedrückte Modifikatortasten (Alt, Strg, Umschalt und Win) wieder automatisch losgelassen werden, es sei denn, der Modifikator wurde <a href="#blind-exclude">ausgeschlossen</a>. Zum Beispiel würde der Hotkey <code>+s::Send "{Blind}abc"</code> ABC statt abc senden, wenn der Benutzer <kbd>Umschalt</kbd> gedrückt hält.</li>
  <li>Modifikatortasten werden unterschiedlich wiederhergestellt, damit ein Send die Modifikatoren eines Hotkeys ausschalten kann, auch dann, wenn der Benutzer sie immer noch physisch gedrückt hält. <code>^space::Send "{Ctrl up}"</code> beispielsweise drückt <kbd>Strg</kbd> automatisch wieder nach unten, falls der Benutzer <kbd>Strg</kbd> noch physisch gedrückt hält, während <code>^space::Send "{Blind}{Ctrl up}"</code> zulässt, dass <kbd>Strg</kbd> logisch oben ist, obwohl es physisch unten ist.</li>
  <li><a href="SetStoreCapsLockMode.htm">SetStoreCapslockMode</a> wird ignoriert; das heißt, dass der Status von <kbd>Feststell</kbd> nicht geändert wird.</li>
  <li><a href="../misc/A_MenuMaskKey.htm">Menü-Maskierung</a> ist deaktiviert. Das heißt, dass Send die zusätzlichen Tastendrücke weglässt, die sonst gesendet werden würden, um Folgendes zu verhindern: 1) Öffnen des Startmenüs bei Win-Tastendrücken (LWin/RWin); 2) Aktivierung der Menüleiste bei Alt-Tastendrücken. Der Blind-Modus verhindert jedoch nicht die Maskierung, die vom Tastatur-Hook nach Aktivierung einer Hook-Taste durchgeführt wird.</li>
  <li>Send wartet nicht auf das Loslassen von <kbd>Win</kbd>, auch dann nicht, wenn der Text einen <kbd>L</kbd>-Tastendruck enthält. Dies geschieht normalerweise, um zu verhindern, dass Send den System-Hotkey "Arbeitsplatz sperren" (<kbd>Win</kbd>+<kbd>L</kbd>) auslöst. Weitere Informationen finden Sie unter <a href="../Hotkeys.htm#win-l">Hotkeys</a>.</li>
</ul>
<p id="blind-exclude">Nach dem Wort "Blind" können ein oder mehrere Modifikator-Symbole (<code>!#^+</code>) erfolgen, um diese Modifikatoren bei Bedarf automatisch loszulassen. <code>*^a::Send "{Blind^}b"</code> beispielsweise würde <kbd>Umschalt</kbd>+<kbd>B</kbd> statt <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>B</kbd> senden, wenn <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> gedrückt wurde. Mit <code>{Blind!#^+}</code> können alle Modifikatoren bei Bedarf losgelassen werden, aber auch die anderen Effekte des Blind-Modus aktiviert werden.</p>
<p>AutoHotkey verwendet automatisch den Blind-Modus beim <a href="../misc/Remap.htm">Neubelegen einer Taste</a>. Zum Beispiel würde die Neubelegung <code>a::b</code> Folgendes erzeugen: 1) "b" wenn man "a" eingibt; 2) großes "B" wenn man ein großes "A" eingibt; und 3) <kbd>Strg</kbd>+<kbd>B</kbd> wenn man <kbd>Strg</kbd>+<kbd>A</kbd> eingibt. Wenn irgendwelche Modifikatoren bei der Originaltaste angegeben sind (einschließlich <kbd>Umschalt</kbd>, wenn die Originaltaste ein Großbuchstabe ist), werden diese wie oben beschrieben ausgeschlossen. <code>^a::b</code> beispielsweise erzeugt ein normales <kbd>B</kbd>, kein <kbd>Strg</kbd>+<kbd>B</kbd>.</p>
<p>SendText und <a href="ControlSend.htm">ControlSendText</a> unterstützen kein <code>{Blind}</code>; verwenden Sie stattdessen <code>{Blind}{Text}</code>.</p>
<p>Der Blind-Modus wird nur teilweise von <a href="#SendPlayDetail">SendPlay</a> unterstützt, besonders wenn es um die Modifikatortasten (Strg, Alt, Umschalt und Win) geht.</p>

<h2 id="keynames">Tastennamen</h2>
<p>Die folgende Tabelle listet alle speziellen Tasten auf, die gesendet werden können (jeder Tastenname muss mit geschweiften Klammern umschlossen werden):</p>
<table class="info">
  <tr>
    <th abbr="Taste">Tastenname</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td>{F1} - {F24}</td>
    <td>Funktionstasten. Zum Beispiel: {F12} ist <kbd>F12</kbd>.</td>
  </tr>
  <tr>
    <td>{!}</td>
    <td>!</td>
  </tr>
  <tr>
    <td>{#}</td>
    <td>#</td>
  </tr>
  <tr>
    <td>{+}</td>
    <td>+</td>
  </tr>
  <tr>
    <td>{^}</td>
    <td>^</td>
  </tr>
  <tr>
    <td>{{}</td>
    <td>{</td>
  </tr>
  <tr>
    <td>{}}</td>
    <td>}</td>
  </tr>
  <tr>
    <td>{Enter}</td>
    <td><kbd>Enter</kbd> im Hauptblock</td>
  </tr>
  <tr>
    <td>{Escape} oder {Esc}</td>
    <td><kbd>Esc</kbd></td>
  </tr>
  <tr>
    <td>{Space}</td>
    <td><kbd>Leer</kbd> (nur für Leerzeichen notwendig, die am Anfang oder Ende der zu sendenden Zeichenkette vorkommen - mittige Leerzeichen können direkt geschrieben werden)</td>
  </tr>
  <tr>
    <td>{Tab}</td>
    <td><kbd>Tab</kbd></td>
  </tr>
  <tr>
    <td>{Backspace} oder {BS}</td>
    <td><kbd>Backspace</kbd></td>
  </tr>
  <tr>
    <td>{Delete} oder {Del}</td>
    <td><kbd>Entf</kbd></td>
  </tr>
  <tr>
    <td>{Insert} oder {Ins}</td>
    <td><kbd>Einfg</kbd></td>
  </tr>
  <tr>
    <td>{Up}</td>
    <td><kbd>↑</kbd> (Nach-Oben-Taste) im Hauptblock</td>
  </tr>
  <tr>
    <td>{Down}</td>
    <td><kbd>↓</kbd> (Nach-Unten-Taste) im Hauptblock</td>
  </tr>
  <tr>
    <td>{Left}</td>
    <td><kbd>←</kbd> (Nach-Links-Taste) im Hauptblock</td>
  </tr>
  <tr>
    <td>{Right}</td>
    <td><kbd>→</kbd> (Nach-Rechts-Taste) im Hauptblock</td>
  </tr>
  <tr>
    <td>{Home}</td>
    <td><kbd>Pos1</kbd> im Cursorblock</td>
  </tr>
  <tr>
    <td>{End}</td>
    <td><kbd>Ende</kbd> im Cursorblock</td>
  </tr>
  <tr>
    <td>{PgUp}</td>
    <td><kbd>Bild↑</kbd> im Cursorblock</td>
  </tr>
  <tr class="sep_below">
    <td>{PgDn}</td>
    <td><kbd>Bild↓</kbd> im Cursorblock</td>
  </tr>
  <tr>
    <td>{CapsLock}</td>
    <td><kbd>Feststell</kbd> (es ist zuverlässiger, <a href="SetNumScrollCapsLockState.htm">SetCapsLockState</a> zu nutzen). Zum Senden von {CapsLock} ist möglicherweise vorher <code><a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a> False</code> erforderlich.</td>
  </tr>
  <tr>
    <td>{ScrollLock}</td>
    <td><kbd>Rollen</kbd> (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetScrollLockState</a>)</td>
  </tr>
  <tr class="sep_below">
    <td>{NumLock}</td>
    <td><kbd>Num</kbd> (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetNumLockState</a>)</td>
  </tr>
  <tr>
    <td>{Control} oder {Ctrl}</td>
    <td><kbd>Strg</kbd> (technische Info: Sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td>{LControl} oder {LCtrl}</td>
    <td>Linke <kbd>Strg</kbd>-Taste (technische Info: Sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td>{RControl} oder {RCtrl}</td>
    <td>Rechte <kbd>Strg</kbd>-Taste</td>
  </tr>
  <tr class="sep_below">
    <td>{Control down} oder {Ctrl down}</td>
    <td>Hält <kbd>Strg</kbd> gedrückt, bis {Ctrl up} gesendet wird. Um stattdessen die linke oder rechte Taste gedrückt zu halten, verwenden Sie {RCtrl down} und {RCtrl up}.</td>
  </tr>
  <tr>
    <td>{Alt}</td>
    <td><kbd>Alt</kbd> (technische Info: Sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td>{LAlt}</td>
    <td>Linke <kbd>Alt</kbd>-Taste (technische Info: Sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td>{RAlt}</td>
    <td>Rechte <kbd>Alt</kbd>-Taste (oder <kbd>AltGr</kbd>, abhängig von der Tastaturbelegung)</td>
  </tr>
  <tr class="sep_below">
    <td>{Alt down}</td>
    <td>Hält <kbd>Alt</kbd> gedrückt, bis {Alt up} gesendet wird. Um stattdessen die linke oder rechte Taste gedrückt zu halten, verwenden Sie {RAlt down} und {RAlt up}.</td>
  </tr>
  <tr>
    <td>{Shift}</td>
    <td><kbd>Umschalt</kbd> (technische Info: Sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td>{LShift}</td>
    <td>Linke <kbd>Umschalt</kbd>-Taste (technische Info: Sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td>{RShift}</td>
    <td>Rechte <kbd>Umschalt</kbd>-Taste</td>
  </tr>
  <tr class="sep_below">
    <td>{Shift down}</td>
    <td>Hält <kbd>Umschalt</kbd> gedrückt, bis {Shift up} gesendet wird. Um stattdessen die linke oder rechte Taste gedrückt zu halten, verwenden Sie {RShift down} und {RShift up}.</td>
  </tr>
  <tr>
    <td>{LWin}</td>
    <td>Linke <kbd>Win</kbd>-Taste</td>
  </tr>
  <tr>
    <td>{RWin}</td>
    <td>Rechte <kbd>Win</kbd>-Taste</td>
  </tr>
  <tr>
    <td>{LWin down}</td>
    <td>Hält die linke <kbd>Win</kbd>-Taste gedrückt, bis {LWin up} gesendet wird</td>
  </tr>
  <tr class="sep_below">
    <td>{RWin down}</td>
    <td>Hält die rechte <kbd>Win</kbd>-Taste gedrückt, bis {RWin up} gesendet wird</td>
  </tr>
  <tr>
    <td>{AppsKey}</td>
    <td><kbd>Menü</kbd> (öffnet das Rechtsklick- bzw. Kontextmenü)</td>
  </tr>
  <tr>
    <td>{Sleep}</td>
    <td><kbd>Sleep</kbd>.</td>
  </tr>
  <tr id="asc">
    <td>{ASC nnnnn}</td>
    <td><p>Sendet eine <kbd>Alt</kbd>+nnnnn-Ziffernblock-Tastenkombination. Dies ermöglicht es, Sonderzeichen zu erzeugen, die auf der Tastatur normalerweise nicht vorhanden sind. Um ASCII-Zeichen zu generieren, geben Sie eine Nummer zwischen 1 und 255 an. Um ANSI-Zeichen zu generieren (Standard in den meisten Sprachen), geben Sie zuerst eine 0 und danach eine Nummer zwischen 128 und 255 an; zum Beispiel {Asc 0133}.</p>
    <p>Um Unicode-Zeichen zu generieren, geben Sie eine Nummer zwischen 256 und 65535 an (ohne Null am Anfang). Allerdings wird das nicht von jeder Anwendung unterstützt. Alternativen dazu finden Sie im nächsten Abschnitt.</p></td>
  </tr>
  <tr id="Unicode">
    <td>{U+nnnn}</td>
    <td><p id="sendu">Sendet ein Unicode-Zeichen, wobei <em>nnnn</em> der hexadezimale Wert des Zeichens ohne 0x-Präfix ist. Diese Methode ist üblicherweise nicht notwendig, weil Send und ControlSend von sich aus Unicode-Text unterstützt.</p>
    <p><a href="https://msdn.microsoft.com/de-de/library/ms646310">SendInput()</a> oder <a href="https://msdn.microsoft.com/de-de/library/ms646276">WM_CHAR</a> wird zum Senden des Zeichens verwendet, außerdem wird der aktuelle Send-Modus ignoriert. Zeichen, die auf diese Weise gesendet werden, lösen in der Regel keine Tastaturkurzbefehle oder Hotkeys aus.</p></td>
  </tr>
  <tr id="vk" class="sep_below">
    <td><p>{vkXX}<br>
      {scYYY}<br>
    {vkXXscYYY}</p></td>
    <td><p>Sendet einen Tastendruck, der den virtuellen Tastencode XX und den Scancode YYY hat. Zum Beispiel: <code>Send "{vkFFsc159}"</code>. Lässt man den sc- oder vk-Bereich weg, wird an seiner Stelle der am besten geeignete Wert gesendet.</p>
      <p>Die Werte für XX und YYY sind hexadezimal und können üblicherweise über den Menüpunkt <a href="KeyHistory.htm">View-&gt; Key history</a> im Hauptfenster ermittelt werden. Siehe auch: <a href="../KeyList.htm#SpecialKeys">Sondertasten</a></p>
      <p class="warning"><strong>Warnung:</strong> Das Kombinieren von vk und sc auf diese Weise ist nur mit Send gültig.</p></td>
  </tr>
  <tr>
    <td>{Numpad0} - {Numpad9}</td>
    <td>Ziffernblocktasten (wenn <kbd>Num</kbd> eingeschaltet ist). Zum Beispiel: {Numpad5} ist <kbd>5</kbd>.</td>
  </tr>
  <tr>
    <td>{NumpadDot}</td>
    <td><kbd>,</kbd> (Komma-Taste im Ziffernblock) (wenn <kbd>Num</kbd> eingeschaltet ist)</td>
  </tr>
  <tr>
    <td>{NumpadEnter}</td>
    <td><kbd>Enter</kbd> im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadMult}</td>
    <td><kbd>*</kbd> (Multiplikationstaste im Ziffernblock)</td>
  </tr>
  <tr>
    <td>{NumpadDiv}</td>
    <td><kbd>/</kbd> (Divisionstaste im Ziffernblock)</td>
  </tr>
  <tr>
    <td>{NumpadAdd}</td>
    <td><kbd>+</kbd> (Additionstaste im Ziffernblock)</td>
  </tr>
  <tr class="sep_below">
    <td>{NumpadSub}</td>
    <td><kbd>-</kbd> (Subtraktionstaste im Ziffernblock)</td>
  </tr>
  <tr>
    <td>{NumpadDel}</td>
    <td><kbd>Entf</kbd> im Ziffernblock (diese und die nachfolgenden Ziffernblocktasten sind nur verwendbar, wenn <kbd>Num</kbd> ausgeschaltet ist)</td>
  </tr>
  <tr>
    <td>{NumpadIns}</td>
    <td><kbd>Einfg</kbd> im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadClear}</td>
    <td>Funktionslose Taste im Ziffernblock (üblicherweise <kbd>5</kbd>, wenn <kbd>Num</kbd> ausgeschaltet ist).</td>
  </tr>
  <tr>
    <td>{NumpadUp}</td>
    <td><kbd>↑</kbd> (Nach-Oben-Taste) im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadDown}</td>
    <td><kbd>↓</kbd> (Nach-Unten-Taste) im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadLeft}</td>
    <td><kbd>←</kbd> (Nach-Links-Taste) im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadRight}</td>
    <td><kbd>→</kbd> (Nach-Rechts-Taste) im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadHome}</td>
    <td><kbd>Pos1</kbd> im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadEnd}</td>
    <td><kbd>Ende</kbd> im Ziffernblock</td>
  </tr>
  <tr>
    <td>{NumpadPgUp}</td>
    <td><kbd>Bild↑</kbd> im Ziffernblock</td>
  </tr>
  <tr class="sep_below">
    <td>{NumpadPgDn}</td>
    <td><kbd>Bild↓</kbd> im Ziffernblock</td>
  </tr>
  <tr>
    <td>{Browser_Back}</td>
    <td>Browser "Zurück"</td>
  </tr>
  <tr>
    <td>{Browser_Forward}</td>
    <td>Browser "Vorwärts"</td>
  </tr>
  <tr>
    <td>{Browser_Refresh}</td>
    <td>Browser "Aktualisieren"</td>
  </tr>
  <tr>
    <td>{Browser_Stop}</td>
    <td>Browser "Stopp"</td>
  </tr>
  <tr>
    <td>{Browser_Search}</td>
    <td>Browser "Suchen"</td>
  </tr>
  <tr>
    <td>{Browser_Favorites}</td>
    <td>Browser "Favoriten"</td>
  </tr>
  <tr>
    <td>{Browser_Home}</td>
    <td>Startet den Browser und öffnet die Startseite</td>
  </tr>
  <tr>
    <td>{Volume_Mute}</td>
    <td>Stummschaltung der Master-Lautstärke ein-/ausschalten. Normalerweise das gleiche wie <code><a href="SoundSetMute.htm">SoundSetMute</a> -1</code>.</td>
  </tr>
  <tr>
    <td>{Volume_Down}</td>
    <td>Master-Lautstärke leiser machen. Normalerweise das gleiche wie <code><a href="SoundSetVolume.htm">SoundSetVolume</a> -5</code>.</td>
  </tr>
  <tr>
    <td>{Volume_Up}</td>
    <td>Master-Lautstärke lauter machen. Normalerweise das gleiche wie <code><a href="SoundSetVolume.htm">SoundSetVolume</a> "+5"</code>.</td>
  </tr>
  <tr>
    <td>{Media_Next}</td>
    <td>Media Player "Nächster Track"</td>
  </tr>
  <tr>
    <td>{Media_Prev}</td>
    <td>Media Player "Vorheriger Track"</td>
  </tr>
  <tr>
    <td>{Media_Stop}</td>
    <td>Media Player "Stopp"</td>
  </tr>
  <tr>
    <td>{Media_Play_Pause}</td>
    <td>Media Player "Wiedergabe/Anhalten"</td>
  </tr>
  <tr>
    <td>{Launch_Mail}</td>
    <td>E-Mail-Programm öffnen</td>
  </tr>
  <tr>
    <td>{Launch_Media}</td>
    <td>Media Player öffnen</td>
  </tr>
  <tr>
    <td>{Launch_App1}</td>
    <td>Benutzerdefiniertes Programm 1 öffnen</td>
  </tr>
  <tr class="sep_below">
    <td>{Launch_App2}</td>
    <td>Benutzerdefiniertes Programm 2 öffnen</td>
  </tr>
  <tr>
    <td>{PrintScreen}</td>
    <td><kbd>Druck</kbd></td>
  </tr>
  <tr>
    <td>{CtrlBreak}</td>
    <td><kbd>Strg</kbd>+<kbd>Pause</kbd></td>
  </tr>
  <tr class="sep_below">
    <td>{Pause}</td>
    <td><kbd>Pause</kbd></td>
  </tr>
  <tr id="Click">
    <td>{Click [Optionen]}</td>
    <td>Sendet einen Mausklick. Verwendet die gleichen Optionen wie die der <a href="Click.htm">Click</a>-Funktion. <code>Send "{Click}"</code> beispielsweise klickt mit der linken Maustaste einmal auf die aktuelle Position des Mauszeigers, während <code>Send "{Click 100 200}"</code> auf die Koordinaten 100, 200 klickt (basierend auf <a href="CoordMode.htm">CoordMode</a>). Um den Mauszeiger ohne Klicken zu verschieben, geben Sie nach den Koordinaten eine 0 an; zum Beispiel: <code>Send "{Click 100 200 0}"</code>. Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt (nicht <a href="SetKeyDelay.htm">SetKeyDelay</a>).</td>
  </tr>
  <tr id="mouse-buttons">
    <td>{WheelDown}, {WheelUp}, {WheelLeft}, {WheelRight}, {LButton}, {RButton}, {MButton}, {XButton1}, {XButton2}</td>
    <td>
      <p>Sendet ein Maustastenereignis auf die aktuelle Position des Mauszeigers (um die Position und sonstige Optionen festzulegen, verwenden Sie <a href="Click.htm">{Click}</a> oben). Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt.</p>
      <p>LButton ist die primäre Maustaste und RButton die sekundäre Maustaste. Im Normalfall befindet sich die primäre Maustaste (LButton) auf der linken Seite, aber der Benutzer kann die Maustasten via Systemsteuerung vertauschen.</p>
    </td>
  </tr>
  <tr>
    <td>{Blind}</td>
    <td>Aktiviert den <a href="#blind">Blind-Modus</a>, wodurch das Skript mehr Kontrolle erhält, indem eine Reihe von Dingen deaktiviert werden, die normalerweise automatisch vorgenommen werden, damit die Dinge wie erwartet funktionieren. Die Zeichenkette <code>{Blind}</code> muss am Anfang der Zeichenkette stehen.</td>
  </tr>
  <tr>
    <td>{Raw}</td>
    <td>Aktiviert den <a href="#SendRaw">Raw-Modus</a>. Dieser bewirkt, dass die folgenden Zeichen als direkt geschriebener Text interpretiert werden: <code>^+!#{}</code>. Obwohl die Zeichenkette <code>{Raw}</code> nicht am Anfang der Zeichenkette stehen muss, bleibt sie, wenn sie einmal angegeben wurde, für den Rest der Zeichenkette aktiv.</td>
  </tr>
  <tr>
    <td>{Text}</td>
    <td>Aktiviert den <a href="#SendText">Text-Modus</a>. Dieser sendet eine Kette von Zeichen anstelle von Tastendrücken. Genau wie der Raw-Modus bewirkt der Text-Modus, dass die folgenden Zeichen als direkt geschriebener Text interpretiert werden: <code>^+!#{}</code>. Obwohl die Zeichenkette <code>{Text}</code> nicht am Anfang der Zeichenkette stehen muss, bleibt sie, wenn sie einmal angegeben wurde, für den Rest der Zeichenkette aktiv.</td>
  </tr>
</table>

<h2 id="Repeating_or_Holding_Down_a_Key">Mehrfaches oder haltendes Drücken einer Taste</h2>
<p id="repeat"><strong>Mehrfaches Drücken</strong>: Umschließen Sie den Namen der Taste, gefolgt von der Anzahl der Wiederholungen, in geschweiften Klammern. Zum Beispiel:</p>
<pre>Send "{DEL 4}"  <em>; Drückt viermal die ENTF-Taste.</em>
Send "{S 30}"   <em>; Sendet 30-mal ein großes S.</em>
Send "+{TAB 4}"  <em>; Drückt viermal UMSCHALT+TAB.</em></pre>
<p id="Down"><strong>Halten oder Loslassen</strong>: Umschließen Sie den Namen der Taste, gefolgt von dem Wort <strong>Down</strong> oder <strong>Up</strong>, in geschweiften Klammern. Zum Beispiel:</p>
<pre>Send "{b down}{b up}"
Send "{TAB down}{TAB up}"
Send "{Up down}"  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep 1000  <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send "{Up up}"  <em>; Lässt die NACH-OBEN-Taste los.</em></pre>
<p>Wenn eine Taste mit der Methode oben gedrückt gehalten wird, erfolgt keine Auto-Wiederholung, wie es beim physischen Gedrückthalten geschehen würde (Auto-Wiederholung ist nämlich ein Treiber/Hardware-Feature). Allerdings kann mit einer <a href="Loop.htm">Schleife</a> das Auto-Wiederholen künstlich erzeugt werden. Das folgende Beispiel sendet 20-mal die Tabulatortaste:</p>
<pre>Loop 20
{
    Send "{Tab down}"  <em>; Auto-Wiederholen besteht aus fortlaufenden Down-Ereignissen (ohne Up-Ereignisse).</em>
    Sleep 30  <em>; Die Anzahl der Millisekunden zwischen den Tastendrücken (oder verwenden Sie <a href="SetKeyDelay.htm">SetKeyDelay</a>).</em>
}
Send "{Tab up}"  <em>; Lässt die Taste los.</em></pre>
<p>Standardmäßig lässt Send eine Modifikatortaste (Strg, Umschalt, Alt und Win) nicht automatisch los, wenn diese Modifikatortaste durch Senden "nach unten gedrückt" wurde. <code>Send a</code> beispielsweise verhält sich eventuell ähnlich wie <code>Send "<a href="#blind">{Blind}</a>{Ctrl up}a{Ctrl down}"</code>, wenn der Benutzer <kbd>Strg</kbd> physisch gedrückt hält, während <code>Send "{Ctrl Down}"</code>, gefolgt von <code>Send "a"</code>, <kbd>Strg</kbd>+<kbd>A</kbd> erzeugen würde. <em>DownTemp</em> und <em>DownR</em> können genutzt werden, um dieses Verhalten zu überschreiben. <em>DownTemp</em> und <em>DownR</em> haben die gleiche Wirkung wie <em>Down</em>, außer bei den Modifikatortasten (Strg, Umschalt, Alt und Win).</p>
<p id="DownTemp"><strong>DownTemp</strong> teilt nachfolgenden Sends mit, dass die Taste nicht im permanent gedrückten Zustand ist und jederzeit losgelassen werden kann, wenn ein Tastendruck dies erfordert. <code>Send "{Control DownTemp}"</code>, später gefolgt von <code>Send "a"</code>, würde zum Beispiel <kbd>A</kbd> erzeugen, nicht <kbd>Strg</kbd>+<kbd>A</kbd>. Jede Verwendung von Send kann dazu führen, dass der Modifikator permanent losgelassen wird, daher ist <em>DownTemp</em> nicht gerade die ideale Wahl, um Modifikatortasten <a href="../misc/Remap.htm">neu zu belegen</a>.</p>
<p id="DownR"><strong>DownR</strong> (das "R" bedeutet <a href="../misc/Remap.htm">Remapping</a> bzw. Neubelegen, was dessen Hauptzweck darstellt) teilt nachfolgenden Sends mit, dass die Taste, wenn sie automatisch losgelassen wird, nach Abschluss des Sends erneut gedrückt werden soll. So würde z. B. <code>Send "{Control DownR}"</code>, gefolgt von <code>Send "a"</code>, <kbd>A</kbd> erzeugen, nicht <kbd>Strg</kbd>+<kbd>A</kbd>, lässt aber <kbd>Strg</kbd> für eventuelle Tastaturkurzbefehle im gedrückten Zustand. Mit anderen Worten hat <em>DownR</em> denselben Effekt wie, als würde man die Taste physisch drücken.</p>
<p>Wenn ein Zeichen nicht zu einer virtuellen Taste im aktuellen Tastaturlayout gehört, kann es weder "gedrückt" noch "losgelassen" werden. <code>Send "{µ up}"</code> beispielsweise hat keinen Einfluss auf die meisten Layouts, während <code>Send "{µ down}"</code> das gleiche wie <code>Send "µ"</code> ist.</p>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p id="characters"><strong>Zeichen vs. Tasten</strong>: Standardmäßig werden Zeichen gesendet, indem sie zunächst in Tastendrücke übersetzt werden. Wenn diese Übersetzung nicht möglich ist (also wenn das aktuelle Tastaturlayout keine Taste oder Tastenkombination enthält, die dieses Zeichen erzeugen würde), wird das Zeichen mittels einer der folgenden Fallback-Methoden gesendet:</p>
<ul id="fallback">
  <li>SendEvent und SendInput nutzen <a href="http://msdn.microsoft.com/de-de/library/ms646310">SendInput()</a> mit dem <a href="https://msdn.microsoft.com/de-de/library/ms646271#keyeventf_unicode">KEYEVENTF_UNICODE-Flag</a>.</li>
  <li>SendPlay nutzt die <a href="#asc">Alt+nnnnn</a>-Methode, die nur Unicode erzeugt, wenn es von der Zielanwendung unterstützt wird.</li>
  <li>Controlsend sendet eine <a href="https://msdn.microsoft.com/de-de/library/ms646276">WM_CHAR</a>-Meldung.</li>
</ul>
<p class="warning"><strong>Hinweis:</strong> Zeichen, die mit einer der oben genannten Methoden gesendet werden, lösen in der Regel keine Tastaturkurzbefehle oder Hotkeys aus.</p>
<p id="AZ">Jedes Zeichen im Bereich von <strong>a-z</strong> oder <strong>A-Z</strong> (reine ASCII-Buchstaben), das im aktuellen Tastaturlayout nicht vorhanden ist, kann entweder als Zeichen oder als entsprechender virtueller Tastencode (vk41-vk5A) gesendet werden:</p>
<ul>
  <li>Wenn ein reiner Buchstabe (also ohne Modifikatoren oder geschweifte Klammern) gesendet wird, oder wenn der <a href="#Raw">Raw-Modus</a> aktiv ist, wird der Buchstabe als Zeichen gesendet. <code>Send "{Raw}Regards"</code> beispielsweise sendet den gewünschten Text, selbst wenn das Drücken von <kbd>R</kbd> (vk52) ein anderes Zeichen erzeugt (z. B. <kbd>К</kbd> im russischen Layout). <code>{Raw}</code> kann in diesem Fall weggelassen werden, es sei denn, eine Modifikatortaste wurde durch ein vorheriges Send aktiviert.</li>
  <li>Wenn eine oder mehrere Modifikatortasten durch die Send-Funktion aktiviert wurden, oder wenn der Buchstabe in geschweiften Klammern gesetzt ist, wird der Buchstabe als Tastencode gesendet (mit <kbd>Umschalt</kbd> modifiziert, wenn der Buchstabe großgeschrieben ist). Dadurch kann das Skript auf einfache Weise die vordefinierten Tastaturkurzbefehle aktivieren. <code>^c</code> und <code>{Ctrl down}c{Ctrl up}</code> beispielsweise aktivieren den vordefinierten Tastaturkurzbefehl <kbd>Strg</kbd>+<kbd>C</kbd>, während <code>{c}</code> das gleiche wie <code>{vk43}</code> ist.</li>
</ul>
<p>Wenn der Buchstabe im aktuellen Tastaturlayout vorhanden ist, wird er als Tastencode gesendet, den auch immer das Layout mit diesem Buchstaben assoziiert (es sei denn, der <a href="#SendText">Text-Modus</a> wird genutzt, dann wird das Zeichen auf andere Weise gesendet). Mit anderen Worten: Der obige Abschnitt ist nur für nicht-lateinische Layouts relevant, wie z. B. Russisch.</p>
<p id="mask"><strong>Modifikatorstatus</strong>: Wenn Send den Status der Modifikatortasten <kbd>Win</kbd> oder <kbd>Alt</kbd> ändern muss (z. B. wenn der Benutzer eine dieser Tasten gedrückt hält), kann es zusätzliche Tastendrücke einschleusen (standardmäßig <kbd>Strg</kbd>), um zu verhindern, dass das Startmenü oder das Fenstermenü angezeigt wird. Weitere Informationen finden Sie unter <a href="../misc/A_MenuMaskKey.htm">A_MenuMaskKey</a>.</p>
<p><strong>BlockInput vs. SendInput/SendPlay</strong>: Obwohl die <a href="BlockInput.htm">BlockInput</a>-Funktion genutzt werden kann, um zu verhindern, dass physische Eingaben des Benutzers die Ausführung der simulierten Tastendrücke stören, ist es oft besser, <a href="#SendInputDetail">SendInput</a> oder <a href="#SendPlayDetail">SendPlay</a> zu nutzen, damit Tastendrücke und Mausklicks nicht mehr unterbrochen werden können. SendInput/Play verhindert im Gegensatz zu BlockInput, dass die Eingaben des Benutzers während des Sendens verworfen werden; stattdessen werden solche Tastendrücke gepuffert und später gesendet.</p>
<p>Beim Senden vieler Tastendrücke kann ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> verwendet werden, um die Übersichtlichkeit und Wartbarkeit des Skripts zu verbessern.</p>
<p>Da das Betriebssystem das Simulieren von <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>Entf</kbd> nicht erlaubt, wird so etwas wie <code>Send "^!{Delete}"</code> nicht funktionieren.</p>
<p><b>Send hat möglicherweise keine Wirkung</b>, wenn das aktive Fenster mit administrativen Rechten läuft und das Skript nicht. Dies ist auf einen Sicherheitsmechanismus zurückzuführen, der sich "User Interface Privilege Isolation" (UIPI) nennt.</p>

<h2 id="SendInputDetail">SendInput</h2>
<p>SendInput ist grundsätzlich der bevorzugte Modus, um Tastendrücke und Mausklicks zu senden, da es schneller und zuverlässiger als die anderen Methoden ist. In den meisten Fällen wird eine Zeichenkette via SendInput nahezu verzögerungsfrei gesendet, sogar wenn es sich um sehr lange Zeichenketten handelt. Da SendInput so schnell ist, ist es auch zuverlässiger, weil es weniger Möglichkeiten gibt, dass ein anderes Fenster unerwartet auftaucht und die Tastendrücke abfängt. Die Zuverlässigkeit verbessert sich nochmals durch die Tatsache, dass alles, was der Benutzer während eines SendInputs eingibt, hinausgezögert wird, bis es abgeschlossen ist.</p>
<p>Im Gegensatz zu den anderen Send-Modi ist SendInput auf ca. 5000 Zeichen begrenzt (was je nach Version und Leistungseinstellungen des Betriebssystems variieren kann). Zeichen und Ereignisse, die über diesen Grenzwert hinausgehen, werden nicht gesendet.</p>
<p class="note"><strong>Hinweis</strong>: SendInput ignoriert SetKeyDelay, weil das Betriebssystem keine Verzögerung in diesem Modus unterstützt. Wenn SendInput allerdings aufgrund der unten genannten Bedingungen auf <a href="#SendEvent">SendEvent</a> zurückwechselt, wird <code><a href="SetKeyDelay.htm">SetKeyDelay</a> -1, 0</code> verwendet (es sei denn, die Tastenverzögerung von SendEvent ist <code>-1, -1</code>, dann wird <code>-1, -1</code> verwendet). Wenn SendInput auf <a href="#SendPlayDetail">SendPlay</a> zurückwechselt, wird die Tastenverzögerung von SendPlay verwendet.</p>
<p id="SendInputUnavail">Wenn ein Skript - <em>außer</em> das Skript, das SendInput ausführt - einen <a href="InstallKeybdHook.htm">Low-Level-Tastatur-Hook</a> installiert hat, wechselt SendInput automatisch auf <a href="#SendEvent">SendEvent</a> zurück (oder auf <a href="#SendPlayDetail">SendPlay</a>, wenn <code><a href="SendMode.htm">SendMode</a> "InputThenPlay"</code> wirksam ist). Dieses Verhalten ist notwendig, weil ein externer Hook alle Vorteile von SendInput zunichtemacht, wodurch SendInput gegenüber SendPlay und SendEvent unterlegen ist. Da SendInput jedoch nicht in der Lage ist, einen Low-Level-Hook in Programmen außer v1.0.43+ zu erkennen, wechselt es in solchen Fällen nicht zurück, wodurch es weniger zuverlässig ist als SendPlay/Event.</p>
<p>Wenn SendInput Mausklicks mithilfe von z. B. <a href="#Click">{Click}</a> sendet, während <code><a href="CoordMode.htm">CoordMode</a> "Mouse", "Window"</code> oder <code>CoordMode "Mouse", "Client"</code> aktiv ist, wird jeder Klick relativ zum Fenster sein, das vor dem Senden aktiv war. Wenn SendInput also absichtlich ein anderes Fenster aktiviert (z. B. mit ALT+TAB), werden die Koordinaten der nachfolgenden Klicks innerhalb der gleichen Funktion falsch sein, wenn sie relativ zum neuen statt zum alten Fenster sein sollten.</p>

<h2 id="SendPlayDetail">SendPlay</h2>
<p class="warning"><strong>Warnung:</strong> SendPlay hat möglicherweise überhaupt keine Wirkung, wenn die Benutzerkontensteuerung (UAC) aktiviert ist, auch wenn das Skript als Administrator ausgeführt wird. Weitere Informationen finden Sie in der <a href="../FAQ.htm#uac">FAQ</a>.</p>
<p>Der größte Vorteil von SendPlay gegenüber den anderen Modi ist dessen Fähigkeit, Tastendrücke und Mausklicks in einer breiteren Auswahl von Videospielen zu erzeugen. Zum Beispiel könnten <a href="../Hotstrings.htm#SendMode">Hotstrings</a> in einem Videospiel nur funktionieren, wenn sie die <a href="../Hotstrings.htm#SendMode">SendPlay-Option</a> haben.</p>
<p>Von den drei Send-Modi ist SendPlay der ungewöhnlichste Modus, weil er per se keine Tastendrücke und Mausklicks simuliert. Stattdessen erstellt dieser Modus eine Reihe von Ereignissen (Meldungen), die direkt in das aktive Fenster einfließen (ähnlich wie <a href="ControlSend.htm">ControlSend</a>, aber auf niedrigerem Level). Demzufolge kann SendPlay keine Hotkeys oder Hotstrings auslösen.</p>
<p>Wie bei <a href="#SendInputDetail">SendInput</a> werden die Tastendrücke von SendPlay nicht mit den Tastendrücken des Benutzers vermischt. Wenn der Benutzer also während eines SendPlays etwas eingibt, werden solche Tastendrücke hinausgezögert, bis es abgeschlossen ist.</p>
<p>SendPlay ist zwar deutlich langsamer als SendInput, aber schneller als der traditionelle <a href="#SendEvent">SendEvent</a>-Modus (selbst wenn <a href="SetKeyDelay.htm">Tastenverzögerung</a> -1 ist).</p>
<p>Beide <kbd>Win</kbd>-Tasten (LWin und RWin) werden während eines SendPlays automatisch blockiert, wenn der <a href="InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist. Dadurch wird verhindert, dass das Startmenü angezeigt wird, wenn der Benutzer während des Sendens versehentlich <kbd>Win</kbd> drückt. Alle anderen Tasten müssen hingegen nicht blockiert werden, weil das Betriebssystem diese automatisch hinauszögert (via Pufferung), bis das SendPlay abgeschlossen ist.</p>
<p>SendPlay verwendet nicht die Standardeinstellungen von <a href="SetKeyDelay.htm">SetKeyDelay</a> und <a href="SetMouseDelay.htm">SetMouseDelay</a>. Stattdessen erfolgt überhaupt keine Verzögerung, was aber wie folgt geändert werden kann:</p>
<pre><a href="SetKeyDelay.htm">SetKeyDelay</a> 0, 10, <strong>"Play"</strong>  <em>; Beachten Sie, dass sowohl 0 als auch -1 das gleiche sind im SendPlay-Modus.</em>
<a href="SetMouseDelay.htm">SetMouseDelay</a> 10, <strong>"Play"</strong></pre>
<p>SendPlay kann <kbd>Feststell</kbd>, <kbd>Num</kbd> oder <kbd>Rollen</kbd> weder ein- noch ausschalten. SendPlay kann zudem den Status einer Taste, wie von <a href="GetKeyState.htm">GetKeyState</a> gesehen, nicht ändern, es sei denn, die Tastendrücke werden an eines der eigenen Fenster des Skripts gesendet. Selbst dann können Änderungen an den linken/rechten Modifikatortasten (z. B. RControl) nur über ihre neutralen Gegenstücke (z. B. Control) erkannt werden. Außerdem gelten für SendPlay noch weitere Einschränkungen, die auf der <a href="SendMode.htm#Play">SendMode-Seite</a> zu finden sind.</p>
<p>Im Gegensatz zu <a href="#SendInputDetail">SendInput</a> und <a href="#SendEvent">SendEvent</a> kann der Benutzer ein SendPlay durch Drücken von <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>Entf</kbd> oder <kbd>Strg</kbd>+<kbd>Esc</kbd> unterbrechen. In diesem Fall werden die restlichen Tastendrücke nicht gesendet, aber das Skript weiter ausgeführt, als wäre nichts geschehen.</p>
<p>Obwohl SendPlay in der Lage ist, LWin- und RWin-Ereignisse zu senden, werden diese direkt an das aktive Fenster gesendet, anstatt ihre native Betriebssystemfunktion durchzuführen. Um das zu umgehen, verwenden Sie <a href="#SendEvent">SendEvent</a>. <code>SendEvent "#r"</code> beispielsweise würde das Ausführen-Dialogfenster des Startmenüs anzeigen.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="SendMode.htm">SendMode</a>, <a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>, <a href="../misc/EscapeChar.htm">Escapesequenzen (z. B. `n)</a>, <a href="ControlSend.htm">ControlSend</a>, <a href="BlockInput.htm">BlockInput</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="WinActivate.htm">WinActivate</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Schreibt eine zweizeilige Signatur.</p>
<pre>Send "Mit freundlichen Grüßen,{enter}Max Mustermann"</pre>
</div>

<div class="ex" id="ExModifier">
<p><a class="ex_number" href="#ExModifier"></a> Wählt Datei-&gt;Speichern im Menü aus (ALT+D, gefolgt von S).</p>
<pre>Send "!ds"</pre>
</div>

<div class="ex" id="ExBrace">
<p><a class="ex_number" href="#ExBrace"></a> Springt an das Ende des Textes und sendet viermal UMSCHALT+NACH-LINKS.</p>
<pre>Send "{End}+{Left 4}"</pre>
</div>

<div class="ex" id="ExSendInputRaw">
<p><a class="ex_number" href="#ExSendInputRaw"></a> Sendet eine lange Reihe von <a href="#Raw">Rohzeichen</a> mit der schnellsten Methode.</p>
<pre><a href="#SendInputDetail">SendInput</a> "{Raw}Eine lange Reihe von Rohzeichen, die mit der schnellsten Methode gesendet wurden."</pre>
</div>

</body>
</html>

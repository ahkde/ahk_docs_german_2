<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Array-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Ein Array-Objekt enthält eine Liste oder Sequenz von Werten." />
<meta name="ahk:equiv-v1" content="objects/Object.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Array-Objekt</h1>
<pre class="NoIndent">class Array extends Object</pre>

<p>Ein <strong>Array</strong>-Objekt enthält eine Liste oder Sequenz von Werten.</p>
<p>Der Zugriff auf Werte erfolgt anhand ihrer Position innerhalb des Arrays (auch bekannt als <em>Array-Index</em>); Position 1 ist das erste Element.</p>
<p>Häufig werden Arrays erstellt, indem man eine Liste von Werten mit eckigen Klammern umschließt. Zum Beispiel:</p>
<pre>veg := ["Spargel", "Brokkoli", "Gurke"]
Loop veg.Length
    MsgBox veg[A_Index]</pre>
<p>Ein negativer Index kann genutzt werden, um auf Elemente in umgekehrter Richtung zuzugreifen; -1 ist das letzte Element, -2 ist das vorletzte Element, und so weiter.</p>
<p>Der Versuch, einen Array-Index zu verwenden, der außerhalb der Grenzen liegt (z. B. 0 oder wenn sein absoluter Wert größer als die <a href="#Length">Länge</a> des Arrays ist), wird als Fehler angesehen und führt dazu, dass ein <a href="Error.htm#IndexError">IndexError</a> ausgelöst wird. Der beste Weg, neue Elemente zum Array hinzuzufügen, ist das Aufrufen von <a href="#InsertAt">InsertAt</a> oder <a href="#Push">Push</a>. Zum Beispiel:</p>
<pre>Benutzer := Array()
Benutzer.Push A_UserName
MsgBox Benutzer[1]</pre>
<p>Ein Array kann auch erweitert werden, indem man <a href="#Length">Length</a> einen größeren Wert zuweist. Dadurch ändert sich, welche Indizes gültig sind, allerdings wird <a href="#Has">Has</a> anzeigen, dass die neuen Elemente keinen Wert haben. Elemente ohne Wert werden typischerweise für <a href="../Functions.htm#VariadicCall">variadische Aufrufe</a> oder von <a href="../Functions.htm#Variadic">variadischen Funktionen</a> verwendet.</p>
<p>"ArrayObj" wird hier stellvertretend für ein beliebiges Array-Objekt verwendet, da "Array" die Klasse selbst ist.</p>
<p>Zusätzlich zu den Methoden und Eigenschaften, die von <a href="Object.htm">Object</a> geerbt werden, haben Array-Objekte die folgenden vordefinierten Methoden und Eigenschaften.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#StaticMethods">Statische Methoden</a>:
    <ul>
      <li><a href="#Call">Call</a>: Erstellt ein neues Array, das die angegebenen Werte enthält.</li>
    </ul>
  </li>
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#Clone">Clone</a>: Gibt eine flache Kopie eines Arrays zurück.</li>
      <li><a href="#Delete">Delete</a>: Entfernt den Wert eines Array-Elements und bewirkt, dass der Index keinen Wert mehr hat.</li>
      <li><a href="#Has">Has</a>: Gibt True zurück, wenn der angegebene Index gültig ist und an dieser Stelle ein Wert steht.</li>
      <li><a href="#InsertAt">InsertAt</a>: Fügt einen oder mehrere Werte auf einer bestimmten Position ein.</li>
      <li><a href="#Pop">Pop</a>: Entfernt und gibt das letzte Array-Element zurück.</li>
      <li><a href="#Push">Push</a>: Fügt Werte an das Ende eines Arrays an.</li>
      <li><a href="#RemoveAt">RemoveAt</a>: Entfernt Elemente aus einem Array.</li>
      <li><a href="#__New">__New</a>: Fügt Elemente an. Äquivalent zu Push.</li>
      <li><a href="#__Enum">__Enum</a>: Enumeriert Array-Elemente.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#Length">Length</a>: Ermittelt oder bestimmt die Länge eines Arrays.</li>
      <li><a href="#Capacity">Capacity</a>: Ermittelt oder bestimmt die aktuelle Kapazität eines Arrays.</li>
      <li><a href="#__Item">__Item</a>: Ermittelt oder bestimmt den Wert eines Array-Elements.</li>
    </ul>
  </li>
</ul>

<h2 id="StaticMethods">Statische Methoden</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>Erstellt ein neues Array, das die angegebenen Werte enthält.</p>
<pre class="Syntax">ArrayObj := <span class="func">Array</span>(<span class="optional">Wert, Wert2, ..., Wert<i>N</i></span>)</pre>
<p>Parameter werden durch <a href="#__New">__New</a> definiert.</p>
</div>

<h2 id="Methods">Methoden</h2>

<div class="methodShort" id="Clone"><h3>Clone</h3>
<p>Gibt eine flache Kopie eines Arrays zurück.</p>
<pre class="Syntax">Klon := ArrayObj.<span class="func">Clone</span>()</pre>
<p>Alle Array-Elemente werden in das neue Array kopiert. Objekt<em>referenzen</em> werden kopiert (wie bei einer normalen Zuweisung), nicht die Objekte selbst.</p>
<p>Eigene Eigenschaften, eigene Methoden und Base werden gemäß <a href="Object.htm#Clone">Obj.Clone</a> kopiert.</p>
</div>

<div class="methodShort" id="Delete"><h3>Delete</h3>
<p>Entfernt den Wert eines Array-Elements und bewirkt, dass der Index keinen Wert mehr hat.</p>
<pre class="Syntax">ArrayObj.<span class="func">Delete</span>(Index)</pre>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein gültiger Array-Index.</p>
  </dd>
</dl>
<p>Gibt den entfernten Wert zurück (leer, wenn es keinen gibt).</p>
<p>Delete hat keinen Einfluss auf die <a href="#Length">Länge</a> des Arrays.</p>
<p>Es wird ein <a href="Error.htm#ValueError">ValueError</a> ausgelöst, wenn <em>Index</em> außerhalb des Bereichs liegt.</p>
</div>

<div class="methodShort" id="Has"><h3>Has</h3>
<p>Gibt True zurück, wenn der angegebene Index gültig ist und an dieser Stelle ein Wert steht, ansonsten False.</p>
<pre class="Syntax">ArrayObj.<span class="func">Has</span>(Index)</pre>
</div>

<div class="methodShort" id="InsertAt"><h3>InsertAt</h3>
<p>Fügt einen oder mehrere Werte auf einer bestimmten Position ein.</p>
<pre class="Syntax">ArrayObj.<span class="func">InsertAt</span>(Index, Wert1 <span class="optional">, Wert2, ... Wert<i>N</i></span>)</pre>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Position, auf der <em>Wert1</em> eingefügt werden soll. Nachfolgende Werte werden auf Pos+1, Pos+2, etc. eingefügt. Die Angabe eines Index von 0 ist das gleiche wie, als würde man <a href="#Length">Length</a> + 1 angeben.</p>
  </dd>
  <dt>Wert1 ...</dt>
  <dd>
    <p>Ein oder mehrere Werte, die eingefügt werden sollen. Um einen Array mit Werten einzufügen, übergeben Sie <code><a href="../Functions.htm#VariadicCall">dasArray*</a></code> als letzten Parameter.</p>
  </dd>
</dl>
<p>InsertAt ist das Gegenstück von <a href="#RemoveAt">RemoveAt</a>.</p>
<p>Alle Elemente, die sich auf oder rechts neben <em>Index</em> befinden, werden nach rechts verschoben. Fehlende Parameter werden ebenfalls eingefügt, aber ohne Wert. Zum Beispiel:</p>
<pre>x := []
x.InsertAt(1, "A", "B") <em>; =&gt;  ["A", "B"]</em>
x.InsertAt(2, "C")      <em>; =&gt;  ["A", "C", "B"]</em>

<em>; Fehlende Elemente bleiben erhalten:</em>
x := ["A", , "C"]
x.InsertAt(2, "B")      <em>; =&gt;  ["A", "B",    , "C"]</em>

x := ["C"]
x.InsertAt(1, , "B")    <em>; =&gt;  [   , "B", "C"]</em></pre>
<p>Es wird ein <a href="Error.htm#ValueError">ValueError</a> ausgelöst, wenn <em>Index</em> kleiner als <code>-ArrayObj.Length</code> oder größer als <code>ArrayObj.Length + 1</code> ist. Bei einem Array mit z. B. 3 Elementen muss <em>Index</em> im Bereich von -3 bis 4 liegen.</p>
</div>

<div class="methodShort" id="Pop"><h3>Pop</h3>
<p>Entfernt und gibt das letzte Array-Element zurück.</p>
<pre class="Syntax">Wert := ArrayObj.<span class="func">Pop</span>()</pre>
<p>Alle folgenden Zeilen sind äquivalent:</p>
<pre>Wert := ArrayObj.Pop()
Wert := ArrayObj.RemoveAt(ArrayObj.Length)
Wert := ArrayObj.RemoveAt(-1)</pre>
<p>Wenn das Array leer ist (<a href="#Length">Length</a> ist 0), wird ein <a href="Error.htm">Error</a> ausgelöst.</p>
</div>

<div class="methodShort" id="Push"><h3>Push</h3>
<p>Fügt Werte an das Ende eines Arrays an.</p>
<pre class="Syntax">ArrayObj.<span class="func">Push</span>(<span class="optional">Wert, Wert2, ..., Wert<i>N</i></span>)</pre>
<dl>
  <dt>Wert ...</dt>
  <dd><p>Ein oder mehrere Werte, die eingefügt werden sollen. Um einen Array mit Werten einzufügen, übergeben Sie <code><a href="../Functions.htm#VariadicCall">dasArray*</a></code> als letzten Parameter.</p></dd>
</dl>
</div>

<div class="methodShort" id="RemoveAt"><h3>RemoveAt</h3>
<p>Entfernt Elemente aus einem Array.</p>
<pre class="Syntax">ArrayObj.<span class="func">RemoveAt</span>(Index <span class="optional">, Länge</span>)</pre>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Der Index des Wertes oder der Werte, die entfernt werden sollen.</p>
  </dd>
  
  <dt>Länge</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Länge des Wertebereichs, der entfernt werden soll. Lässt man diesen Parameter weg, wird nur ein Element entfernt.</p>
  </dd>
</dl>
<p>Lässt man <em>Länge</em> weg, wird der entfernte Wert zurückgegeben (leer, wenn keine entfernt wurden). Andernfalls gibt es keinen Rückgabewert.</p>
<p>RemoveAt ist das Gegenstück der <a href="#InsertAt">InsertAt</a>.</p>
<p>Es wird ein <a href="Error.htm#ValueError">ValueError</a> ausgelöst, wenn der via <em>Index</em> und <em>Länge</em> angegebene Bereich nicht vollständig innerhalb der aktuellen Grenzen des Arrays liegt.</p>
<p>Die restlichen Elemente auf der rechten Seite von <em>Pos</em> werden um den via <em>Länge</em> definierten Wert (oder standardmäßig um 1) nach links verschoben. Zum Beispiel:</p>
<pre>x := ["A", "B"]
MsgBox x.RemoveAt(1)  <em>; A</em>
MsgBox x[1]           <em>; B</em>

x := ["A", , "C"]
MsgBox x.RemoveAt(1, 2)  <em>; 1</em>
MsgBox x[1]              <em>; C</em></pre>
</div>

<div class="methodShort" id="__New"><h3>__New</h3>
<p>Fügt Elemente an. Äquivalent zu <a href="#Push">Push</a>.</p>
<pre class="Syntax">ArrayObj.<span class="func">__New</span>(<span class="optional">Wert, Wert2, ..., Wert<i>N</i></span>)</pre>
<p>Diese Methode existiert zur Unterstützung von <a href="#Call">Call</a> und ist nicht für den direkten Aufruf vorgesehen. Siehe <a href="../Objects.htm#Custom_NewDelete">Konstruktion und Destruktion</a>.</p>
</div>

<div class="methodShort" id="__Enum"><h3>__Enum</h3>
<p>Enumeriert Array-Elemente.</p>
<pre class="Syntax">For Wert in ArrayObj</pre>
<pre class="Syntax">For Index, Wert in ArrayObj</pre>
<p>Gibt einen neuen <a href="Enumerator.htm">Enumerator</a> zurück. Diese Methode wird für gewöhnlich nicht direkt aufgerufen. Stattdessen wird das Array-Objekt direkt an eine <a href="../commands/For.htm">For-Schleife</a> übergeben, die __Enum einmal aufruft und dann den Enumerator einmal für jede Wiederholung der Schleife aufruft. Jeder Aufruf des Enumerators gibt das nächste Array-Element zurück. Die Variablen der For-Schleife entsprechen den folgenden Parametern des Enumerators:</p>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Der Array-Index, typischerweise das gleiche wie <a href="../Variables.htm#Index">A_Index</a>. Dies gibt es nur im Zwei-Parameter-Modus.</p>
  </dd>
  <dt>Wert</dt>
  <dd>
    <p>Der Wert (wenn es keinen Wert gibt, bekommt <em>Wert</em> den Status <a href="../Concepts.htm#uninitialized-variables">uninitialisiert</a>).</p>
  </dd>
</dl>
</div>

<h2 id="Properties">Eigenschaften</h2>

<div class="methodShort" id="Length"><h3>Length</h3>
<p>Ermittelt oder bestimmt die Länge eines Arrays.</p>
<pre class="Syntax">Länge := ArrayObj.<span class="func">Length</span></pre>
<pre class="Syntax">ArrayObj.<span class="func">Length</span> := Länge</pre>
<p>Die Länge berücksichtigt Elemente, die keinen Wert haben. Durch Erhöhung der Länge ändert sich, welche Indizes gültig sind, allerdings haben die neuen Elemente keinen Wert (wie von <a href="#Has">Has</a> angezeigt).</p>
<pre>
MsgBox ["A", "B", "C"].Length  <em>;  3</em>
MsgBox ["A",    , "C"].Length  <em>;  3</em>
</pre>
</div>

<div class="methodShort" id="Capacity"><h3>Capacity</h3>
<p>Ermittelt oder bestimmt die aktuelle Kapazität eines Arrays.</p>
<pre class="Syntax">ArrayObj.<span class="func">Capacity</span> := MaxElemente</pre>
<pre class="Syntax">MaxElemente := ArrayObj.<span class="func">Capacity</span></pre>
<dl>
	<dt>MaxElemente</dt>
	<dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl von Elementen, die das Array beinhalten soll, bevor es automatisch erweitert werden muss. Wenn ein Wert kleiner als <a href="#Length">Length</a> gesetzt wird, werden Elemente entfernt.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="__Item"><h3>__Item</h3>
<p>Ermittelt oder bestimmt den Wert eines Array-Elements.</p>
<pre class="Syntax">Wert := ArrayObj[Index]</pre>
<pre class="Syntax">ArrayObj[Index] := Wert</pre>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein gültiger Array-Index; also ein Integer mit einem Absolutwert im Bereich von 1 bis <a href="#Length">Length</a>.</p>
    <p>Ein negativer Index kann genutzt werden, um auf Elemente in umgekehrter Richtung zuzugreifen; -1 ist das letzte Element, -2 ist das vorletzte Element, und so weiter.</p>
    <p>Der Versuch, einen Index zu verwenden, der außerhalb der Grenzen liegt (z. B. 0 oder wenn sein absoluter Wert größer als die <a href="#Length">Länge</a> des Arrays ist), wird als Fehler angesehen und führt dazu, dass ein <a href="Error.htm#IndexError">IndexError</a> ausgelöst wird.</p>
  </dd>
</dl>
<p>Der Eigenschaftsname __Item wird typischerweise weggelassen, wie oben gezeigt, ist aber nützlich, um die Eigenschaft zu überschreiben.</p>
</div>

</body>
</html>

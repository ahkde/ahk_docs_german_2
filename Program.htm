<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Verwendung des Programms | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie mehr über das Erstellen, Bearbeiten und Ausführen eines Skripts, das Tray-Symbol, das Hauptfenster, die Verwendung der Befehlszeile, die Portabilität und die Installer-Optionen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Verwendung des Programms</h1>
<p>AutoHotkey macht nichts von alleine; es braucht ein Skript, das ihm sagt, was es tun soll. Ein Skript ist lediglich eine reine Textdatei mit der Dateiendung <code>.ahk</code>, die Instruktionen für das Programm enthält - so ähnlich wie eine Konfigurationsdatei, nur viel mächtiger. Das Wenigste, was ein Skript tun kann, ist eine einzelne Aktion ausführen und sich dann beenden. Die meisten Skripte jedoch definieren eine Reihe von <a href="Hotkeys.htm">Hotkeys</a>, von denen jeder eine oder mehrere Aktionen ausführt, sobald er gedrückt wird.</p>
<pre>#z::Run "https://www.autohotkey.com"  <em>; WIN+Z</em>

^!n::  <em>; STRG+ALT+N</em>
{
    if WinExist("Unbenannt - Editor")
        WinActivate
    else
        Run "Notepad"
}</pre>
<p><strong>Tipp:</strong> Sofern es Ihr Browser unterstützt, können Sie jeden Codeblock (wie der oben) als Skriptdatei herunterladen, indem Sie den Mauszeiger über den Codeblock bewegen und oben rechts auf die Schaltfläche klicken.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#create">Ein Skript erstellen</a></li>
  <li><a href="#edit">Ein Skript editieren (bearbeiten)</a></li>
  <li><a href="#run">Ein Skript starten</a></li>
  <li><a href="#tray-icon">Tray-Symbol</a></li>
  <li><a href="#main-window">Hauptfenster</a></li>
  <li><a href="#embedded-scripts">Eingebettete Skripte</a></li>
  <li><a href="#cmd">Verwendung der Befehlszeile</a></li>
  <li><a href="#portability">Portabilität von AutoHotkey.exe</a></li>
  <li><a href="#launcher">Launcher</a></li>
  <li><a href="#dash">Dash</a></li>
  <li><a href="#newscript">New Script</a></li>
  <li><a href="#install">Installation</a>
  <ul>
    <li><a href="#Installer_uiAccess">Mit UI-Access starten</a></li>
  </ul></li>
</ul>

<h2 id="create">Ein Skript erstellen</h2>
<p>Es gibt mehrere Möglichkeiten, wie man eine Skriptdatei erstellen kann:</p>
<ul>
  <li>Speichern Sie in Notepad (oder in einem anderen <a href="commands/Edit.htm#Editors">Texteditor</a>) eine Datei mit der Dateiendung <code>.ahk</code>. Auf manchen Systemen müssen Sie eventuell den Namen in Anführungszeichen setzen, um sicherzustellen, dass der Editor keine weitere Dateiendung (wie z. B. .txt) hinzufügt.
  <p class="note">Achten Sie darauf, die Datei als UTF-8 mit BOM zu speichern, wenn Sie vorhaben, ASCII-fremde Zeichen zu verwenden. Weitere Informationen finden Sie in der <a href="FAQ.htm#nonascii">FAQ</a>.</p></li>
  <li>Klicken Sie im Explorer mit der rechten Maustaste in den leeren Bereich des Ordners, wo Sie das Skript erstellen möchten, und wählen Sie dann <strong>Neu</strong> und <strong>AutoHotkey Script</strong> aus. Sie können dann einen Namen für das Skript eingeben (achten Sie darauf, die Dateiendung <code>.ahk</code> nicht zu löschen, falls sie sichtbar ist).</li>
</ul>
<p class="note">Weitere Informationen zum Schreiben eines Skripts finden Sie unter <a href="Language.htm">Skriptsprache</a>.</p>

<h2 id="edit">Ein Skript editieren (bearbeiten)</h2>
<p>Klicken Sie mit der rechten Maustaste auf die Skriptdatei und wählen Sie <strong>Edit Script</strong> aus, um ein Skript zum Editieren zu öffnen. Wenn das Skript bereits läuft, können Sie die <a href="commands/Edit.htm">Edit</a>-Funktion verwenden oder mit der rechten Maustaste auf das <a href="#tray-icon">Tray-Symbol</a> des Skripts klicken und <strong>Edit Script</strong> auswählen. Standardmäßig wird dadurch Notepad geöffnet, allerdings können Sie das durch Ändern eines Registry-Eintrags ändern, wie <a href="commands/Edit.htm#ExDefaultEditor">hier</a> gezeigt. Natürlich können Sie jederzeit Ihren Texteditor starten und dann das Skript wie jede andere Textdatei öffnen.</p>
<p>Nachdem Sie ein Skript editiert haben, müssen Sie das Skript starten oder <a href="commands/Reload.htm">neu laden</a>, damit die Änderungen wirksam werden. Ein laufendes Skript kann in der Regel über das <a href="#tray-icon">Tray-Menü</a> neu geladen werden.</p>

<h2 id="run">Ein Skript starten</h2>
<p>Sofern AutoHotkey installiert ist, gibt es mehrere Möglichkeiten, ein Skript zu starten:</p>
<ul>
<li>Machen Sie einen Doppelklick auf eine Skriptdatei (oder Verknüpfung einer Skriptdatei) im Explorer.</li>
<li>Rufen Sie AutoHotkey.exe in der Befehlszeile auf und übergeben Sie den Dateinamen des Skripts als <a href="Scripts.htm#cmd">Befehlszeilenparameter</a>.</li>
<li>Nachdem Sie <a href="Scripts.htm#defaultfile">das Standardskript</a> erstellt haben, können Sie AutoHotkey über die Verknüpfung im Startmenü ausführen, um es zu starten.</li>
<li>Wenn AutoHotkey an die Taskleiste oder das Startmenü unter Windows 7 oder höher angeheftet ist, können aktuelle oder angeheftete Skripte über die Sprungliste des Programms gestartet werden.</li>
</ul>
<p>Die meisten Skripte haben nur einen Effekt, während sie laufen. Verwenden Sie das <a href="#tray-icon">Tray-Menü</a> oder die <a href="commands/ExitApp.htm">ExitApp</a>-Funktion, um ein Skript zu beenden. Skripte sind auch gezwungen, sich zu beenden, wenn Windows heruntergefahren wird. Um ein Skript nach der Anmeldung des Benutzers automatisch starten zu lassen, ist es am einfachsten, eine Verknüpfung der Skriptdatei im <a href="Variables.htm#Startup">Autostart</a>-Ordner zu platzieren.</p>
<p>Skripte können auch <a href="Scripts.htm#ahk2exe">kompiliert</a> werden; das heißt, dass ein Skript zusammen mit einer AutoHotkey-Binärdatei zu einer eigenständigen ausführbaren Datei (.exe) kombiniert werden kann.</p>

<h2 id="tray-icon">Tray-Symbol</h2>
<p>Standardmäßig fügt jedes Skript ein eigenes Symbol in den Infobereich der Taskleiste (auch bekannt als Tray) ein.</p>
<p>Das Tray-Symbol sieht normalerweise wie folgt aus (aber die Farbe oder der Buchstabe ändert sich, wenn das Skript <a href="commands/Pause.htm">pausiert</a> oder <a href="commands/Suspend.htm">suspendiert</a> wird): <img src="static/ahk16.png" alt="H"></p>
<p>Klicken Sie mit der rechten Maustaste auf das Tray-Symbol, um das Tray-Menü anzuzeigen, das standardmäßig die folgenden Optionen enthält:</p>
<ul>
<li>Open - Öffnet das <a href="#main-window">Hauptfenster</a> des Skripts.</li>
<li>Help - Öffnet die Offline-Hilfe von AutoHotkey.</li>
<li>Window Spy - Zeigt verschiedene Informationen über ein Fenster an.</li>
<li>Reload Script - Lädt das Skript neu. Siehe <a href="commands/Reload.htm">Reload</a>.</li>
<li>Edit Script - Öffnet das Skript im Texteditor. Siehe <a href="commands/Edit.htm">Edit</a>.</li>
<li>Suspend Hotkeys - Deaktiviert oder aktiviert Hotkeys via <a href="commands/Suspend.htm">Suspend</a>.</li>
<li>Pause Script - Pausiert das Skript oder setzt es fort. Siehe <a href="commands/Pause.htm">Pause</a>.</li>
<li>Exit - Beendet das Skript.</li>
</ul>
<p>Standardmäßig bewirkt ein Doppelklick auf das Tray-Symbol, dass das <a href="#main-window">Hauptfenster</a> des Skripts angezeigt wird.</p>
<p>Das Verhalten und Aussehen des Tray-Symbols und -Menüs können angepasst werden:</p>
<ul>
  <li><a href="Variables.htm#TrayMenu">A_TrayMenu</a> gibt ein <a href="objects/Menu.htm">Menu-Objekt</a> zurück, das genutzt werden kann, um das Tray-Menü anzupassen.</li>
  <li><a href="Variables.htm#IconHidden">A_IconHidden</a> oder die <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a>-Direktive kann genutzt werden, um das Tray-Symbol zu verstecken (oder sichtbar zu machen).</li>
  <li><a href="Variables.htm#IconTip">A_IconTip</a> kann genutzt werden, um den Tooltiptext des Tray-Symbols zu ändern.</li>
  <li><a href="commands/TraySetIcon.htm">TraySetIcon</a> kann genutzt werden, um das Symbol zu ändern.</li>
</ul>

<h2 id="main-window">Hauptfenster</h2>
<p>Das Hauptfenster des Skripts ist normalerweise versteckt, aber es kann über das <a href="#tray-icon">Tray-Symbol</a> oder eine der unten aufgeführten Funktionen sichtbar gemacht werden, um Zugang zu Informationen zu erhalten, die für das Debuggen des Skripts nützlich sind. Folgende Elemente, die im <strong>View</strong>-Menüelement zu finden sind, werden im Hauptfenster angezeigt:</p>
<ul>
<li>Lines most recently executed - Die aktuell ausgeführten Zeilen. Siehe <a href="commands/ListLines.htm">ListLines</a>.</li>
<li>Variables and their contents - Variablen und ihre Inhalte. Siehe <a href="commands/ListVars.htm">ListVars</a>.</li>
<li>Hotkeys and their methods - Hotkeys und ihre Methoden. Siehe <a href="commands/ListHotkeys.htm">ListHotkeys</a>.</li>
<li>Key history and script info - Tastenverlauf und Skript-Infos. Siehe <a href="commands/KeyHistory.htm">KeyHistory</a>.</li>
</ul>
<p><strong>Bekanntes Problem:</strong> Die Tastaturkurzbefehle der Menüpunkte funktionieren nicht, wenn das Skript ein <a href="commands/MsgBox.htm">Mitteilungsfenster</a> oder ein anderes Dialogfenster anzeigt.</p>
<p>Die interne Variable <a href="Variables.htm#ScriptHwnd">A_ScriptHwnd</a> enthält die HWND-Nummer (eindeutige ID) des Skript-Hauptfensters.</p>
<p>Schließt man dieses Fenster mit <a href="commands/WinClose.htm">WinClose</a> (auch von einem anderen Skript aus), wird das Skript beendet, aber die meisten anderen Methoden verstecken das Fenster und lassen das Skript laufen.</p>
<p>Wenn das Hauptfenster minimiert wird, wird es automatisch versteckt. Dieses Verhalten ist notwendig, um zu verhindern, dass untergeordnete Fenster (z. B. GUI-Fenster oder einige Dialogfenster) automatisch minimiert werden, und um zu bewirken, dass die Schaltfläche in der Taskleiste des Hauptfensters versteckt wird. Um das Hauptfenster stattdessen normal minimieren zu lassen, überschreiben Sie das Standardverhalten mit <a href="commands/OnMessage.htm">OnMessage</a>. Zum Beispiel:</p>
<pre>; Dies verhindert, dass das Hauptfenster beim Minimieren versteckt wird:
OnMessage 0x0112, AutoMinimierungVerhindern <em>; WM_SYSCOMMAND = 0x0112</em>
OnMessage 0x0005, AutoMinimierungVerhindern <em>; WM_SIZE = 0x0005
; Dies verhindert, dass untergeordnete GUI-Fenster (außer Dialogfenster) automatisch minimiert werden:</em>
OnMessage 0x0018, AutoMinimierungVerhindern
Persistent

AutoMinimierungVerhindern(wParam, lParam, uMsg, hwnd) {
    if (uMsg = 0x0112 &amp;&amp; wParam = 0xF020 &amp;&amp; hwnd = A_ScriptHwnd) { <em>; SC_MINIMIZE = 0xF020</em>
        WinMinimize
        return 0 <em>; Verhindern, dass das Hauptfenster versteckt wird.</em>
    }
    if (uMsg = 0x0005 &amp;&amp; wParam = 1 &amp;&amp; hwnd = A_ScriptHwnd) <em>; SIZE_MINIMIZED = 1</em>
        return 0 <em>; Verhindern, dass das Hauptfenster versteckt wird.</em>
    if (uMsg = 0x0018 &amp;&amp; lParam = 1) <em>; SW_PARENTCLOSING = 1</em>
        return 0 <em>; Verhindern, dass untergeordnete Fenster versteckt werden.</em>
}</pre>

<h3 id="title">Titel des Hauptfensters</h3>
<p>Der Titel des Skript-Hauptfensters wird von Mechanismen wie <a href="commands/_SingleInstance.htm">#SingleInstance</a> und <a href="commands/Reload.htm">Reload</a> verwendet, um andere Instanzen desselben Skripts zu identifizieren. Das <a href="commands/WinSetTitle.htm">Ändern des Titels</a> verhindert, dass das Skript als solches identifiziert wird. Welcher Titel standardmäßig verwendet wird, hängt davon ab, wie das Skript geladen wurde:</p>
<table class="info">
  <tr><th>Geladen aus</th><th>Titelausdruck</th><th>Beispiel</th></tr>
  <tr><td>.ahk-Datei</td><td><code>A_ScriptFullPath " - AutoHotkey v" A_AhkVersion</code></td><td>E:\Mein Skript.ahk - AutoHotkey v1.1.33.09</td></tr>
  <tr><td>Hauptressource (kompiliertes Skript)</td><td><code>A_ScriptFullPath</code></td><td>E:\Mein Skript.exe</td></tr>
  <tr><td>Jede andere Ressource</td><td><code>A_ScriptFullPath " - " A_LineFile</code></td><td>E:\Mein AutoHotkey.exe - *INTERNES-TOOL.AHK</td></tr>
</table>
<p>Der folgende Code veranschaulicht, wie der Standardtitel mit dem Skript selbst ermittelt werden kann (wobei der tatsächliche Titel mit <a href="commands/WinGetTitle.htm">WinGetTitle</a> abgerufen werden kann):</p>
<pre>
Titel := A_ScriptFullPath
if !A_IsCompiled
    Titel .= " - AutoHotkey v" A_AhkVersion
<em>; Für ein korrektes Ergebnis muss dies von der auszuführenden Ressource ausgewertet werden,
; nicht von einem #Include (es sei denn, das #Include wurde von Ahk2Exe in das Skript eingebunden):</em>
else if SubStr(A_LineFile, 1, 1) = "*" &amp;&amp; A_LineFile != "*#1"
    Titel .= " - " A_LineFile
</pre>

<h2 id="embedded-scripts">Eingebettete Skripte</h2>
<p>Um Skripte in eine Standard-AutoHotkey-EXE-Datei einzubetten, fügen Sie die Skripte als Win32-Ressourcen (RCDATA) hinzu. Ein eingebettetes Skript kann in der Befehlszeile angegeben werden, oder mit <a href="commands/_Include.htm">#Include</a> durch Angabe eines Sternchens (*) gefolgt vom Ressourcennamen. Handelt es sich um eine Integer-ID, muss der Ressourcenname ein Rautezeichen (#) gefolgt von einer Dezimalzahl sein.</p>
<p>Das Programm kann automatisch Skriptcode aus den folgenden Ressourcen laden, wenn diese in der Datei vorhanden sind:</p>
<table class="info">
  <tr><th>ID</th><th>Angabe</th><th>Verwendung</th></tr>
  <tr>
    <td>1</td><td>*#1</td>
    <td>Dies ist das Mittel, mit dem ein <a href="Scripts.htm#ahk2exe">kompiliertes Skript</a> aus einer EXE-Datei erstellt wird. Dieses Skript wird automatisch ausgeführt, und die meisten Befehlszeilenoptionen werden an das Skript übergeben, anstatt vom Programm interpretiert zu werden. Externe Skripte und alternative eingebettete Skripte können mit der Befehlszeilenoption <a href="Scripts.htm#SlashScript">/script</a> ausgeführt werden.</td>
  </tr>
  <tr>
    <td>2</td><td>*#2</td>
    <td>Wenn vorhanden, wird dieses Skript automatisch vor jedem Skript, das das Programm lädt, und vor jeder mit <a href="Scripts.htm#SlashInclude">/include</a> angegebenen Datei "eingebunden".</td>
  </tr>
</table>
<p>Wenn die Quelle des Hauptskripts eine eingebettete Ressource ist, verhält sich das Programm im Modus "kompiliertes Skript", mit der Ausnahme, dass <a href="Variables.htm#AhkPath">A_AhkPath</a> immer den Pfad der aktuellen EXE-Datei enthält (derselbe wie <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a>). Bei anderen Ressourcen außer *#1 wird der Ressourcenbezeichner in den <a href="#title">Titel des Hauptfensters</a> eingefügt, um <a href="commands/_SingleInstance.htm">#SingleInstance</a> und <a href="commands/Reload.htm">Reload</a> zu unterstützen.</p>
<p>Wenn <a href="Variables.htm#LineFile">A_LineFile</a> von einem Code referenziert wird, der aus einer eingebetteten Ressource stammt, enthält es ein Sternchen (*), gefolgt von dem Ressourcennamen.</p>

<h2 id="cmd">Verwendung der Befehlszeile</h2>
<p>Weitere Informationen zur Verwendung der Befehlszeile finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>, einschließlich einer Liste von Befehlszeilenoptionen, die das Verhalten des Programms beeinflussen.</p>

<h2 id="portability">Portabilität von AutoHotkey.exe</h2>
<p>Die Datei AutoHotkey.exe ist alles, was man braucht, um ein beliebiges .ahk-Skript zu starten.</p>
<p>Das Umbenennen von AutoHotkey.exe ändert auch die Tatsache, welches Skript <a href="Scripts.htm#defaultfile">standardmäßig</a> ausgeführt wird. Diese Methode kann als Alternative dienen, um ein Skript zu kompilieren, das auf einem Computer ohne installiertem AutoHotkey verwendet werden kann. Zum Beispiel führt <i>MeinSkript</i>.exe automatisch <i>MeinSkript</i>.ahk aus, wenn kein Dateiname angegeben ist.</p>

<h2 id="launcher">Launcher</h2>
<p>Der Launcher ermöglicht die gleichzeitige Nutzung von v1- und v2-Skripten auf einem System mit einer einzigen Dateiendung, ohne zwangsläufig eine Version zu bevorzugen oder unterschiedliche Methoden zum Starten von Skripten zu benötigen. Der Launcher sucht im Skript nach Anhaltspunkten bezüglich der verwendeten Version und lokalisiert anschließend eine geeignete EXE-Datei zum Starten des Skripts.</p>
<p>Wenn das Skript die <a href="commands/_Requires.htm">#Requires</a>-Direktive enthält, sucht der Launcher nach einer EXE-Datei, die die Anforderung erfüllt. Wenn nicht, analysiert der Launcher optional die Syntax. Er sucht nach Mustern, die nur in einer der beiden Hauptversionen gültig sind. Einige der üblichen auffindbaren Muster sind:</p>
<ul>
  <li>v1: <code>MsgBox, mit Komma</code>, <code>MsgBox % "kein Prozent am Ende"</code> und <code>Altmodische = Zuweisung</code>.</li>
  <li>v1: Mehrzeilige Hotkeys ohne geschweifte Klammern oder Funktionsdefinition.</li>
  <li>Übliche Direktiven wie #NoEnv und #If (v1) oder <a href="commands/_HotIf.htm">#HotIf</a> (v2).</li>
  <li>v2: Unzweideutige Nutzung von <a href="Scripts.htm#continuation-expr">Fortsetzung durch Umschließen</a> oder <a href="Scripts.htm#continuation-line">Fortsetzungsoperatoren am Zeilenende</a>.</li>
  <li>v2: Unzweideutige Nutzung von <code>'einfachen Anführungszeichen'</code> oder <a href="Variables.htm#fat-arrow">Fat-Arrow <code>=&gt;</code></a> in einem Ausdruck.</li>
</ul>
<p>Die Erkennung ist konservativ; wenn ein Fall mehrdeutig ist, wird er in der Regel ignoriert.</p>
<p>In allen anderen Fällen, in denen die Erkennung fehlschlägt, wird standardmäßig ein Menü angezeigt, das der Benutzer zum Auswählen einer Version nutzen kann. Dieses Standardverhalten kann abgeändert werden, um stattdessen entweder v1 oder v2 zu starten.</p>
<p><strong>Bekannte Einschränkungen:</strong></p>
<ul>
  <li>Es wird nur die Hauptdatei analysiert.</li>
  <li>Da es in v1 erlaubt ist, eine Zeile wie <code>/****/</code> einzufügen, aber <code>*/</code> am Zeilenende nur Kommentare in v2 schließt, kann eine solche Zeile dazu führen, dass ein Großteil des Skripts ignoriert wird (sowohl vom Launcher als auch vom v1-Interpreter).</li>
  <li>Es wird nur die Syntax analysiert, nicht die Semantik. So ist beispielsweise <code>xyz,</code> in v2 ungültig und wird daher als gültiger v1-Befehl ausgelegt. <code>xyz 1</code> könnte eine Funktionsanweisung in v2 sein, wird aber auch als gültiger v1-Befehl angesehen, und wird daher ignoriert.</li>
  <li>Da es sich bei den erkannten Mustern im Grunde um Syntaxfehler in einer Version handelt, wird ein Skript mit tatsächlichen Syntaxfehlern oder falsch gemischter Syntax eventuell falsch identifiziert.</li>
</ul>
<p class="note"><strong>Hinweis:</strong> Wenn Sie die erforderliche Version mit <a href="commands/_Requires.htm">#Requires</a> am Anfang der Hauptdatei deklarieren, entfällt jedwede Zweideutigkeit.</p>

<h3 id="launcher-config">Launch Settings</h3>
<p>Der Launcher kann in der Launch-Settings-GUI aktiviert, deaktiviert oder konfiguriert werden. Die GUI selbst ist über <a href="#dash">Dash</a> zugänglich.</p>
<p><em>Run all scripts with a specific interpreter</em> (alle Skripte mit einem bestimmten Interpreter starten) deaktiviert den Launcher und erlaubt dem Benutzer, eine EXE-Datei auszuwählen, mit der alle Skripte gestartet werden sollen, was dem traditionellen Weg entspricht. Wenn eine v1-EXE-Datei ausgewählt wird, sollte beachtet werden, dass das Starten aller Hilfsskripte erschwert wird, außer über die Verknüpfung "AutoHotkey" im Startmenü.</p>
<p><em>Auto-detect version when launching script</em> (Version beim Starten des Skripts automatisch erkennen) aktiviert den Launcher. Zusätzliche Einstellungen regeln, wie der Launcher den zu verwendenden Interpreter auswählt.</p>

<h2 id="dash">Dash</h2>
<p>Dash bietet Zugang zu Hilfsskripten und Dokumentation. Es kann nach der Installation über die "AutoHotkey"-Verknüpfung im Startmenü oder durch direktes Starten von UX\ui-dash.ahk im Installationsverzeichnis geöffnet werden. Momentan ist es nicht viel mehr als ein Menü mit den folgenden Menüpunkten, aber es könnte jederzeit erweitert werden, um Einstellmöglichkeiten für aktive Skripte oder andere praktische Funktionen bereitzustellen.</p>
<ul>
  <li>New script: Erstellen Sie ein neues Skript anhand einer Vorlage.</li>
  <li>Compile: Öffnet Ahk2Exe oder ermöglicht dessen automatisches Herunterladen und Installieren.</li>
  <li>Help files (F1): Zeigt ein Menü an, das Hilfedateien und Online-Dokumentation für v1 und v2 sowie alle anderen CHM-Dateien im Installationsverzeichnis enthält.</li>
  <li>Window spy</li>
  <li>Launch settings: Konfigurieren Sie den Launcher.</li>
  <li>Editor settings: Bestimmen Sie den Standardeditor für .ahk-Dateien.</li>
</ul>
<p>Beachten Sie, dass Dash zwar über die Startmenü-Verknüpfung gestartet wird, aber wenn es an die Taskleiste (oder an das Startmenü in Windows 7 oder 10) angeheftet ist, enthält die Sprungliste alle zuletzt mit den Shell-Verben <em>open</em>, <em>runas</em> oder <em>UIAccess</em> gestarteten Skripte (auf die normalerweise über das Explorer-Kontextmenü oder durch Doppelklicken auf eine Datei zugegriffen wird). Skripte können angeheftet werden, um schnell auf diese zugreifen zu können.</p>

<h2 id="newscript">New Script</h2>
<p>Die New-Script-GUI kann über Dash oder durch Rechtsklicken auf einen Ordner im Explorer und Auswählen von Neu → AutoHotkey Script aufgerufen werden. Die GUI kann genutzt werden, um eine neue Skriptdatei anhand einer vorinstallierten oder benutzerdefinierten Vorlage zu erstellen oder eine Vorlage optional zur Bearbeitung zu öffnen.</p>
<p>Wenn Sie auf eine Vorlage in der Liste rechtsklicken, stehen Ihnen folgende Optionen zur Verfügung:</p>
<ul>
  <li>Edit template: Öffnen Sie die Vorlage im Standardeditor. Handelt es sich um eine vorinstallierte Vorlage, wird eine editierbare Kopie erstellt, anstatt das Original zu öffnen.</li>
  <li>Hide template: Fügt den Namen der Vorlage zu einer Liste von Vorlagen hinzu, die nicht in der GUI angezeigt werden. Um eine Vorlage wieder sichtbar zu machen, löschen Sie den entsprechenden Registry-Wert unter <code>HKCU\Software\AutoHotkey\New\HideTemplate</code>.</li>
  <li>Set as default: Bestimmt eine Vorlage, die standardmäßig ausgewählt sein soll.</li>
</ul>
<p>Standardmäßig wird die GUI nach dem Erstellen einer Datei geschlossen, es sei denn, die STRG-Taste wird gedrückt gehalten.</p>
<p>Weitere Einstellungen können über die Schaltfläche "Settings" (Einstellungen) unten links in der GUI vorgenommen werden.</p>

<h3>Templates (Vorlagen)</h3>
<p>Vorlagendateien werden unter UX\Templates (vorinstalliert) und <em>%A_MyDocuments%</em>\AutoHotkey\Templates (benutzerdefiniert) abgerufen, wobei zu beachten ist, dass eine benutzerdefinierte Vorlage jede vorinstallierte Vorlage mit demselben Namen überschreibt. Wenn eine Datei unter <em>%A_WinDir%</em>\ShellNew\Template.ahk vorhanden ist, wird sie als "Legacy" angezeigt und kann durch eine benutzerdefinierte Vorlage mit diesem Namen überschrieben werden.</p>
<p>Jede Vorlage kann wie folgt eine INI-Sektion enthalten:</p>
<pre>/*
[NewScriptTemplate]
Description = Beschreibung
Execute = true|false|1|0
*/</pre>
<p>Wenn die INI-Sektion wie oben gezeigt mit <code>/*</code> beginnt und mit <code>*/</code> endet, ist sie nicht in der erstellten Datei enthalten.</p>
<p><strong>Description</strong> ist optional. Es wird in der GUI zusätzlich zum Namen der Datei angezeigt.</p>
<p><strong>Execute</strong> ist optional. Wenn diese Option "true" oder 1 ist, wird das Vorlagenskript mit zusätzlichen Informationen ausgeführt: <code>A_Args[1]</code> enthält den Pfad der zu erstellenden Datei und <code>A_Args[2]</code> enthält entweder "Create" oder "Edit", je nachdem, auf welche Schaltfläche der Benutzer geklickt hat. Das Vorlagenskript dient dazu, die Datei zu erstellen und sie ggf. zur Bearbeitung zu öffnen. Wenn das Vorlagenskript andere Dateien via <code>#Include</code> einbinden muss, können diese in einem Unterverzeichnis abgelegt werden, damit sie nicht in der Vorlagenliste angezeigt werden.</p>

<h2 id="install">Installation</h2>
<p>Dieser Installer und die dazugehörigen Skripte sind so konzipiert, dass mehrere Versionen von AutoHotkey koexistieren können. Der Installer bietet nur sehr wenige Optionen, da die meisten Dinge nach der Installation konfiguriert werden können. Bei der Installation müssen nur die folgenden Entscheidungen getroffen werden:</p>
<ul>
  <li>Wohin es installiert werden soll.</li>
  <li>Ob die Installation für alle Benutzer oder den aktuellen Benutzer erfolgen soll.</li>
</ul>
<p>Standardmäßig wird der Installer das Programm in "%A_ProgramFiles%\AutoHotkey" für alle Benutzer installieren. Dies wird empfohlen, da die UI-Access-Option voraussetzt, dass das Programm unter "Programme" installiert ist. Wenn der Installer noch nicht mit Adminrechten ausgeführt wird, versucht er, die Rechte beim Anklicken der Install-Schaltfläche zu erhöhen, was durch das Schildsymbol auf der Schaltfläche kenntlich gemacht wird.</p>
<p>Aktueller-Benutzer-Installationen erfordern keine Adminrechte, solange der Benutzer Schreibrechte auf das gewählte Verzeichnis hat. Das Standardverzeichnis für solche Installationen ist "%LocalAppData%\Programme\AutoHotkey".</p>

<h3 id="install_v1">Zusammen mit v1 installieren</h3>
<p>Es gibt zwei Möglichkeiten, v1 und v2 gemeinsam zu installieren:</p>
<ol>
  <li>Installieren Sie zuerst v1 und dann v2. In diesem Fall werden die v1-Dateien im Root des Installationsverzeichnisses belassen, um Probleme mit externen Tools oder Verknüpfungen, die auf den aktuellen Pfad angewiesen sind, zu vermeiden.</li>
  <li>Installieren Sie v1 als zusätzliche Version. Diese Option steht bei Installern ab v1.1.34.03 zur Verfügung. Alternativ können Sie auch die unten beschriebene <code>/install</code>-Option verwenden. Jede Version wird in ihr eigenes Unterverzeichnis installiert.</li>
</ol>
<p>Wenn Sie einen Installer der Version v1.1.34.02 oder älter (oder eine benutzerdefinierte Installation mit v1.1.34.03 oder neuer) ausführen, werden einige der vom v2-Installer gesetzten Registry-Werte überschrieben, z. B. die Versionsnummer, der Uninstaller-Eintrag und Teile der Dateitypregistrierung. So ein Installer wird auch den v1-Uninstaller registrieren, der nicht in der Lage ist, beide Versionen korrekt zu deinstallieren. Um v2 erneut zu registrieren, führen Sie einen beliebigen v2-Installer oder UX\install.ahk via AutoHotkey32.exe oder AutoHotkey64.exe aus.</p>

<h3 id="installdef">Standardversion</h3>
<p>Im Gegensatz zu einer v1-Installation wird beim Installieren keine Standardversion ausgewählt. Dies wird stattdessen vom Launcher dynamisch gehandhabt und kann benutzerspezifisch konfiguriert werden.</p>

<h3 id="installcmd">Verwendung der Befehlszeile</h3>
<p class="warning"><strong>Hinweis:</strong> Die Befehlszeilennutzung des v2-Installers ist noch nicht endgültig festgelegt und kann sich bis zur finalen Veröffentlichung von v2.0 noch ändern. Einige Optionen des v1-Installers wurden noch nicht wieder implementiert.</p>
<p>Während der Installation werden möglicherweise einige Bestätigungsfenster angezeigt, wenn Konflikte festgestellt werden (z. B. laufende Skripte oder unbekannte Dateien, die überschrieben werden sollen). Der Silent-Modus ist nicht implementiert.</p>
<p>Um das Programm in das <em>ZIEL</em>-Verzeichnis zu installieren, führen Sie Folgendes im Quellverzeichnis aus:</p>
<pre>AutoHotkey32.exe UX\install.ahk /to "%ZIEL%"</pre>
<p>Um eine zusätzliche Version aus <em>QUELLE</em> zu installieren, führen Sie Folgendes im aktuellen Installationsverzeichnis aus (passen Sie den Pfad von AutoHotkey32.exe nach Bedarf an):</p>
<pre>AutoHotkey32.exe UX\install.ahk /install "%QUELLE%"</pre>
<p>Die vollständige Befehlszeichenkette für oben wird als <em>InstallCommand</em> unter <code>HKLM\Software\AutoHotkey</code> oder <code>HKCU\Software\AutoHotkey</code> registriert, wobei <code class="no-highlight">%1</code> als Platzhalter für das Quellverzeichnis dient. Die Nutzung dieses Registry-Wertes ist eventuell zukunftssicherer.</p>
<p>Die aktuelle Installation kann wie folgt erneut registriert werden:</p>
<pre>AutoHotkey32.exe UX\install.ahk</pre>
<p>Die aktuelle Installation kann wie folgt deinstalliert werden:</p>
<pre>AutoHotkey32.exe UX\install.ahk /uninstall</pre>
<p>Alternativ können Sie auch den <em>QuietUninstallString</em>-Wert aus einem der folgenden Registry-Schlüssel auslesen und ausführen:</p>
<pre>HKLM\Microsoft\Windows\CurrentVersion\Uninstall\AutoHotkey
HKCU\Microsoft\Windows\CurrentVersion\Uninstall\AutoHotkey</pre>

<h3 id="Installer_IsHostApp">Taskleistenschaltflächen</h3>
<p>Der v2-Installer bietet nicht die Option, die Schaltflächen der Taskleiste voneinander zu trennen. Bisher wurde dies dadurch erreicht, dass jede ausführbare AutoHotkey-Datei als <a href="https://msdn.microsoft.com/de-de/library/ee872121#APPLICATIONS">Host-Applikation (IsHostApp)</a> registriert wurde, aber dieser Ansatz weist Einschränkungen auf und lässt sich weniger gut verwalten, wenn mehrere Versionen installiert werden können. Stattdessen sollte jedes Skript den <a href="https://docs.microsoft.com/de-de/windows/win32/shell/appids">AppUserModelID</a>-Wert seines Prozesses oder seiner Fenster festlegen, um die Gruppierung zu steuern.</p>

<h3 id="Installer_uiAccess">Mit UI-Access starten</h3>
<p>Bei der Installation unter "Programme" erstellt der Installer ein zusätzliches Set von AutoHotkey-EXE-Dateien, mit denen einige <a href="FAQ.htm#uac">gängige UAC-bezogene Probleme</a> umgangen werden können. Solche Dateien enden mit "_UIA.exe". Wenn eine dieser UIA.EXE-Dateien von einem Administrator zum Starten eines Skripts verwendet wird, ist das Skript in der Lage, mit Fenstern von Programmen zu interagieren, die mit Adminrechten ausgeführt werden, ohne dass das Skript selbst mit solchen Rechten laufen muss.</p>
<p>Der Installer wird Folgendes tun:</p>
<ul>
  <li>Jede AutoHotkey*.exe nach AutoHotkey*_UIA.exe kopieren.</li>
  <li><a href="https://msdn.microsoft.com/de-de/library/ee671610">uiAccess-Attribut</a> im integrierten Manifest jeder UIA.EXE-Datei setzen.</li>
  <li>Ein selbstsigniertes digitales Zertifikat namens "AutoHotkey" erstellen und jede UIA.EXE-Datei signieren.</li>
  <li>Den Shell-Verb <em>UIAccess</em> registrieren, der im Kontextmenü des Explorers als "Run with UI access" erscheint. Standardmäßig wird dabei der <a href="#launcher">Launcher</a> gestartet, der versuchen wird, eine geeignete UIA.EXE-Datei zum Starten des Skripts auszuwählen.</li>
</ul>
<p>Der <a href="#launcher">Launcher</a> kann auch so konfiguriert werden, dass er standardmäßig v1-Skripte, v2-Skripte oder beides mit UI Access startet. Allerdings hat diese Option keinen Effekt, wenn für die gewählte Version und Build keine UIA.EXE-Datei existiert.</p>
<p>Skripte, die andere Skripte mit UI-Access ausführen müssen, können einfach <a href="commands/Run.htm">Run</a> benutzen, um die entsprechende UIA.EXE-Datei mit den normalen <a href="#cmd">Befehlszeilenparametern</a> auszuführen. Wenn das <em>UIAccess</em>-Shell-Verb registriert ist, kann es alternativ auch via Run verwendet werden. Zum Beispiel: <code>Run '*UIAccess "Skript.ahk"'</code></p>
<p><strong>Bekannte Einschränkungen</strong>:</p>
<ul>
  <li>UIA ist nur wirksam, wenn der Speicherort der Datei vertrauenswürdig ist; zum Beispiel ein Unterverzeichnis im Programme-Ordner.</li>
  <li>UIA.EXE-Dateien funktionieren nur auf anderen Computern, wenn das digitale Zertifikat, welches zum Erstellen dieser Dateien benutzt wurde, auch auf diesen Computern installiert ist.</li>
  <li>UIA.EXE-Dateien können aus Sicherheitsgründen nicht via CreateProcess gestartet werden. Stattdessen kann ShellExecute benutzt werden. <a href="commands/Run.htm">Run</a> versucht beides.</li>
  <li>UIA.EXE-Dateien können nicht modifiziert werden, weil das ansonsten deren digitale Signatur ungültig machen würde.</li>
  <li>Da die "Integritätsstufe" von UIA-Programmen sich von anderen Programmen unterscheidet, haben sie nur Zugriff auf Objekte, die von anderen UIA-Programmen registriert wurden. Zum Beispiel würde <code><a href="commands/ComObjActive.htm">ComObjActive</a>("Word.Application")</code> fehlschlagen, weil Word nicht für UI-Access markiert wurde.</li>
  <li>Die eigenen Fenster des Skripts können aus Sicherheitsgründen nur von UIA-Programmen/Skripten automatisiert werden.</li>
  <li>Das Ausführen eines UIA-losen Skripts, das einen Maus-Hook benutzt (selbst ein einfaches <code>InstallMouseHook</code>), kann eventuell alle Maus-Hotkeys blockieren, wenn der Mauszeiger auf ein Fenster eines UIA-Skripts zeigt, oder sogar Hotkeys, die vom UIA-Skript selbst implementiert wurden. Eine Möglichkeit zur Umgehung des Problems ist es, UIA-Skripte als Letztes zu laden.</li>
</ul>
<p>Schauen Sie sich <a href="https://www.autohotkey.com/board/topic/70449-enable-interaction-with-administrative-programs/">Enable interaction with administrative programs</a> (Interaktion mit administrativen Programmen ermöglichen) im Archiv-Forum an, um mehr zu erfahren.</p>

</body>
</html>
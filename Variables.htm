<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Variablen und Ausdrücke - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie mehr über Variablen, Ausdrücke, Operatoren, interne Variablen und Kapazität und Speicher von Variablen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke (Expressions)</a></li>
  <li><a href="#Operators">Operatoren in Ausdrücken</a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher von Variablen</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">Variablen</h2>
<p>Allgemeine Erläuterungen und Details zur Funktionsweise finden Sie unter <a href="Concepts.htm#variables">Variablen</a>.</p>
<p id="assigning"><strong>Werte in Variablen speichern</strong>: Um eine Zeichenkette oder Zahl in eine Variable zu speichern, verwenden Sie den <a href="#AssignOp">Doppelpunkt-Gleich-Operator (:=)</a> gefolgt von einer Zahl, einer in Anführungszeichen gesetzte Zeichenkette oder einem <a href="Language.htm#expressions">Ausdruck</a> beliebigen Typs. Zum Beispiel:</p>
<pre>MeineZahl := 123
MeineZkette := "Das ist eine direkt geschriebene Zeichenkette."
KopieVonVar := Var</pre>
<p>Eine Variable kann nicht explizit gelöscht werden, aber ihr vorheriger Wert kann durch Zuweisen eines neuen Wertes, z. B. einer leeren Zeichenkette, freigegeben werden:</p>
<pre>MeineVar := ""</pre>
<p>Einer Variable kann auch indirekt ein Wert zugewiesen werden, indem man <a href="#ref">ihre Referenz nimmt</a> und eine <a href="#deref">Doppelderefenzierung</a> verwendet oder sie an eine Funktion übergibt. Zum Beispiel:</p>
<pre><a href="commands/MouseGetPos.htm">MouseGetPos</a> &amp;x, &amp;y</pre>
<p>Den Wert einer Variable zu lesen, der kein Wert zugewiesen wurde, wird als Fehler angesehen. Mit <a href="commands/IsSet.htm">IsSet</a> kann dieser Zustand erkannt werden.</p>
<p id="retrieving"><strong>Inhalte von Variablen abrufen</strong>: Mit einer <a href="#concat">Verkettung</a> oder der <a href="commands/Format.htm">Format</a>-Funktion kann der Inhalt einer Variable in eine Zeichenkette eingefügt werden. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> "Der Wert von Var ist " . Var . "."
MsgBox "Der Wert in der Variable namens Var ist " Var "."
MsgBox Format("Var hat den Wert {1}.", Var)
</pre>
<p>Teilausdrücke können auf dieselbe Weise mit Zeichenketten kombiniert werden. Zum Beispiel:</p>
<pre>MsgBox("Die Summe von X und Y ist " . (X + Y))
</pre>
<p><strong>Variablen vergleichen</strong>: Bitte lesen Sie sich den folgenden Abschnitt durch, um zu erfahren, welche Vergleiche es gibt.</p>
<h2 id="Expressions">Ausdrücke (Expressions)</h2>
<p class="note">Eine strukturierte Übersicht und weitere Erläuterungen finden Sie unter <a href="Language.htm#expressions">Ausdrücke (Expressions)</a>.</p>
<p>Ausdrücke sind nützlich, um eine Reihe von Variablen, direkt geschriebenen Zeichenketten und/oder direkt geschriebenen Zahlen zu verarbeiten.</p>
<p>Reine Wörter innerhalb von Ausdrücken werden als Variablennamen interpretiert. Folglich müssen direkt geschriebene Zeichenketten in Anführungszeichen gesetzt werden, damit sie nicht als Variablen interpretiert werden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or GefundeneFarbe != "Blau")
    MsgBox "Die Einstellung ist zu hoch oder die Farbe ist falsch."</pre>
<p>Im obigen Beispiel ist "Blau" in Anführungszeichen gesetzt, weil es sich um eine direkt geschriebene Zeichenkette handelt. Einfache Anführungszeichen (') und doppelte Anführungszeichen (") sind funktionsgemäß identisch, außer dass eine Zeichenkette, die von einfachen Anführungszeichen umschlossen ist, direkt geschriebene doppelte Anführungszeichen enthalten kann, und umgekehrt. Um ein <em>tatsächliches</em> Anführungszeichen in eine direkt geschriebene Zeichenkette einzufügen, muss das Anführungszeichen entweder mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden oder die Zeichenkette mit gegenteiligen Anführungszeichen umschlossen werden. Zum Beispiel:</p>
<pre>MsgBox "Sie sagte: <span class="red">`"</span>Ein Apfel pro Tag.<span class="red">`"</span>"
MsgBox <span class="red">'</span>Sie sagte: "Ein Apfel pro Tag."<span class="red">'</span></pre>
<p><strong>Leere Zeichenketten</strong>: Um eine leere Zeichenkette in einem Ausdruck anzugeben, verwenden Sie zwei aufeinanderfolgende Anführungszeichen. Zum Beispiel wäre die Anweisung <code>if (MeineVar != "")</code> wahr, wenn <em>MeineVar</em> nicht leer ist.</p>
<p><strong>Ergebnis eines Ausdrucks speichern</strong>: Um das Ergebnis eines Ausdrucks einer Variable zuzuweisen, müssen Sie den <a href="#AssignOp">Operator :=</a> verwenden. Zum Beispiel:</p>
<pre>NettoPreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Boolesche Werte</strong>: Das Ergebnis eines Ausdrucks (z. B. einer IF-Anweisung) ist falsch (False), wenn es leer oder 0 ist, oder wahr (True), wenn ein anderes Ergebnis vorliegt. Zum Beispiel wäre die Anweisung <code>if ElementeAnzahl</code> nur dann falsch, wenn ElementeAnzahl leer oder 0 ist. Der Ausdruck <code>if not ElementeAnzahl</code> würde das gegenteilige Ergebnis liefern.</p>
<p>Operatoren wie NOT/&gt;/=/&lt; erzeugen automatisch einen wahren oder falschen Wert: 1 für True und 0 für False. Die Operatoren AND/OR geben immer einen der Eingabewerte zurück. Im folgenden Beispiel bekommt die <em>Done</em>-Variable eine 1 zugewiesen, wenn A_Index größer als 5 ist, oder der Wert von <em>Gefunden</em>, wenn dies nicht der Fall ist:</p>
<pre>Done := A_Index &gt; 5 or FoundIt</pre>
<p>Wie oben angedeutet, kann eine Variable zum Speichern eines falschen Wertes verwendet werden, indem man sie leer macht oder ihr eine 0 zuweist. Verwenden Sie dann die Kurzanweisung <code>if Done</code>, um zu überprüfen, ob die Done-Variable wahr oder falsch ist.</p>
<p><span id="True"></span><span id="False"></span>Innerhalb eines Ausdrucks werden die Schlüsselwörter <em>True</em> und <em>False</em> in 1 und 0 aufgelöst. Sie können verwendet werden, um ein Skript besser lesbar zu machen, z. B.:</p>
<pre>GroßKleinSensitiv := false
SucheFortsetzen := true</pre>
<p id="numbers"><strong>Integer (ganze Zahlen) und Floating-Point-Zahlen (Gleitkommazahlen)</strong>: Zahlen, die einen Dezimalpunkt enthalten oder in wissenschaftlicher Schreibweise geschrieben sind, werden innerhalb eines Ausdrucks als Floating-Point-Zahlen gewertet; alle anderen Zahlen werden als Integer behandelt. Bei den meisten Operatoren -- wie Addition und Multiplikation -- gilt: Wenn einer der Eingabewerte eine Floating-Point-Zahl ist, wird das Ergebnis auch eine Floating-Point-Zahl sein.</p>
<p>Innerhalb und außerhalb von Ausdrücken können Integer sowohl im hexadezimalen als auch dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel wäre <code>Sleep 0xFF</code> das gleiche wie <code>Sleep 255</code>. Optional können Floating-Point-Zahlen mithilfe der wissenschaftlichen Schreibweise angegeben werden, mit oder ohne Dezimalpunkt (z. B. <code>1e4</code> oder <code>-2.1E-4</code>).</p>
<p>Innerhalb von Ausdrücken werden anführungszeichenlose direkt geschriebene Zahlen wie <code>128</code>, <code>0x7F</code> und <code>1.0</code> in reine Zahlen umgewandelt, bevor das Skript seine Ausführung beginnt. Das heißt, dass die Zahl-Zeichenkette-Konvertierung einen Wert erzeugen würde, der vom originalen direkt geschriebenen Wert abweicht. Zum Beispiel:</p>
<pre>MsgBox(0x7F)  <em>; Zeigt 128</em>
MsgBox(1.00)  <em>; Zeigt 1.0</em></pre>

<h2 id="Operators">Operatoren in Ausdrücken</h2>
<p class="note">Allgemeine Informationen über Operatoren finden Sie unter <a href="Language.htm#operators">Operatoren</a>.</p>
<p>Sofern nicht anders unten angegeben, werden leere Werte (leere Zeichenketten) oder nicht-numerische Werte innerhalb einer mathematischen Operation <strong>nicht</strong> als 0 interpretiert. Stattdessen wird ein <a href="objects/Error.htm#TypeError">TypeError</a> ausgelöst. Wenn <a href="commands/Try.htm">Try</a> nicht verwendet wird, führt die unbehandelte Ausnahme standardmäßig zu einem Fehlerdialogfenster.</p>

<h3 id="operators">Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr>
    <th class="center">Operator</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="deref">
    <td class="center bold">%Ausdr%</td>
    <td>
      <p><strong>Dereferenzierung</strong> oder <strong>Namensubstitution</strong>.</p>
      <p>Wenn <em>Ausdr</em> zu einer <a href="Concepts.htm#variable-references">VarRef</a> ausgewertet wird, greift <code>%Ausdr%</code> auf die entsprechende Variable zu. Zum Beispiel: <code>x := &amp;y</code> nimmt eine Referenz, die auf <em>y</em> verweist, und weist sie <em>x</em> zu, danach würde <code>%x% := 1</code> der Variable <em>y</em> etwas zuweisen und <code>%x%</code> deren Wert lesen.</p>
      <p>Ansonsten wird der Wert des Teilausdrucks <em>Ausdr</em> als Name oder Teilname einer Variable oder Eigenschaft verwendet. Dadurch kann das Skript auf eine Variable oder Eigenschaft verweisen, deren Name durch die Auswertung von <em>Ausdr</em> ermittelt wird, was typischerweise eine andere Variable ist. Variablen können nicht dynamisch erstellt werden, aber eine Variable kann dynamisch zugewiesen werden, wenn sie irgendwo im Skript nicht-dynamisch deklariert oder referenziert wurde.</p>
      <p class="note"><strong>Hinweis:</strong> Das <u>Ergebnis</u> des Teilausdrucks <em>Ausdr</em> muss der Name oder Teilname der Variable oder Eigenschaft sein, auf die zugegriffen werden soll.</p>
      <p>Prozentzeichen können wegen ihrer Mehrdeutigkeit nicht direkt in <em>Ausdr</em> benutzt werden, aber sie können innerhalb von runden Klammern ineinander verschachtelt werden. Ansonsten kann <em>Ausdr</em> ein beliebiger Ausdruck sein.</p>
      <p>Eventuell angrenzende <em>%Ausdr%</em>-Sequenzen und teilweise vorhandene <a href="Concepts.htm#names">Namen</a> (ohne Leerzeichen oder sonstigen Zeichen dazwischen) werden kombiniert, um einen einzelnen Namen zu bilden.</p>
      <p>Ein <a href="objects/Error.htm">Error</a> wird typischerweise ausgelöst, wenn die Variable noch nicht existiert oder wenn sie nicht initialisiert ist und ihr Wert gelesen wird. Um das zu vermeiden, kann mit dem <a href="#or-maybe">Oder-Vielleicht-Operator (??)</a> ein Standardwert angegeben werden. Zum Beispiel: <code>%'keineVar'% ?? 42</code>.</p>
      <p>Obwohl diese Vorgehensweise historisch gesehen als "Doppel-Dereferenzierung" bekannt ist, ist dieser Begriff ungenau, wenn <em>Ausdr</em> keine Variable enthält (erste Dereferenzierung), und wenn die resultierende Variable, die das Ziel einer Zuweisung ist, nicht dereferenziert wird (zweite Dereferenzierung).</p>
    </td>
  </tr>
  <tr id="objdot">
    <td class="center bold">x.y<br>x.%z%</td>
    <td><strong>Zugriff auf Objektelemente</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei ist <i>y</i> ein direkt geschriebener Name und <em>z</em> ein Ausdruck, der zu einem Namen ausgewertet wird. Siehe <a href="Objects.htm#Usage_Objects">Objektsyntax</a>.</td>
  </tr>
  <tr id="maybe">
    <td class="center"><em>Var</em><strong>?</strong></td>
    <td>
      <p><strong>Vielleicht</strong>. Erlaubt einer Variable, ungesetzt zu sein. Dies ist nur gültig, wenn eine Variable an einen optionalen Parameter, ein Array-Element oder eine direkte Objekt-Schreibweise übergeben wird; oder auf der rechten Seite einer direkten Zuweisung. Nach dem Fragezeichen muss eines der folgenden Symbole stehen (Leerzeichen werden ignoriert): <code class="no-highlight">)]},:</code>. Die Variable kann bedingt mit dem <a href="#ternary">ternären Operator</a> oder auf der rechten Seite von <a href="#and">AND</a>/<a href="#or">OR</a> übergeben werden.</p>
      <p>Die Variable ist typischerweise ein optionaler Parameter, kann aber eine beliebige Variable sein. Im Bezug auf Variablen, die keine Funktionsparameter sind, kann es immer noch vorkommen, dass beim Laden des Skripts eine <a href="commands/_Warn.htm#VarUnset">VarUnset-Warnung</a> angezeigt wird, wenn es noch andere Referenzen gibt, die auf die Variable verweisen, aber keine Zuweisungen.</p>
      <p>Dieser Operator wird derzeit nur für Variablen unterstützt. Um einen Parameter in allgemeineren Fällen explizit oder bedingt wegzulassen, verwenden Sie das Schlüsselwort <code>unset</code>.</p>
      <p>Siehe auch: <a href="Language.htm#unset">unset (Optionale Parameter)</a></p>
    </td>
  </tr>
  <tr id="IncDec">
    <td class="center bold">++<br>
    --</td>
    <td>
      <p><strong>Vorherige und nachherige Inkrementierung/Dekrementierung</strong>. Erhöht oder verringert eine Zahlenvariable um 1. Der Operator kann entweder vor oder nach dem Namen einer Variable erfolgen. Erfolgt der Operator <em>vor</em> dem Namen, wird die Operation durchgeführt und ihr Ergebnis für die nächste Operation verwendet (das Ergebnis ist in diesem Fall eine Variablenreferenz). Zum Beispiel würde <code>Var := ++X</code> die X-Variable um 1 erhöhen und ihr Wert in <em>Var</em> speichern. Erfolgt der Operator <em>nach</em> dem Namen einer Variable, ist das Ergebnis der Wert von X vor der Ausführung der Operation. Zum Beispiel erhöht <code>Var := X++</code> die X-Variable um 1, allerdings bekommt <em>Var</em> den Wert, den X hatte, bevor es inkrementiert wurde.</p>
      <p>Diese Operatoren können auch mit einer Eigenschaft eines Objekts verwendet werden, wie z. B. <code>meinArray.Length++</code> oder <code>--meinArray[i]</code>. In solchen Fällen ist das Ergebnis des Teilausdrucks immer eine Zahl, keine Variablenreferenz.</p>
    </td>
  </tr>
  <tr id="pow">
    <td class="center bold">**</td>
    <td>
      <p><strong>Potenz</strong>. Anwendungsbeispiel: <code>Basis**Exponent</code>. Sowohl <em>Basis</em> als auch <em>Exponent</em> können einen Dezimalpunkt enthalten. Wenn <em>Exponent</em> negativ ist, wird das Ergebnis in eine Floating-Point-Zahl umgewandelt, auch dann, wenn <em>Basis</em> und <em>Exponent</em> Integer sind. Da ** eine höhere Priorität als ein unäres Minuszeichen hat, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und daher -4 zurückgeben. Um also eine direkt geschriebene negative Zahl zu potenzieren, muss sie in runden Klammern gesetzt werden, z. B <code>(-2)**2</code> .</p>
      <p>Der Potenzoperator ist rechtsassoziativ. <code>x ** y ** z</code> beispielsweise wird als <code>x ** (y ** z)</code> ausgewertet.</p>
      <p class="note"><strong>Hinweis</strong>: Eine negative <em>Basis</em> in Verbindung mit einem gebrochenen <em>Exponenten</em> wie <code>(-2)**0.5</code> wird nicht unterstützt und führt dazu, dass eine Ausnahme ausgelöst wird. Schreibweisen wie <code>(-2)**2</code> und <code>(-2)**2.0</code> werden aber unterstützt. Wenn <em>Basis</em> und <em>Exponent</em> 0 sind, ist das Ergebnis undefiniert und führt dazu, dass eine Ausnahme ausgelöst wird.</p>
    </td>
  </tr>
  <tr id="unary">
    <td class="center bold">-<br>
    !<br>
    ~<br>
    &amp;</td>
    <td>
      <p><strong>Unäres Minuszeichen (-)</strong>: Invertiert das Vorzeichen des Operanden.</p>
      <p><strong>Unäres Pluszeichen (+)</strong>: <code>+N</code> ist das gleiche wie <code>-(-N)</code>. Dieser Operator hat keinen Effekt, wenn er auf eine reine Zahl angewendet wird, aber er ist nützlich, um numerische Zeichenketten in reine Zahlen zu konvertieren.</p>
      <p><strong>Logisches NICHT (!)</strong>: Wenn dieser Operator bei einem Operanden angewendet wird, der leer oder 0 ist, ist das Ergebnis eine 1 (true). Ansonsten ist das Ergebnis eine 0 (false). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist das gleiche wie <strong>!</strong>, allerdings hat <strong>!</strong> eine höhere Priorität. Aufeinanderfolgende unäre Operatoren wie <code><strong>!!</strong>Var</code> sind erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Dieser Operator invertiert jedes Bit seines Operanden. Bei Verwendung von vorzeichenfähigen 64-Bit-Integern ergibt ein positiver Eingabewert immer ein negatives Ergebnis und umgekehrt. Zum Beispiel wird <code>~0xf0f</code> zu -0xf10 (-3856) ausgewertet, was das binäre Äquivalent zu 0xfffffffffffff0f0 ist. Wenn ein vorzeichenloser 32-Bit-Wert beabsichtigt ist, kann das Ergebnis mit <code><i>Ergebnis</i> &amp; 0xffffffff</code> gekürzt werden. Handelt es sich bei dem Operanden um eine Floating-Point-Zahl, wird ein <a href="objects/Error.htm#TypeError">TypeError</a> ausgelöst.</p>
      <p id="ref"><strong>Referenz (&amp;)</strong>: Erstellt eine VarRef, also einen Wert, der eine Referenz repräsentiert, die auf eine Variable verweist. Eine VarRef kann verwendet werden, um indirekt auf die Zielvariable zuzugreifen. <code>Ref := &amp;Ziel</code> beispielsweise, gefolgt von <code>%Ref% := 1</code>, würde <em>Ziel</em> den Wert 1 zuweisen. Die VarRef wird normalerweise an eine Funktion übergeben, kann aber auch in ein Array oder eine Eigenschaft gespeichert werden. Siehe auch: <a href="#deref">Dereferenz</a>, <a href="Functions.htm#ByRef">ByRef</a>.</p>
      <p>Das Abrufen einer Referenz, die auf eine interne Variable wie z. B. <a href="misc/A_Clipboard.htm">A_Clipboard</a> verweist, wird derzeit nicht unterstützt, außer wenn sie direkt an einen <em>AusgabeVar</em>-Parameter einer internen Funktion übergeben wird.</p>
    </td>
  </tr>
  <tr id="MulDiv">
    <td class="center bold">*<br>
    /<br>
    //
    </td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind; ansonsten ist es eine Floating-Point-Zahl.</p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Das Sternchensymbol (*) kann auch in <a href="Functions.htm#VariadicCall">variadischen Funktionsaufrufen</a> genutzt werden.</p>
      <p id="divide"><strong>Echtes Dividieren (/)</strong>: Die echte Division liefert immer eine Floating-Point-Zahl, auch dann, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>3/2</code> gleich 1.5 statt 1, und <code>4/2</code> gleich 2.0 statt 2.</p>
      <p id="IntegerDivide"><strong>Integer-Dividieren (//)</strong>: Der Doppelschrägstrich-Operator verwendet eine sehr leistungsfähige Integer-Division. Zum Beispiel wäre <code>5//3</code> gleich 1 und <code>5//-3</code> gleich -1. Wenn einer der Eingabewerte im Floating-Point-Format ist, wird ein <a href="objects/Error.htm#TypeError">TypeError</a> ausgelöst. Um stattdessen eine Division mit Rest (Modulo) durchzuführen, siehe <a href="commands/Math.htm#Mod">Mod</a>.</p>
    <p>Die <a href="#AssignOp">Operatoren *= und /=</a> sind Kurzschreibweisen zum Multiplizieren oder Dividieren eines Variablenwertes mit einem anderen Wert. <code>Var *= 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var * 2</code> (allerdings ist die erste Schreibweise performanter).</p>
    <p>Eine Division durch Null bewirkt, dass ein <a href="objects/Error.htm#ZeroDivisionError">ZeroDivisionError</a> ausgelöst wird.</p></td>
  </tr>
  <tr id="AddSub">
    <td class="center bold">+<br>
    -</td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Die <a href="#AssignOp">Operatoren += und -=</a> sind Kurzschreibweisen zum Erhöhen oder Verringern eines Variablenwertes um einen beliebigen Wert. <code>Var += 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var + 2</code> (allerdings ist die erste Schreibweise performanter). Des Weiteren gibt es die Möglichkeit, eine Variable mit <a href="#IncDec">Var++, Var--, ++Var oder --Var</a> schrittweise um 1 zu erhöhen oder zu verringern.</p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Wenn das Plus- oder Minuszeichen keinen Wert (oder Teilausdruck, der einen Wert zurückgibt) davor hat, wird es stattdessen als <a href="#unary">unärer Operator</a> interpretiert.</p>
    </td>
  </tr>
  <tr id="bitshift">
    <td class="center bold">&lt;&lt;<br>
    &gt;&gt;<br>
    &gt;&gt;&gt;</td>
    <td>
      <p><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Das ist das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" multiplizieren.</p>
      <p><strong>Arithmetische bitweise Verschiebung nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &gt;&gt; Wert2</code>. Das ist das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" dividieren und dann das Ergebnis auf den am nächsten links befindlichen Integer runden; zum Beispiel wäre <code>-3&gt;&gt;1</code> gleich -2.</p>
      <p><strong>Logische bitweise Verschiebung nach rechts (&gt;&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &gt;&gt;&gt; Wert2</code>. Im Gegensatz zur arithmetischen bitweisen Verschiebung nach rechts wird bei dieser Verschiebung das Vorzeichen der Zahl nicht beibehalten. Zum Beispiel hat -1 die gleiche Darstellung von Bits wie der vorzeichenlose 64-Bit-Integer 0xffffffffffffffff, daher ist <code>-1 &gt;&gt;&gt; 1</code> 0x7fffffffffffffff.</p>
      <p>Die folgenden Punkte gelten für alle drei Operatoren:</p>
      <ul>
        <li>Wenn einer der Eingabewerte eine Floating-Point-Zahl ist, wird ein <a href="objects/Error.htm#TypeError">TypeError</a> ausgelöst.</li>
        <li>Wenn <em>Wert2</em> kleiner als 0 oder größer als 63 ist, wird eine Ausnahme ausgelöst.</li>
      </ul>
    </td>
  </tr>
  <tr id="bitwise">
    <td class="center bold">&amp;<br>
    ^<br>
    |
    </td>
    <td>
      <p><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste Priorität und <strong>|</strong> die niedrigste Priorität.</p>
      <p>Wenn einer der Eingabewerte eine Floating-Point-Zahl ist, wird ein <a href="objects/Error.htm#TypeError">TypeError</a> ausgelöst.</p>
      <p>Siehe auch: <a href="#unary">Bitweises NICHT (~)</a></p>
    </td>
  </tr>
  <tr id="concat">
    <td class="center bold">.</td>
    <td>
      <p><strong>Verkettung</strong>. Ein Punkt mit mindestens einem Leer- oder Tabulatorzeichen auf jeder Seite dient dazu, zwei Elemente zu kombinieren, um eine einzelne Zeichenkette zu erhalten. Dasselbe Ergebnis kann auch ohne diesen Punkt erzielt werden (außer bei Zweideutigkeiten wie <code>x <strong>-</strong>y</code>, oder wenn das rechts befindliche Element ein ++ oder -- davor hat). Lässt man den Punkt weg, müssen die Elemente, die zusammengeführt werden sollen, mit mindestens einem Leerzeichen getrennt werden.</p>
      <pre>Var := "Die Farbe ist " <strong>.</strong> GefundeneFarbe  <em>; Explizite Verkettung</em>
Var := "Die Farbe ist " GefundeneFarbe    <em>; Auto-Verkettung</em>
</pre>
      <p>Teilausdrücke können auch verkettet werden. Zum Beispiel: <code>Var := "Der Nettopreis ist " <strong>.</strong> Preis * (1 - Rabatt/100)</code>.</p>
      <p>Eine Zeile, die mit einem Punkt (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p>
      <p>Es wird immer die komplette <a href="commands/StrLen.htm">Länge</a> von jedem Eingabewert benutzt, sogar wenn binäre Nullen enthalten sind. <code>Chr(0x2010) Chr(0x0000) Chr(0x4030)</code> würde beispielsweise die folgende Zeichenkette in Bytes erzeugen (wegen der UTF-16-LE-Codierung): 0x10, 0x20, 0, 0, 0x30, 0x40. Das Ergebnis hat einen zusätzlichen Null-Terminator (binäre Null), der beim Messen der Länge nicht miteinbezogen wird.</p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Wenn ein Punkt ohne vorangestelltes Leer- oder Tabulatorzeichen angegeben ist, wird es entweder als direkt geschriebene <a href="#numbers">Floating-Point-Zahl</a> oder als <a href="#objdot">Objektelementzugriff</a> interpretiert. Zum Beispiel ist <code>1.1</code> oder <code>(.5)</code> eine Zahl, <code>A_Args.Has(3)</code> ein Methodenaufruf und <code>A_Args.Length</code> ein Eigenschaftszugriff.</p>
    </td>
  </tr>
  <tr id="regex">
    <td class="center bold">~=</td>
    <td>Kurzschreibweise für <a href="commands/RegExMatch.htm">RegExMatch</a>. <code>"abc123" ~= "\d"</code> beispielsweise würde eine 4 liefern (die Position des ersten numerischen Zeichens).</td>
  </tr>
  <tr id="compare">
    <td class="center bold">&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    &gt;= &lt;=</td>
    <td>
      <p><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Die Eingabewerte werden numerisch verglichen. Es wird ein <a href="objects/Error.htm#TypeError">TypeError</a> ausgelöst, wenn einer der Eingabewerte weder eine Zahl noch eine numerische Zeichenkette ist.</p>
    </td>
  </tr>
  <tr id="equal">
    <td class="center bold">=<br>
      ==<br>
      !=<br>
      !==</td>
    <td>
      <p><strong>nicht-Groß-/Kleinschreibung-sensitiv gleich (=) / ungleich (!=)</strong> und <strong>Groß-/Kleinschreibung-sensitiv gleich (==) / ungleich (!==)</strong>. Die Operatoren <strong>==</strong> und <strong>=</strong> verhalten sich gleich, wenn beide Eingabewerte numerisch sind, es sei denn, einer der Eingabewerte ist nicht numerisch, dann ist <strong>==</strong> immer Groß-/Kleinschreibung-sensitiv und <strong>=</strong> immer nicht-Groß-/Kleinschreibung-sensitiv. Die Operatoren <strong>!=</strong> und <strong>!==</strong> verhalten sich identisch zu ihren Counterparts ohne <strong>!</strong>, außer dass das Ergebnis invertiert ist.</p>
      <p>Mit den Operatoren <strong>==</strong> und <strong>!==</strong> können Zeichenketten verglichen werden, die binäre Nullen enthalten. Alle anderen Vergleichsoperatoren, außer <strong>~=</strong>, vergleichen Zeichenketten nur bis zur ersten binären Null.</p>
      <p>Bei nicht-Groß-/Kleinschreibung-sensitiven Vergleichen werden nur die ASCII-Buchstaben von A bis Z und die entsprechenden Kleinbuchstaben gleichwertig behandelt. Um stattdessen einen Vergleich gemäß den Regeln der aktuellen Sprach- und Regionseinstellungen des Benutzers durchzuführen, nutzen Sie <a href="commands/StrCompare.htm">StrCompare</a> und fügen Sie "Locale" in dessen <em>GroßKleinSensitiv</em>-Parameter ein.</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">IS<br>IN<br>CONTAINS</td>
    <td id="is">
      <p><code><i>Wert</i> <strong>is</strong> <i>Klasse</i></code> ist True (1), wenn <em>Wert</em> eine Instanz von <em>Klasse</em> ist, ansonsten False (0). <em>Klasse</em> muss eine Instanz der <a href="objects/Object.htm">Object</a>-Klasse mit einer eigenen <a href="objects/Class.htm#Prototype">Prototype</a>-Eigenschaft sein, aber in der Regel wird die Eigenschaft implizit via Klassendefinition definiert. Diese Operation ist grundsätzlich äquivalent zu <code>HasBase(<i>Wert</i>, <i>Klasse</i>.Prototype)</code>.</p>
      <p><code id="in"><strong>in</strong></code> und <code id="contains"><strong>contains</strong></code> sind für die zukünftige Verwendung reserviert.</p>
    </td>
  </tr>
  <tr id="not">
    <td class="center bold">NOT</td>
    <td><strong>Logisches NICHT</strong>. Abgesehen von seiner geringeren Priorität ist dieser Operator funktional identisch mit dem <strong>!</strong>-Operator. <code>not (x = 3 or y = 3)</code> wäre zum Beispiel das gleiche wie <code><strong>!</strong>(x = 3 or y = 3)</code>.</td>
  </tr>
    <tr id="and">
      <td class="center bold">AND<br>
      &amp;&amp;</td>
      <td><p>Beide Operatoren sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>.</p>
        <p>In einem Ausdruck, wo <strong>alle</strong> Operanden in <em>True</em> aufgelöst werden, wird der <strong>letzte</strong> Operand, der in <em>True</em> aufgelöst wird, zurückgegeben. Ansonsten wird der <strong>erste</strong> Operand, der in <em>False</em> aufgelöst wird, zurückgegeben. Erst wenn alle Operanden tatsächlich wahr sind, wird das Ergebnis wahr sein. Boolesche Ausdrücke werden einer <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> unterzogen (von links nach rechts), um die Leistung zu verbessern.</p>
        <pre>A := 1, B := {}, C := 20, D := True, E := "Zeichenkette" <em>; <strong>Alle</strong> Operanden sind wahr und werden ausgewertet</em>
MsgBox(A &amp;&amp; B &amp;&amp; C &amp;&amp; D &amp;&amp; E) <em>; Der <strong>letzte</strong> wahre Operand wird zurückgegeben ("Zeichenkette")</em></pre>
        <pre>A := 1, B := "", C := 0, D := False, E := "Zeichenkette" <em>; B, C und D sind falsch</em>
MsgBox(A &amp;&amp; B &amp;&amp; ++C &amp;&amp; D &amp;&amp; E) <em>; Der <strong>erste</strong> falsche Operand wird zurückgegeben (""). C, D und E werden nicht ausgewertet und C wird nie inkrementiert</em></pre>
        <p>Eine Zeile, die mit <code>AND</code> oder <code>&amp;&amp;</code> (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p></td>
    </tr>
    <tr id="or">
      <td class="center bold">OR<br>
      ||</td>
      <td><p>Beide Operatoren sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>.</p>
        <p>In einem Ausdruck, wo <strong>mindestens</strong> ein Operand in <em>True</em> aufgelöst wird, wird der <strong>erste</strong> Operand, der in <em>True</em> aufgelöst wird, zurückgegeben. Ansonsten wird der <strong>letzte</strong> Operand, der in <em>False</em> aufgelöst wird, zurückgegeben. Erst wenn mindestens ein Operand tatsächlich wahr ist, wird das Ergebnis wahr sein. Boolesche Ausdrücke werden einer <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> unterzogen (von links nach rechts), um die Leistung zu verbessern.</p>
        <pre>A := "", B := False, C := 0, D := "Zeichenkette", E := 20 <em>; <strong>Mindestens</strong> ein Operand ist wahr. Alle Operanden bis einschließlich D werden ausgewertet</em>
MsgBox(A || B || C || D || ++E) <em>; Der <strong>erste</strong> wahre Operand wird zurückgegeben ("Zeichenkette"). E wird nicht ausgewertet und wird nie inkrementiert</em></pre>
        <pre>A := "", B := False, C := 0 <em>; <strong>Alle</strong> Operanden sind falsch und werden ausgewertet</em>
MsgBox(A || B || C) <em>; Der <strong>letzte</strong> falsche Operand wird zurückgegeben (0)</em></pre>
        <p>Eine Zeile, die mit <code>OR</code> oder <code>||</code> (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p></td>
    </tr>
  <tr id="or-maybe">
    <td class="center bold">??</td>
    <td>
      <p><strong>Oder-Vielleicht</strong>, auch bekannt als der Koaleszenz-Operator. Wenn der linke Operand (der eine Variable sein muss) einen Wert hat, wird dieser als Ergebnis verwendet und der rechte Zweig übersprungen. Ansonsten wird der rechte Operand als Ergebnis verwendet. Mit anderen Worten: <code>A ?? B</code> verhält sich wie <code>A || B</code> (<a href="#or">logisches OR</a>), nur dass die Bedingung <code>IsSet(A)</code> ist.</p>
      <p>Dieser Operator wird typischerweise verwendet, um einen Standardwert anzugeben, wenn bekannt ist, dass eine Variable oder ein optionaler Parameter eventuell noch keinen Wert hat. Zum Beispiel:</p>
      <pre>MsgBox MeineVar ?? "Standardwert"</pre>
      <p>Da von der Variable erwartet wird, dass sie manchmal <a href="Concepts.htm#uninitialized-variables">uninitialisiert</a> ist, wird in diesem Fall kein Fehler ausgelöst. Im Gegensatz zu <code>IsSet(A) ? A : B</code> kann es immer noch vorkommen, dass beim Laden des Skripts eine <a href="commands/_Warn.htm#VarUnset">VarUnset-Warnung</a> angezeigt wird, wenn es noch andere Referenzen gibt, die auf die Variable verweisen, aber keine Zuweisungen.</p>
    </td>
  </tr>
  <tr id="ternary">
    <td class="center bold">?:</td>
    <td>
      <p><strong>Ternärer Operator</strong>. Dieser Operator ist eine Kurzschreibweise zum Durchführen einer <a href="commands/If.htm">if-else-Anweisung</a>. Der Operator wertet die Bedingung auf der linken Seite aus, um festzustellen, welche der beiden Verzweigungen als Endergebnis dienen soll. <code>Var := x&gt;y ? 2 : 3</code> beispielsweise würde eine 2 in <em>Var</em> speichern, falls x größer als y ist; ansonsten würde es eine 3 speichern. Zur Verbesserung der Leistung wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>).</p>
      <p>Siehe auch: <a href="#maybe">Vielleicht (<em>Var</em>?)</a>, <a href="#or-maybe">Oder-Vielleicht (??)</a></p>
      <p class="warning"><strong>Hinweis:</strong> Wenn die ternäre Bedingung am Anfang einer Zeile verwendet wird, sollte sie normalerweise mit runden Klammern umschlossen werden, um Mehrdeutigkeiten in Verbindung mit anderen Anweisungstypen zu verringern. Einzelheiten finden Sie unter <a href="Language.htm#expression-statements">Ausdrucksanweisungen</a>.</p>
    </td>
  </tr>
  <tr id="AssignOp">
    <td class="center bold">:=<br>
        +=<br>
        -=<br>
        *=<br>
        /=<br>
        //=<br>
        .=<br>
        |=<br>
        &amp;=<br>
        ^=<br>
        &gt;&gt;=<br>
        &lt;&lt;=<br>
        &gt;&gt;&gt;=
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in die gleiche Variable. Der einfachste Zuweisungsoperator ist der Doppelpunkt-Gleich-Operator (:=), der das Ergebnis eines Ausdrucks in eine Variable speichert. Eine Beschreibung dessen, was die anderen Operatoren tun, finden Sie in den entsprechenden Einträgen dieser Tabelle. <code>Var //= 2</code> beispielsweise führt eine <a href="#IntegerDivide">Integer-Division</a> durch, um <em>Var</em> durch 2 zu teilen, und speichert dann das Ergebnis wieder in <em>Var</em>. Ein weiteres Beispiel ist <code>Var <strong>.=</strong> "abc"</code>, was die Kurzschreibweise für <code>Var := Var <strong>.</strong> "abc"</code> wäre.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Eine Zeile wie <code>Var1 := Var2 := 0</code> würde also erst eine 0 in <em>Var2</em> speichern und dann <em>Var2</em> in <em>Var1</em> speichern.</p>
    <p>Verwendet man eine Zuweisung im Eingabewert eines anderen Operators, wird die Variable selbst als Eingabewert genommen. Der Ausdruck <code>(Var += 2) &gt; 50</code> wäre beispielsweise wahr, wenn der gerade eben erhöhte Wert in <em>Var</em> größer als 50 ist. Es ist auch zulässig, eine Zuweisung mit dem <a href="#ref">Referenzoperator</a> zu kombinieren, wie in <code>&amp;(Var := "Anfangswert")</code>.</p>
    <p>Die Priorität der Zuweisungsoperatoren erhöht sich automatisch, wenn dadurch ein Syntaxfehler verhindert oder ein besseres Verhalten bereitgestellt werden kann. Zum Beispiel: <code>not x := y</code> würde als <code>not (x := y)</code> ausgewertet werden. <code>++Var := X</code> würde als <code>++(Var := X)</code> ausgewertet werden; und <code>Z &gt; 0 ? X := 2 : Y := 2</code> würde als <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code> ausgewertet werden.</p>
    <p>Um die Zielvariable <em>ungesetzt</em> zu machen, kombinieren Sie eine direkte Zuweisung (<code>:=</code>) mit dem Schlüsselwort <code>unset</code> oder dem Operator <a href="#maybe">Vielleicht (<em>var</em>?)</a>. Zum Beispiel: <code>Var := unset</code>, <code>Var1 := (Var2?)</code>.</p>
    <p>Eine Zuweisung funktioniert auch mit einer Eigenschaft eines Objekts, wie z. B. <code>meinArray.Length += n</code> oder <code>meinArray[i] .= t</code>. Wenn man einer Eigenschaft einen Wert zuweist, ist das Ergebnis des Teilausdrucks der Wert, der zugewiesen wird, nicht eine Variablenreferenz.</p>
    </td>
  </tr>
  <tr id="fat-arrow">
    <td class="center"><strong>() =&gt;</strong> <em>Ausdr</em></td>
    <td>
      <p><strong>Fat-Arrow-Funktion</strong>. Definiert eine einfache <a href="Functions.htm">Funktion</a> und gibt ein <a href="objects/Func.htm">Func</a>- oder <a href="Functions.htm#closures">Closure</a>-Objekt zurück. Schreiben Sie die <a href="Functions.htm#param">Parameterliste</a> der Funktion (optional mit einem Funktionsnamen davor) links neben den Operator. Wenn die Funktion aufgerufen wird (über die zurückgegebene Referenz), wertet sie den Teilausdruck <em>Ausdr</em> aus und gibt das Ergebnis zurück.</p>
      <p>Die folgenden zwei Beispiele sind funktionsgemäß identisch:</p>
      <pre>sumfn := Sum(a, b) =&gt; a + b</pre>
      <pre>Sum(a, b) {
    return a + b
}
sumfn := Sum</pre>
      <p>In beiden Fällen wird die Funktion zum Zeitpunkt des Skriptstarts <strong>bedingungslos</strong> definiert, allerdings wird die Funktionsreferenz nur in <em>sumfn</em> gespeichert, wenn die Zuweisung ausgewertet wird.</p>
      <p>Wenn der Funktionsname weggelassen wird und die Parameterliste nur aus einem einzigen Parameternamen besteht, können die runden Klammern weggelassen werden. Das folgende Beispiel definiert eine anonyme Funktion mit einem Parameter <code>a</code> und speichert ihre Referenz in die Variable <code>double</code>:</p>
      <pre>double := a =&gt; a * 2</pre>
      <p>Das Auflösen von Variablenreferenzen in <em>Ausdr</em> erfolgt wie bei der entsprechenden Vollfunktionsdefinition. Zum Beispiel könnte <em>Ausdr</em> auf die lokalen Variablen einer äußeren Funktion verweisen (wie in jeder <a href="Functions.htm#nested">verschachtelten Funktion</a>), woraufhin ein neues <a href="Functions.htm#closures">Closure</a> erzeugt wird, das jedes Mal seinen Wert zurückgibt, wenn der Fat-Arrow-Ausdruck ausgewertet wird. Die Funktion ist immer eine <a href="Functions.htm#AssumeLocal">Assume-Local</a>-Funktion, da Deklarationen nicht verwendet werden können.</p>
      <p>Gibt man der Funktion einen Namen, kann sie rekursiv oder von anderen verschachtelten Funktionen aufgerufen werden, ohne dass in der Funktion selbst eine Referenz zum <a href="Functions.htm#closures">Closure</a> gespeichert werden muss (und dadurch ein problematischer <a href="Objects.htm#Circular_References">Zirkelbezug</a> entsteht). So ein Name kann auch beim Debuggen helfen, vor allem in Bezug auf <a href="objects/Func.htm#Name">Func.Name</a> oder wenn der Name im Aufrufstapel des Debuggers angezeigt wird.</p>
      <p>Die Fat-Arrow-Syntax kann auch zum Definieren von kurzen <a href="Objects.htm#Custom_Classes_property_short">Eigenschaften</a> und <a href="Objects.htm#Custom_Classes_method">Methoden</a> genutzt werden.</p>
    </td>

  </tr>
  <tr id="comma">
    <td class="center bold">,</td>
    <td><p><strong>Komma (Mehrfachanweisung)</strong>. Kommas können genutzt werden, um mehrere Teilausdrücke auf einer Zeile zu schreiben. Diese Vorgehensweise wird häufig angewendet, um mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, MeineFunk()</code>. Solche Anweisungen werden von links nach rechts ausgeführt.</p>
      <p class="note"><strong>Hinweis</strong>: Eine Zeile, die mit einem Komma (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>. Siehe auch: <a href="#CommaPerf">Leistung in Bezug auf Kommas</a>.</p>
      <p>Das Komma wird auch genutzt, um die Parameter eines Funktionsaufrufs oder einer Kontrollanweisung voneinander zu trennen. Um einen Mehrfachanweisungsausdruck in eine Parameterliste einzufügen, umschließen Sie ihn mit einem zusätzlichen Paar von runden Klammern. <code>MeineFn((x, y))</code> beispielsweise wertet x und y aus, aber übergibt nur y als einzigen Parameter von MeineFn.</p>
    </td>
  </tr>
</table>
<p>Die folgenden Arten von Teilausdrücken überschreiben die Priorität bzw. die Reihenfolge der Auswertung:</p>
<table class="info">
  <tr>
    <th class="center">Ausdruck</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center"><strong>(</strong><em>Ausdruck</em><strong>)</strong></td>
    <td>
      <p>Ein beliebiger in Klammern gesetzter Teilausdruck. <code>(3 + 2) * 2</code> beispielsweise würde zuerst <code>3 + 2</code> auswerten.</p>
      <p>Bei einem Mehrfachanweisungsausdruck wird das Ergebnis der <u>letzten</u> Anweisung zurückgegeben. <code>(a := 1, b := 2, c := 3)</code> beispielsweise gibt 3 zurück.</p>
    </td>
  </tr>
  <tr>
    <td class="center"><p>Mod<strong>()</strong><br>
        Round<strong>()</strong><br>
    Abs<strong>()</strong></p></td>
    <td rowspan="2"><p><strong>Funktionsaufruf</strong>. Zwischen dem Funktionsnamen oder Ausdruck und der runden Startklammer, die die Parameterliste beginnt, dürfen keine Leerzeichen stehen. Einzelheiten finden Sie unter <a href="Language.htm#function-calls">Funktionsaufrufe</a>.</p>
    <p><em>(Ausdruck)</em> muss nicht unbedingt von Klammern umschlossen sein, aber auf diese Weise können ggf. Mehrdeutigkeiten vermieden werden. <code>(x.y)()</code> beispielsweise bezieht eine Funktion aus einer Eigenschaft und ruft sie dann ohne Parameter auf, während <code>x.y()</code> implizit <code>x</code> als ersten Parameter übergeben würde.</p>
    </td>
  </tr>
  <tr>
    <td class="center" style="white-space: nowrap;"><p><em>(Ausdruck)</em><strong>()</strong></p></td>
  </tr>
  <tr>
    <td class="center">Fn(<strong><em>Params</em>*</strong>)</td>
    <td><p><a href="Functions.htm#VariadicCall">Variadischer Funktionsaufruf</a>. <em>Params</em> ist ein enumerierbares Objekt (ein Objekt mit einer <a href="Objects.htm#__Enum">__Enum</a>-Methode), wie z. B. ein <a href="objects/Array.htm">Array</a>, das Parameterwerte enthält.</p></td>
  </tr>
  <tr id="square-brackets">
    <td class="center"><strong>x[y]<br>[a, b, c]</strong></td>
    <td>
      <p><strong>Objektelementzugriff</strong>. Ermittelt oder setzt die <a href="Objects.htm#__Item">__Item</a>-Eigenschaft (oder Standardeigenschaft) des Objekts <em>x</em> mit dem Parameter <em>y</em> (oder mehrere Parameter anstelle von <em>y</em>). Dies entspricht typischerweise einem Array-Element oder einem Element innerhalb einer Sammlung, wobei <em>y</em> der Index oder Schlüssel des Elements ist. Um dem Element einen Wert zuzuweisen, können Sie direkt nach der eckigen Endklammer einen beliebigen <a href="#AssignOp">Zuweisungsoperator</a> verwenden. Zum Beispiel <code>x[y] := z</code>.</p>
      <p><strong>Direkte Array-Schreibweise</strong>. Wenn die eckige Startklammer keinen Wert (oder Teilausdruck, der einen Wert zurückgibt) davor hat, wird die Klammer als Beginn eines direkt geschriebenen Arrays interpretiert. <code>[a, b, c]</code> ist beispielsweise das gleiche wie <code>Array(a, b, c)</code> (a, b und c sind Variablen).</p>
      <p>Weitere Informationen zum allgemeinen Gebrauch finden Sie unter <a href="Objects.htm#Usage_Simple_Arrays">Arrays</a> und <a href="Objects.htm#Usage_Associative_Arrays">Maps</a>.</p>
    </td>
  </tr>
  <tr id="curly-braces">
    <td class="center"><strong>{a: b, c: d}</strong></td>
    <td>
      <p><strong>Direkte Objekt-Schreibweise</strong>. Erstellt ein <a href="objects/Object.htm">Object</a>. Jedes Paar besteht aus einem direkt geschriebenen Eigenschaftsnamen <code>a</code> und einem Eigenschaftswertausdruck <code>b</code>. <code>x := {a: b}</code> beispielsweise ist äquivalent zu <code>x := Object(), x.a := b</code>. <a href="objects/Object.htm#Base">Base</a> kann innerhalb der direkten Objektschreibweise gesetzt werden, aber alle anderen Eigenschaften werden als <em>eigene Werteigenschaften</em> gesetzt, mit der Gefahr oder Möglichkeit, dass die vom Basisobjekt geerbten Eigenschaften überschrieben werden.</p>
      <p>Um einen dynamischen Eigenschaftsnamen zu verwenden, umschließen Sie den Teilausdruck mit Prozentzeichen. Zum Beispiel: <code>{%NameVar%: WertVar}</code>.</p>
    </td>
  </tr>
</table>
<br>
<p id="CommaPerf"><strong>Leistung</strong>: Ausdrücke, die mit einem Komma getrennt werden, sind performanter als einzeln geschriebene Ausdrücke, besonders wenn es darum geht, eine Variable in eine andere Variable zu speichern (z. B. <code>x := y, a := b</code>). Je mehr Ausdrücke zu einem einzigen Ausdruck zusammengefasst werden, desto höher ist die Leistung; zum Beispiel könnte man ein Geschwindigkeitszuwachs von 35 % erreichen, wenn man fünf oder zehn einfache Ausdrücke zu einem Ausdruck kombiniert.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind fest in das Programm integriert und normal abrufbar.</p>
<p class="note">Allgemeine Informationen finden Sie unter <a href="Concepts.htm#built-in-variables">Interne Variablen</a>.</p>
<h3 id="BuiltIn_TOC">Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Skript-Eigenschaften: <a href="#Args">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Skript-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#ListLines">A_ListLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a></li>
  <li>Inaktivität des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a>, <a href="#TimeIdleKeyboard">A_TimeIdleKeyboard</a>, <a href="#TimeIdleMouse">A_TimeIdleMouse</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Clipboard">A_Clipboard</a>, <a href="#Cursor">A_Cursor</a>, <a href="#EventInfo">A_EventInfo</a>, <a href="#misc">(...mehr...)</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3 id="Special_Characters">Sonderzeichen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Space">
    <td>A_Space</td>
    <td>Enthält ein einzelnes Leerzeichen.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Enthält ein einzelnes Tabulatorzeichen.</td>
  </tr>
</table>
<h3 id="prop">Skript-Eigenschaften</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Args">
    <td>A_Args</td>
    <td>Enthält ein <a href="Objects.htm#Usage_Simple_Arrays">Array</a> mit Befehlszeilenparametern. Einzelheiten finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td><p>Kann genutzt werden, um das aktuelle Arbeitsverzeichnis des Skripts abzurufen oder zu setzen, von wo aus standardmäßig auf Dateien zugegriffen werden soll. Der letzte umgekehrte Schrägstrich ist nicht enthalten, es sei denn, es handelt sich um das Stammverzeichnis. Zwei Beispiele: <code>C:\</code> und <code>C:\Meine Dokumente</code>.</p>
    <p>Alternativ kann mit <a href="commands/SetWorkingDir.htm">SetWorkingDir</a> das Arbeitsverzeichnis geändert werden.</p>
    <p>Das Arbeitsverzeichnis des Skripts ist standardmäßig immer A_ScriptDir, egal wie das Skript gestartet wurde.</p></td>
  </tr>
  <tr id="InitialWorkingDir">
    <td>A_InitialWorkingDir</td>
    <td>Das anfängliche Arbeitsverzeichnis des Skripts, das abhängig davon ist, wie das Skript gestartet wurde. Wurde es beispielsweise über eine Verknüpfung gestartet (z. B. im Startmenü), richtet sich dessen anfängliche Arbeitsverzeichnis nach dem Feld "Ausführen in", das im Eigenschaftsfenster der Verknüpfung zu finden ist.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>
      <p>Der vollständige Pfadname des Verzeichnisses, wo sich das aktuelle Skript befindet. Der letzte umgekehrte Schrägstrich wird weggelassen (auch bei Stammverzeichnissen).</p>
      <p>Wenn der Skripttext nicht aus der Datei, sondern <a href="Scripts.htm#stdin">aus der Standardeingabe (stdin) gelesen wird</a>, enthält diese Variable das <a href="#InitialWorkingDir">anfängliche Arbeitsverzeichnis</a>.</p></td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>
      <p>Kann genutzt werden, um den Standardtitel für MsgBox, InputBox, FileSelect, DirSelect und Gui abzurufen oder zu setzen. Wenn dieser Variable nicht vom Skript gesetzt wurde, wird standardmäßig der Dateiname des aktuellen Skripts verwendet, aber ohne Pfad, z. B. MeinSkript.ahk.</p>
      <p>Wenn der Skripttext nicht aus der Datei, sondern <a href="Scripts.htm#stdin">aus der Standardeingabe (stdin) gelesen wird</a>, ist der Standardwert "*".</p>
      <p>Wenn das Skript <a href="Scripts.htm#ahk2exe">kompiliert</a> oder <a href="Program.htm#embedded-scripts">eingebettet</a> ist, dann ist das hier der Name der aktuellen ausführbaren Datei.</p>
    </td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>
      <p>Der vollständige Pfadname des aktuellen Skripts, z. B. C:\Skripte\MeinSkript.ahk</p>
      <p>Wenn der Skripttext nicht aus der Datei, sondern <a href="Scripts.htm#stdin">aus der Standardeingabe (stdin) gelesen wird</a>, ist der Wert "*".</p>
      <p>Wenn das Skript <a href="Scripts.htm#ahk2exe">kompiliert</a> oder <a href="Program.htm#embedded-scripts">eingebettet</a> ist, dann ist das hier der vollständige Pfadname der aktuellen ausführbaren Datei.</p>
    </td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd</td>
    <td>Die HWND-Nummer (eindeutige ID) des versteckten Skript-<a href="Program.htm#main-window">Hauptfensters</a>.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Skripts (oder innerhalb einer <a href="commands/_Include.htm">#Include-Datei</a>, sofern angegeben). Diese Zeilennummer stimmt mit der angezeigten Zeilennummer in <a href="commands/ListLines.htm">ListLines</a> überein; diese Variable ist zum Beispiel nützlich, um einen Fehler zu melden: <code>MsgBox "Eine Zeile konnte nicht in die Log-Datei geschrieben werden (Zeilennummer " A_LineNumber ")"</code>.</p>
    <p>Da beim <a href="Scripts.htm#ahk2exe">Kompilieren eines Skripts</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zusammengefügt werden, sind die Zeilen eventuell anders nummeriert als im unkompilierten Modus.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>
      <p>Der vollständige Pfadname der Datei, zu der <a href="#LineNumber">A_LineNumber</a> gehört. Wenn das Skript aus einer externen Datei geladen wurde, ist das hier dasselbe wie <a href="#ScriptFullPath">A_ScriptFullPath</a>, es sei denn, die Zeile gehört zu einer der <a href="commands/_Include.htm">#Include-Dateien</a> des Skripts.</p>
      <p>Wenn das Skript basierend auf einer <a href="Scripts.htm#ahk2exe-base">BIN-Datei</a> <a href="Scripts.htm#ahk2exe">kompiliert</a> wurde, ist das hier der vollständige Pfadname der aktuellen ausführbaren Datei, analog zu <a href="#ScriptFullPath">A_ScriptFullPath</a>.</p>
      <p>Wenn das Skript <a href="Program.htm#embedded-scripts">eingebettet</a> ist, enthält A_LineFile ein Sternchen (*), gefolgt von dem Ressourcennamen; z. B. *#1</p>
    </td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc</td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeineFunktion. Siehe auch: <a href="objects/Func.htm#Name">Name-Eigenschaft (Func)</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>Enthält die Version des AutoHotkey-Programms, mit dem das Skript ausgeführt wird, z. B. 1.0.22. Wird diese Variable in einem <a href="Scripts.htm#ahk2exe">kompilierten Skript</a> verwendet, meldet sie die Version des AutoHotkey-Programms, mit der das Skript ursprünglich kompiliert wurde. Aufgrund der Struktur der Versionsnummer kann ein Skript mithilfe von "&gt;" oder "&gt;=" überprüfen, ob A_AhkVersion größer als eine bestimmte Versionsnummer ist. Zum Beispiel: <code>if (A_AhkVersion &gt;= "1.0.25.07")</code>.</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td>
      <p>Bei unkompilierten oder <a href="Program.htm#embedded-scripts">eingebetteten</a> Skripten: Der vollständige Pfadname der EXE-Datei, mit der das aktuelle Skript gerade ausgeführt wird. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
      <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Skripten</a>, die auf einer <a href="Scripts.htm#ahk2exe-base">BIN-Datei</a> basieren, wird der Wert durch Lesen des Installationsverzeichnisses aus der Registry und Anfügen von "\AutoHotkey.exe" ermittelt. Wenn AutoHotkey nicht installiert ist, ist der Wert leer. Das folgende Beispiel ist äquivalent:</p>
      <pre>InstallDir := RegRead("HKLM\SOFTWARE\AutoHotkey", "InstallDir", "")
AhkPath := InstallDir ? InstallDir "\AutoHotkey.exe" : ""</pre>
      <p>Bei kompilierten Skripten, die auf einer EXE-Datei basieren, enthält A_AhkPath den vollständigen Pfadnamen des kompilierten Skripts. Dies kann in Kombination mit <a href="Scripts.htm#SlashScript">/script</a> verwendet werden, um externe Skripte auszuführen. Um stattdessen die installierte Kopie von AutoHotkey zu lokalisieren, lesen Sie die Registry wie oben gezeigt.</p>
    </td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Enthält 1, wenn das Skript als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn das nicht der Fall ist.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>
      <p>Das aktuelle 4-stellige Jahr (z. B. 2004). A_Year enthält denselben Wert.</p>
      <p class="note"><strong>Hinweis</strong>: Um die formatierte Version einer Uhrzeit oder eines Datums gemäß Ihrer aktuellen Sprach- und Regionseinstellungen abzurufen, können Sie <code><a href="commands/FormatTime.htm">FormatTime</a>()</code> (Uhrzeit und langes Datum) oder <code><a href="commands/FormatTime.htm">FormatTime</a>(, "LongDate")</code> (langes Datumformat) nutzen.</p>
    </td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle 2-stellige Monat (01-12). A_Mon enthält denselben Wert.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle 2-stellige Tag des Monats (01-31). A_MDay enthält denselben Wert.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle 1-stellige Wochentag (1-7). 1 ist Sonntag in allen Sprach- und Regionseinstellungen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag im Jahr (1-366). Der Wert enthält keine führenden Nullen, z. B. wird 9 abgerufen, nicht 009. Das folgende Beispiel zeigt, wie ein Wert mit führenden Nullen abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>(, "YDay0")</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Das aktuelle Jahr und Wochennummer (z. B. 200453) gemäß ISO 8601. Um das Jahr von der Woche zu trennen, nutzen Sie <code>Jahr := <a href="commands/SubStr.htm">SubStr</a>(A_YWeek, 1, 4)</code> und <code>Woche := <a href="commands/SubStr.htm">SubStr</a>(A_YWeek, -2)</code>. Genaue Definition von A_YWeek: Wenn die Woche mit dem 1. Januar mindestens vier Tage im neuen Jahr hat, ist sie Woche 1. Ansonsten ist sie die letzte Woche des vorherigen Jahres, und die nachfolgende Woche die erste Woche des neuen Jahres.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle 2-stellige Stunde (00-23) im 24-Stunden-Format. Das folgende Beispiel zeigt, wie die Zeit im 12-Stunden-Format mit den Indikatoren AM bzw. PM abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>(, "h:mm:ss tt")</code></td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle 2-stellige Minute (00-59).</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle 2-stellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle 3-stellige Millisekunde (000-999). Das folgende Beispiel zeigt, wie die Nullen am Anfang entfernt werden können: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>
      <p>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format.</p>
      <p class="note"><strong>Hinweis</strong>: Datums- und Zeitberechnungen können mit <a href="commands/DateAdd.htm">DateAdd</a> und <a href="commands/DateDiff.htm">DateDiff</a> durchgeführt werden. Außerdem können Sie <a href="commands/FormatTime.htm">FormatTime</a> nutzen, um das Datum und/oder die Uhrzeit gemäß Ihrer aktuellen Sprach- und Regionseinstellungen zu formatieren.</p>
    </td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die aktuelle koordinierte Weltzeit (Coordinated Universal Time oder kurz UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das gleiche wie Greenwich Mean Time (GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Die Zeit in Millisekunden, die seit dem Start des Systems verstrichen ist, bis zu einem Maximum von 49,7 Tagen. Um diese verstrichene Zeit zu messen, speichern Sie A_TickCount in eine Variable und ziehen Sie sie später vom aktuellen A_TickCount-Wert ab. Zum Beispiel:</p>
        <pre>StartZeit := A_TickCount
Sleep 1000
VerstricheneZeit := A_TickCount - StartZeit
MsgBox VerstricheneZeit " Millisekunden sind verstrichen."</pre>
<p>Schauen Sie sich <a href="commands/DllCall.htm#ExQPC">QueryPerformanceCounter()</a> an, wenn Sie eine höhere Genauigkeit als die 10 ms von A_TickCount benötigen.</p>
</td>
  </tr>
</table>
<h3 id="settings">Skript-Einstellungen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält 1, wenn das Skript <a href="commands/Suspend.htm">suspendiert</a> ist, ansonsten 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused</td>
    <td>Enthält 1, wenn der <a href="misc/Threads.htm">Thread</a> direkt unterhalb des aktuellen Threads <a href="commands/Pause.htm">pausiert</a> ist. Ansonsten ist eine 0 enthalten.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical</td>
    <td>Enthält 0, wenn <a href="commands/Critical.htm">Critical</a> im <a href="misc/Threads.htm">aktuellen Thread</a> ausgeschaltet ist. Ansonsten enthält A_IsCritical einen Integer größer als 0 bzw. die von Critical verwendete <a href="commands/Critical.htm#Interval">Meldungsüberprüfungsfrequenz</a>. Um den aktuellen Status von Critical zu speichern und wiederherzustellen, können Sie <code>Alt_IsCritical := A_IsCritical</code> und später <code>Critical %Alt_IsCritical%</code> verwenden.</td>
  </tr>
  <tr id="ListLines">
    <td>A_ListLines</td>
    <td>Kann genutzt werden, um abzurufen oder festzulegen, ob Zeilen protokolliert werden sollen. Mögliche Werte sind 0 (deaktiviert) und 1 (aktiviert). Einzelheiten finden Sie unter <a href="commands/ListLines.htm">ListLines</a>.</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>Kann genutzt werden, um den Modus der Titelübereinstimmung abzurufen oder zu setzen. Mögliche Werte sind 1, 2, 3 und RegEx. Einzelheiten finden Sie unter <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>Kann genutzt werden, um die Geschwindigkeit der Titelübereinstimmung abzurufen oder zu setzen. Mögliche Werte sind Fast und Slow. Einzelheiten finden Sie unter <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>Kann genutzt werden, um abzurufen oder festzulegen, ob versteckte Fenster erkannt werden sollen. Mögliche Werte sind 0 (deaktiviert) und 1 (aktiviert). Einzelheiten finden Sie unter <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>Kann genutzt werden, um abzurufen oder festzulegen, ob versteckter Text in einem Fenster erkannt werden soll. Mögliche Werte sind 0 (deaktiviert) und 1 (aktiviert). Einzelheiten finden Sie unter <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td>Kann genutzt werden, um die Standardcodierung für verschiedene interne Funktionen abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td>Kann genutzt werden, um den Send-Modus abzurufen oder zu setzen. Mögliche Werte sind Event, Input, Play und InputThenPlay. Einzelheiten finden Sie unter <a href="commands/SendMode.htm">SendMode</a>.</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td>Kann genutzt werden, um den Sendelevel, ein Integer von 0 bis 100, abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/SendLevel.htm">SendLevel</a>.</td>
  </tr>
  <tr id="StoreCapsLockMode">
    <td>A_StoreCapsLockMode</td>
    <td>Kann genutzt werden, um abzurufen oder festzulegen, ob der Zustand der <kbd>Feststell</kbd>-Taste nach einer <a href="commands/Send.htm">Send</a>-Aktion wiederhergestellt werden soll. Mögliche Werte sind 0 (deaktiviert) und 1 (aktiviert). Einzelheiten finden Sie unter <a href="commands/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>.</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    A_KeyDuration</td>
    <td>Kann genutzt werden, um die Verzögerung oder Dauer (in Millisekunden) für Tastendrücke abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>.</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    A_KeyDurationPlay</td>
    <td>Kann genutzt werden, um die Verzögerung oder Dauer (in Millisekunden) für Tastendrücke, die über den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus gesendet werden, abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>Kann genutzt werden, um die Verzögerung (in Millisekunden) für fensterspezifische Funktionen abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/SetWinDelay.htm">SetWinDelay</a>.</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>Kann genutzt werden, um die Verzögerung (in Millisekunden) für steuerelement­modifizierende Funktionen abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/SetControlDelay.htm">SetControlDelay</a>.</td>
  </tr>
  <tr id="MenuMaskKey">
    <td>A_MenuMaskKey</td>
    <td>Bestimmt, welche Taste zum Maskieren von Win- oder Alt-KeyUp-Ereignissen verwendet wird. Einzelheiten finden Sie unter <a href="misc/A_MenuMaskKey.htm">A_MenuMaskKey</a>.</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    A_MouseDelayPlay</td>
    <td>Kann genutzt werden, um die Verzögerung (in Millisekunden) für Mausaktionen abzurufen oder zu setzen. A_MouseDelay gilt für den traditionellen SendEvent-Modus, während A_MouseDelayPlay für den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus vorgesehen ist. Einzelheiten finden Sie unter <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>Kann genutzt werden, um die Standardgeschwindigkeit des Mauszeigers, ein Integer von 0 (schnell) bis 100 (langsam), abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>.</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    A_CoordModePixel<br>
    A_CoordModeMouse<br>
    A_CoordModeCaret<br>
    A_CoordModeMenu</td>
    <td>Kann genutzt werden, um den Bereich, zu dem Koordinaten relativ sein sollen, abzurufen oder zu setzen. Mögliche Werte sind Screen, Window und Client. Einzelheiten finden Sie unter <a href="commands/CoordMode.htm">CoordMode</a>.</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td>Kann genutzt werden, um die Registry-Ansicht abzurufen oder zu setzen. Mögliche Werte sind 32, 64 und Default. Einzelheiten finden Sie unter <a href="commands/SetRegView.htm">SetRegView</a>.</td>
  </tr>
  <tr id="TrayMenu">
    <td>A_TrayMenu</td>
    <td><p>Gibt ein <a href="objects/Menu.htm">Menu-Objekt</a> zurück, das genutzt werden kann, um das Tray-Menü zu ändern oder anzuzeigen.</p></td>
  </tr>
  <tr id="AllowMainWindow">
    <td>A_AllowMainWindow</td>
    <td><p>Kann genutzt werden, um abzurufen oder festzulegen, ob das <a href="Program.htm#main-window">Hauptfenster</a> des Skripts über das Tray-Symbol geöffnet werden darf. Mögliche Werte sind 0 (verboten) und 1 (erlaubt).</p>
    <p>Wenn das Skript weder <a href="Scripts.htm#ahk2exe">kompiliert</a> noch <a href="Program.htm#embedded-scripts">eingebettet</a> ist, wird diese Variable standardmäßig auf 1 gesetzt, andernfalls wird diese Variable standardmäßig auf 0 gesetzt, kann aber durch Zuweisung eines Wertes überschrieben werden. Setzt man diese Variable auf 1, wird außerdem der Menüpunkt "Open" im Tray-Menü wiederhergestellt und die Menüpunkte im View-Menü des Hauptfensters, wie z. B. "Lines most recently executed", das den Quellcode des Skripts und andere Informationen anzeigt, aktiviert.</p>
    <p>Die folgenden Funktionen sind immer in der Lage, das Hauptfenster zu öffnen und die entsprechenden View-Optionen zu aktivieren, sofern sie beim Ausführen des Skripts erreicht werden: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/ListVars.htm">ListVars</a>, <a href="commands/ListHotkeys.htm">ListHotkeys</a> und <a href="commands/KeyHistory.htm">KeyHistory</a>.</p>
    <p>Die Variable auf 1 zu setzen, verhindert nicht, dass das Hauptfenster von <a href="commands/WinShow.htm">WinShow</a> angezeigt oder von <a href="commands/ControlGetText.htm">ControlGetText</a> oder ähnlichen Methoden untersucht wird, aber es verhindert, dass der Quellcode des Skripts und andere Informationen via Hauptfenster preisgegeben werden, außer wenn eine der oben aufgeführten Funktionen vom Skript aufgerufen wird.</p></td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Kann genutzt werden, um abzurufen oder festzulegen, ob das <a href="Program.htm#tray-icon">Tray-Symbol</a> versteckt werden soll. Mögliche Werte sind 0 (sichtbar) und 1 (versteckt). Einzelheiten finden Sie unter <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a>.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td><p>Kann genutzt werden, um den Tooltiptext des <a href="Program.htm#tray-icon">Tray-Symbols</a> abzurufen oder zu setzen; dieser wird angezeigt, wenn sich der Mauszeiger darüber befindet. Wenn diese Variable leer ist, wird stattdessen der Name des Skripts angezeigt.</p>
    <p>Um einen Tooltip mehrzeilig zu machen, trennen Sie jede Zeile mit einem Zeilenumbruchszeichen (`n), z. B. <code>"Zeile1`nZeile2"</code>. Nur die ersten 127 Zeichen werden angezeigt, außerdem wird der Text beim ersten Tabulatorzeichen, falls vorhanden, gekürzt.</p></td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Leer, es sei denn, es wurde ein benutzerdefiniertes <a href="Program.htm#tray-icon">Tray-Symbol</a> via <a href="commands/TraySetIcon.htm">TraySetIcon</a> definiert, dann ist der vollständige Pfadname der Datei des neuen Symbols enthalten.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten ist die Nummer der Symbolgruppe enthalten, die in A_IconFile verwendet wird (üblicherweise 1).</td>
  </tr>
</table>
<h3 id="User_Idle_Time">Inaktivität des Benutzers</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Die Zeit in Millisekunden, die seit der letzten Eingabe via Tastatur, Maus usw. verstrichen ist. Diese Variable ist nützlich, um herauszufinden, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Skripten (z. B. die <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Funktion) werden diesen Wert wieder auf 0 setzen. Da dieser Wert meistens schrittweise um 10 erhöht wird, ist es ratsam, ihn nicht zu überprüfen, ob er exakt mit einem anderen Wert übereinstimmt. Überprüfen Sie stattdessen, ob dieser Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel:
<pre>if A_TimeIdle &gt; 600000
    MsgBox "Die letzte Eingabeaktivität erfolgte vor ca. 10 Minuten."</pre></td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td>Ähnlich wie oben, allerdings werden künstliche Tastendrücke und/oder Mausklicks ignoriert, wenn der entsprechende Hook (<a href="commands/InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/InstallMouseHook.htm">Maus</a>) installiert ist; das heißt, dass diese Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastendrücke und Mausklicks fälschlicherweise die Aktivität des Benutzers vortäuschen. Wenn keine Hooks installiert sind, ist diese Variable äquivalent zu A_TimeIdle. Wenn nur ein Hook installiert ist, wird A_TimeIdlePhysical nur von dieser Art von physischer Eingabe beeinflusst (die Eingabe des anderen/nicht-installierten Hooks, hat sowohl physisch als auch künstlich keine Auswirkung).</td>
  </tr>
  <tr id="TimeIdleKeyboard">
    <td>A_TimeIdleKeyboard</td>
    <td>Wenn der <a href="commands/InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Tastatureingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
  <tr id="TimeIdleMouse">
    <td>A_TimeIdleMouse</td>
    <td>Wenn der <a href="commands/InstallMouseHook.htm">Maus-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Mauseingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
</table>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">nicht-automatisch-ersetzende Hotstring</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, wenn der <a href="misc/Threads.htm">aktuelle Thread</a> von einem anderen Hotkey oder Hotstring unterbrochen wird, deshalb ist es in der Regel besser, den Parameter <a href="Hotkeys.htm#ThisHotkey">ThisHotkey</a> wenn möglich zu verwenden.</p>
      <p>Jeder neu erstellte Hotkey -- entweder via <a href="commands/Hotkey.htm">Hotkey-Funktion</a> oder <a href="Hotkeys.htm">Zweifach-Doppelpunkt-Syntax</a> -- erhält einen fest zugewiesenen Namen, der eine Zeichenkette bestehend aus seinem Tastennamen und der Reihenfolge seiner Modifikatorsymbolen ist. Dieser Name wird von allen <a href="commands/_HotIf.htm#variant">Varianten</a> des Hotkeys verwendet.</p>
      <p>Jeder neu erstellte Hotstring erhält einen fest zugewiesenen Namen, der identisch zum verwendeten Text ist.</p>
      </td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Das gleiche wie oben, aber für den vorher ausgeführten Hotkey. Ansonsten leer.</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td>Der Name der Taste, die vor dem Drücken oder Loslassen der letzten Taste gedrückt wurde, oder leer, wenn kein geeigneter Tastendruck im Tastenverlauf gefunden werden kann. Alle via Skript erzeugten Eingaben werden ignoriert. Bevor diese Variable genutzt werden kann, muss der <a href="commands/InstallKeybdHook.htm">Tastatur</a>- oder <a href="commands/InstallMouseHook.htm">Maus-Hook</a> installiert und der <a href="commands/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Die Zeit in Millisekunden, die seit dem Drücken von A_ThisHotkey verstrichen ist. Dieser Wert wird leer sein, wenn A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Die Zeit in Millisekunden, die seit dem Drücken von A_PriorHotkey verstrichen ist. Dieser Wert wird leer sein, wenn A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Ein <a href="Hotstrings.htm#EndChars">Endungszeichen</a>, das der Benutzer zuletzt gedrückt hat, um einen <a href="Hotstrings.htm">nicht-automatisch-ersetzenden Hotstring</a> auszulösen. Wenn kein Endungszeichen notwendig war (wegen der *-Option), wird diese Variable leer sein.</td>
  </tr>
  <tr id="MaxHotkeysPerInterval">
    <td>A_MaxHotkeysPerInterval</td>
    <td>Die maximale Anzahl der Hotkeys, die innerhalb eines via A_HotkeyInterval definierten Zeitrahmens gedrückt werden können, ohne dass ein Warndialogfenster ausgelöst wird. Einzelheiten finden Sie unter <a href="misc/A_MaxHotkeysPerInterval.htm">A_MaxHotkeysPerInterval</a>.</td>
  </tr>
  <tr id="HotkeyInterval">
    <td>A_HotkeyInterval</td>
    <td>Die Länge des von <a href="misc/A_MaxHotkeysPerInterval.htm">A_MaxHotkeysPerInterval</a> verwendeten Intervalls, in Millisekunden.</td>
  </tr>
  <tr id="HotkeyModifierTimeout">
    <td>A_HotkeyModifierTimeout</td>
    <td>Beeinflusst das Verhalten von <a href="commands/Send.htm">Send</a> in Verbindung mit den <a href="Hotkeys.htm">Hotkey</a>-Modifikatoren <kbd>Strg</kbd>, <kbd>Alt</kbd>, <kbd>Win</kbd> und <kbd>Umschalt</kbd>. Einzelheiten finden Sie unter <a href="misc/A_HotkeyModifierTimeout.htm">A_HotkeyModifierTimeout</a>.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ComSpec">
    <td>A_ComSpec</td>
    <td><p>Enthält wie die ComSpec-Umgebungsvariable den Pfadnamen des Befehlszeileninterpreters. Diese Variable wird oft in Verbindung mit <a href="commands/Run.htm">Run/RunWait</a> genutzt. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Windows\system32\cmd.exe</pre>
    </td>
  </tr>
  <tr id="Temp">
    <td>A_Temp</td>
    <td><p>Der vollständige Pfadname des Ordners zum Speichern von temporären Dateien. Folgende Standorte werden der Reihenfolge nach durchsucht, um den Pfadnamen zu ermitteln: 1) <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis. Zum Beispiel:</p>
    <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Local\Temp</pre>
  </td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td>
    <p>Die Versionsnummer des Betriebssystems im Format "<em>Haupt</em>.<em>Neben</em>.<em>Build</em>". Windows 7 SP1 ist beispielsweise 6.1.7601.</p>
    <p>Beachten Sie, dass das Betriebssystem eine andere Versionsnummer meldet bzw. A_OSVersion einen anderen Wert enthält, wenn der Kompatibilitätsmodus im Eigenschaftsfenster der AutoHotkey-Datei oder des kompilierten Skripts eingeschaltet ist.</p>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td>Enthält 1 (wahr), wenn das Betriebssystem eine 64-Bit-Version ist, oder 0 (falsch), wenn es eine 32-Bit-Version ist.</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td>Enthält die Größe eines Pointers in Bytes. Dieser Wert ist entweder 4 oder 8, abhängig davon, ob zum Ausführen des Skripts die 32-Bit- oder 64-Bit-Version von AutoHotkey verwendet wird.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems als <a href="misc/Languages.htm">4-stelligen Code</a>.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Netzwerkname des Computers.</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der dieses Skript gestartet hat.</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: <code>C:\Windows</code></td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles</td>
    <td>
      <p>Das Verzeichnis der Programmdateien (z. B. <code>C:\Programme</code> oder <code>C:\Programme (x86)</code>). Die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <em>ProgramFiles</em> enthält in der Regel denselben Wert.</p>
      <p>Für <a href="#Is64bitOS">64-Bit-Systeme</a> (nicht 32-Bit-Systeme) gilt Folgendes:</p>
      <ul>
        <li>Wenn zum Ausführen des Skripts die 32-Bit-Version von AutoHotkey verwendet wird, enthält A_ProgramFiles den Pfadnamen des Ordners "Programme (x86)".</li>
        <li>32-Bit-Prozesse können auf die Umgebungsvariable <em>ProgramW6432</em> zurückgreifen, um den Pfadnamen des 64-Bit-Ordners "Programme" abzurufen. In Windows 7 und höher steht diese Variable auch für 64-Bit-Prozesse zur Verfügung.</li>
        <li>Die Umgebungsvariable <em>ProgramFiles(x86)</em> enthält den Pfadnamen des 32-Bit-Ordners "Programme (x86)".</li>
      </ul>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der anwendungsspezifische Daten des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming</pre>
    </td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der anwendungsspezifische Daten aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData</pre>
    </td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Desktop-Dateien des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\Desktop</pre>
    </td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Desktop-Dateien aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\Public\Desktop</pre>
    </td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Startmenü-Dateien des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Startmenü-Dateien aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>
      <p>Der vollständige Pfadname des Programme-Ordners im Startmenü des aktuellen Benutzers. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs</pre>
    </td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>
      <p>Der vollständige Pfadname des Programme-Ordners im Startmenü aller Benutzer. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs</pre>
  </td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>
      <p>Der vollständige Pfadname des Autostart-Ordners im Startmenü des aktuellen Benutzers. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>
      <p>Der vollständige Pfadname des Autostart-Ordners im Startmenü aller Benutzer. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>
      <p>Der vollständige Pfadname des Ordners "Eigene Dokumente", der beliebige Dateien (vorzugsweise Dokumente) des aktuellen Benutzers enthält. Wenn der Ordner die oberste Ebene eines Laufwerks ist, wird im Gegensatz zu anderen ähnlichen Variablen der umgekehrte Schrägstrich am Ende weggelassen (zum Beispiel wäre <code>M:</code> anstelle von <code>M:\</code> enthalten). Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\Documents</pre>
  </td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer über administrative Rechte verfügt, ist eine 1 enthalten. Ansonsten ist eine 0 enthalten.</p>
    <p id="RequireAdmin">Um das Skript sich selbst mit administrativen Rechten neu starten zu lassen (oder um diese Rechte vom Benutzer einzufordern), verwenden Sie <a href="commands/Run.htm#RunAs">Run *RunAs</a>. Beachten Sie aber, dass die Ausführung des Skripts als Administrator dazu führt, dass alle vom Skript gestarteten Programme auch als Administrator ausgeführt werden. Eine mögliche Alternative finden Sie in <a href="FAQ.htm#uac">der FAQ</a>.</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    A_ScreenHeight</p></td>
    <td><p>Die Breite und Höhe des primären Bildschirms in Pixel (z. B. 1024 und 768).</p>
      <p>Mit <a href="commands/SysGet.htm">SysGet</a> können die Abmessungen von nicht-primären Bildschirmen abgerufen werden.</p>
      <p>Das folgende Beispiel zeigt, wie die Breite und Höhe des gesamten Desktops ermittelt werden kann (selbst wenn er sich über mehrere Bildschirme erstrecken sollte):</p>
<pre>
VirtuelleBreite := <a href="commands/SysGet.htm">SysGet</a>(78)
VirtuelleHöhe := <a href="commands/SysGet.htm">SysGet</a>(79)
</pre>
    <p>Mit <a href="commands/SysGet.htm">SysGet</a> kann zudem der Arbeitsbereich eines Bildschirms ermittelt werden. Dieser Bereich ist in der Regel kleiner als der Gesamtbereich des Bildschirms, weil die Taskleiste und andere registrierte Desktopsymbolleisten nicht berücksichtigt werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI</td>
    <td>Die Anzahl der Pixel pro logischen Zoll entlang der Bildschirmbreite. Dieser Wert bezieht sich auf alle Bildschirme eines Systems. Standardmäßig gilt ein DPI-Wert von 96, abhängig von der Textgrößeneinstellung des Systems. Siehe auch <a href="objects/Gui.htm#DPIScale">-DPIScale</a>-GUI-Option.</td>
  </tr>
</table>
<h3 id="misc">Sonstiges</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Clipboard">
    <td>A_Clipboard</td>
    <td>Kann genutzt werden, um den Inhalt der systeminternen Zwischenablage abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="misc/A_Clipboard.htm">A_Clipboard</a>.</td>
  </tr>
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des aktuell angezeigten Mauszeigers. Die Variable kann eines der folgenden Wörter enthalten: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Großbuchstaben nach Size sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/OnMessage.htm">OnMessage</a></li>
        <li><a href="misc/RegExCallout.htm">Callouts in Regulären Ausdrücken</a></li>
      </ul>
      <p>Hinweis: Jeder <a href="misc/Threads.htm">Thread</a> verwaltet seinen eigenen Wert für A_EventInfo (im Gegensatz zu Variablen wie A_ThisHotkey). Das heißt, dass die aktuellen Werte solcher Variablen für jeden Thread erhalten bleiben, egal ob er zwischenzeitlich von einem anderen Thread unterbrochen wird.</p>
      <p>A_EventInfo kann auch vom Skript gesetzt werden, aber akzeptiert werden nur vorzeichenlose Integer innerhalb eines Pointer-Bereichs (32-Bit oder 64-Bit, je nach Version von AutoHotkey).</p></td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td><p>Diese Variable ist üblicherweise das Ergebnis der Systemfunktion GetLastError(), nachdem das Skript bestimmte Funktionen aufgerufen hat, inklusive <a href="commands/DllCall.htm">DllCall</a>, <a href="commands/Run.htm">Run/RunWait</a>, File/Ini/Reg-Funktionen (wo dokumentiert) und möglicherweise andere. A_LastError ist eine Nummer zwischen 0 und 4294967295 (immer in dezimaler Form, nicht hexadezimal). Null (0) bedeutet Erfolg; jede andere Nummer bedeutet, dass der Aufruf fehlgeschlagen ist. Jede Nummer entspricht einem bestimmten Fehlerzustand (Sie erhalten eine Liste, wenn Sie auf <a href="http://www.microsoft.com">www.microsoft.com</a> nach "system error codes" suchen). A_LastError wird pro Thread gesetzt; das heißt, dass der Inhalt dieser Variable nicht geändert wird, selbst wenn der aktuelle Thread zwischendurch von einem anderen <a href="misc/Threads.htm">Thread</a> unterbrochen wird.</p>
    <p>Das Speichern eines Wertes in A_LastError bewirkt zudem, dass die Systemfunktion SetLastError() aufgerufen wird.</p></td>
  </tr>
  <tr id="TrueFalse">
    <td>True<br />False</td>
    <td><p>Enthalten 1 und 0. Sie können verwendet werden, um ein Skript besser lesbar zu machen. Einzelheiten finden Sie unter <a href="Concepts.htm#boolean">Boolesche Werte</a>.</p>
      <p>Diese sind eigentlich <a href="Language.htm#constants">Schlüsselwörter</a>, keine Variablen.</p>
    </td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Index">
    <td>A_Index</td>
    <td>Kann genutzt werden, um den aktuellen Schleifendurchlauf (ein 64-Bit-Integer) abzurufen oder zu setzen. Wenn beispielsweise das Skript den Schleifenkörper zum ersten Mal ausführt, enthält diese Variable eine 1. Einzelheiten finden Sie unter <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopFiles.htm">Datei-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopReg.htm">Registry-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopRead.htm">dateilesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">parsende Schleife</a>.</td>
  </tr>
</table>

<h2 id="cap">Kapazität und Speicher von Variablen</h2>
<ul>
  <li>Wenn man einer Variable eine neue Zeichenkette zuweist, die länger als der aktuelle Inhalt der Variable ist, wird der reservierte Systemspeicher automatisch erweitert.</li>
  <li>Um den reservierten Speicher einer großen Variable wieder freizugeben, weisen Sie ihr einen leeren Wert zu (z. B. <code>Var := ""</code>).</li>
  <li>Es können beliebig viele Variablen erstellt werden. Das Programm unterstützt mehrere Millionen Variablen, ohne dass es signifikant an Leistung einbüßt.</li>
  <li>Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen in der Regel Floating-Point-Werte mit einer Genauigkeit von 15 Nachkommastellen. Integer können vorzeichenfähige 64-Bit-Werte sein, die einen Bereich von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) abdecken. Integer-Konstanten außerhalb dieses Bereichs werden umgekehrt. Ähnlich verhält es sich mit arithmetischen Operationen bei Integern, die bei einem Überlauf umgekehrt werden (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>

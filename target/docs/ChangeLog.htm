<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Änderungen und neue Features | AutoHotkey v2</title>
<meta name="description" content="Änderungen und neue Features, eingeführt durch den aktuellen Entwicklungszweig von AutoHotkey." />
<meta name="ahk:equiv-v1" content="AHKL_ChangeLog.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Änderungen und neue Features</h1>
<p><a href="v2-changes.htm">Änderungen von v1.1 bis v2.0</a> behandelt die Unterschiede zwischen v1.1 und v2.0.</p>
<p>Alle technischen Einzelheiten zu den Änderungen finden Sie auf <a href="https://github.com/AutoHotkey/AutoHotkey/tree/alpha">GitHub</a>.</p>

<h2 id="v2.0.7">2.0.7 - 2. September 2023</h2>
<p>Behoben: Bei MouseClickDrag kann nun X1 und Y1 weggelassen werden.</p>
<p>Behoben: Maus-AltTab-Hotkeys unterdrückten nicht die Ausführung eines Präfix-Hotkeys, z.B. <code>1::</code> für <code>1 &amp; WheelDown::AltTab</code>. (fehlerhaft seit v2.0.4)</p>
<p>Behoben: Hook-Hotkeys erkannten keine Modifikatoren, die via SendInput nach unten gedrückt wurden.</p>
<p>Behoben: A_AhkPath ist nun nicht mehr auf die Groß-/Kleinschreibung oder das Format der Befehlszeile angewiesen, die/das zum Starten des Prozesses verwendet wird.</p>
<p>Behoben: Heap-Korruption bei einer Fenstersuche mit Gruppen. (fehlerhaft seit v2.0.6)</p>
<p><strong>Launcher</strong></p>
<p>Behoben: #Requires wurde nicht erkannt, wenn dahinter ein anderer Kommentar als <code>; prefer <i>xxx</i></code> stand. (fehlerhaft seit v2.0.6)</p>
<p>Behoben: Syntaxerkennung fehlinterpretierte mehrzeilige automatisch-ersetzende Hotstrings.</p>
<p><strong>Window Spy</strong></p>
<p>Geändert: Window Spy verwendet nun die Schriftart Segoe UI mit der Schriftgröße 9, in Übereinstimmung mit Dash.</p>

<h2 id="v2.0.6">2.0.6 - 30. August 2023</h2>
<p>Behoben: Mehrdeutigkeiten bei COM-Aufrufen, z.B. wenn <code>x.y</code> als <code>x.y()</code> fungiert.</p>
<p>Behoben: Haltepunkte bei Kontrollanweisungen wurden "getroffen", wenn eine Fat-Arrow-Funktion in der Zeile darunter zurückkehrt.</p>
<p>Behoben: <code>Default :</code> verbindet sich nicht mehr mit der Zeile darunter. Dies verhinderte, dass <code>Default :</code> am Ende eines Switch-Blocks verwendet werden konnte, und bewirkte, dass jede nachfolgende Zeile die Zeilennummer des Defaults erhielt.</p>
<p>Optimiert: ProcessGetPath, ProcessSetPriority und ProcessClose durchlaufen nicht mehr alle Prozesse, wenn eine gültige PID angegeben ist, auch wenn der Zugriff auf den Prozess verweigert wird.</p>
<p>Behoben: <code>LWin::Alt</code> konnte nicht zum Aktivieren einiger Alt-Tastenkombinationen verwendet werden.</p>
<p>Behoben: TypeError, der von <code>x is y</code> ausgelöst wird, zeigt nun "Class" statt "Object" an.</p>
<p>Behoben: FensterTitel unterstützt nun Kriterien länger als 1023 Zeichen.</p>
<p>Behoben: Es gab Probleme, wenn <code>&amp;ref</code> auf verschiedene Aliase derselben Variable angewendet wurde.</p>
<p>Behoben: Bestimmte Standardausdrücke von optionalen Parametern (mit Ausnahme einfacher direkt geschriebener Werte) verhinderten die Verwendung von Assume-Global/Assume-Static.</p>

<h2 id="v2.0.5">2.0.5 - 12. August 2023</h2>
<p>Behoben: Ein Speicherleck, das durch falsche Referenzzählung verursacht wurde, wenn ein Objekt via COM enumeriert wird. [PR# 325]</p>
<p>Behoben: Interne Aufrufe von __Enum rufen nun nicht mehr __Call auf.</p>
<p>Behoben: Fehlermeldungen bezüglich des Parameters #65535.</p>
<p>Behoben: Falsche IEnumVARIANT-Rückgabeanzahl.</p>
<p>Behoben: Download löste OSError(0) aus, obwohl der Fehler ungleich Null sein sollte.</p>
<p>Behoben: LV.Add/Insert/Modify verursachte einen Absturz, wenn die Mindestanzahl von Parametern übergeben wird.</p>
<p>Behoben: Stack-Traces ignorieren nun __new-Aufrufe für Error-Unterklassen.</p>

<h2 id="v2.0.4">2.0.4 - 3. Juli 2023</h2>
<p>Geändert: Die Reload-Schaltfläche in Fehler-/Warndialogfenstern schließt das Fenster nun explizit, auch dann, wenn die aktuelle Skriptinstanz nicht terminiert ist.</p>
<p>Entfernt: Eine Optimierung für <code>return var</code>, die dazu führte, dass die Variable beim Zugriff innerhalb eines <code>finally</code>-Blocks leer erschien.</p>
<p>Behoben: Default (Switch) erlaubt nun Leerzeichen vor dem Doppelpunkt.</p>
<p>Behoben: Array.Prototype.RemoveAt gibt nun den entfernten Wert zurück, wenn Länge mit <code>unset</code> oder <code>var?</code> "explizit weggelassen" wird.</p>
<p>Behoben: Kein Absturz mehr, wenn ein ComObject an eine For-Schleife übergeben wird, bei der nur die zweite Variable angegeben ist.</p>
<p><strong>Änderungen von v1.1.37.00 und v1.1.37.01 übernommen:</strong></p>
<p>Geändert: COM-Methodenaufrufe und -Eigenschaftsaufrufe übergeben große Integer nun als VT_I8, nicht mehr als VT_R8 (Floating-Point), um den ursprünglichen Typ und die Genauigkeit beizubehalten. Integer im 32-Bit-Bereich werden weiterhin als VT_I4 übergeben.</p>
<p>Hinzugefügt: Unterstützung für Multi-Variablen-Enumeratoren (For-Schleifen) mit IDispatch-gewrappten AutoHotkey-Objekten. Sowohl das Skript, das das Objekt aufruft, als auch das Objekt selbst müssen mit einer unterstützten AutoHotkey-Version ausgeführt werden.</p>
<p>Behoben: Weggelassene Parameter erhalten nun ihre Standardwerte und nicht mehr den Marker "optionales Argument", wenn eine AutoHotkey-Methode über IDispatch (COM) aufgerufen wird. Die umgekehrte Übersetzung wurde bereits in früheren Versionen beim <em>Aufruf</em> von COM-Methoden durchgeführt.</p>
<p>Behoben: <code>VerCompare(a, "&gt;" b)</code> und geringfügige Reduzierung der Codegröße.</p>
<p>Behoben: AltTab-bezogene Ladezeitfehler sind nun konsistent mit anderen Fehlern.</p>
<p>Behoben: Fehler, die durch einen ComObject-Wrapper ausgelöst werden, wurden nicht korrekt weitergegeben, wenn dieser über ein Objekt/COM aufgerufen wird.</p>
<p>Behoben: Das Hotkey-GUI-Steuerelement erlaubt nun das Setzen der Symbole <code>^</code>, <code>!</code> und <code>+</code> als Hotkeys.</p>
<p>Behoben: Das Hotkey-Steuerelement inkludiert nun Modifikatoren, wenn sein Wert auf ein Symbol gesetzt ist.</p>
<p>Behoben: Mögliches Fehlverhalten von InputHook.KeyOpt() bei einzelnen Zeichen.</p>
<ul>
<li>Die Entfernung einer Option hat potenziell keinen Einfluss auf den entsprechenden SC.</li>
<li>Optionen, die potenziell auch auf sc000 angewendet werden.</li>
</ul>
<p>Behoben: Ein Bug bei benutzerdefinierten Kombos, bei dem ein Satz von Hotkeys wie <code>a &amp; b::</code>, <code>a::</code> und <code>a up::</code> das Loslassen von <kbd>a</kbd> nicht unterdrücken konnte, wenn <code>a::</code> allein mit #HotIf deaktiviert wurde.</p>
<p>Behoben: Ein Bug, bei dem ein Taste-Unten-Ereignis korrekt durch einen Hotkey unterdrückt wurde, aber das Senden eines zusätzlichen Taste-Unten mit SendLevel &gt; 0 verhinderte, dass das nachfolgende Taste-Oben unterdrückt wurde, selbst wenn das gesendete Ereignis aufgrund von #InputLevel ignoriert wurde.</p>
<p>Behoben: <code>a &amp; b up::</code> unterdrückte <kbd>b</kbd> nicht, wenn <code>a &amp; b::</code> vorhanden, aber durch #HotIf deaktiviert ist.</p>
<p>Behoben: Hotkeys wurden aufgrund einer Race Condition nicht ausgelöst. Wenn ein Modifikator-Hotkey wie <code>~*RWin::</code> zu früh Send oder GetKeyState aufruft, kann das System melden, dass RWin nicht unten ist, wodurch der Modifikatorstatus des Hooks "korrigiert" wird und Hotkeys fälschlicherweise ausgelöst oder nicht ausgelöst werden. Dies trat wahrscheinlich nur auf, wenn ein anderer Tastatur-Hook vor dem Hook des Skripts installiert wurde, da in diesem Fall das System den Status der Tasten nicht aktualisiert, bis der Thread des anderen Hooks fortgesetzt wird und zurückkehrt.</p>
<p>Behoben: Hotstrings verwenden nun das Zuletzt Gefundene Fenster von #HotIf.</p>
<p>Behoben: Der Versuch, den Tastatur- oder Maus-Hook neu zu installieren, schlug fehl, wenn das System den Hook automatisch deinstalliert hat. Nach wie vor müssen bestimmte Bedingungen erfüllt sein, bevor ein solcher Versuch unternommen werden kann.</p>
<p>Optimiert: Speicherreservierung von zwischengespeicherten COM-Eigenschaftsnamen für internes IDispatch.</p>
<p>Code überarbeitet: Unterstützung einer Build-Konfiguration für AutoHotkey als DLL.</p>

<h2 id="v2.0.3">2.0.3 - 19. Juni 2023</h2>
<p>Behoben: <code>Hotkey("a", "b")</code> verwendet nun die Originalfunktion von "b", nicht "a". [PR #318]</p>
<p>Behoben: FileSetAttrib stürzt nicht mehr ab, wenn es in einer dateilesenden Schleife verwendet wird. [PR #323]</p>
<p>Behoben: Fehler bzgl. doppelter Gui-Steuerelement-Namen brechen den Thread nun korrekt ab.</p>
<p>Behoben: Die Range-Option von DateTime/MonthCal wendete nicht den Minimalwert an.</p>
<p>Behoben: <code>s[x] =&gt; x</code> und andere einzeilige Eigenschaften, die mit "s" beginnen.</p>
<p>Behoben: Bug beim Löschen eines Haltepunkts auf einer static-Zeile, die <code>=&gt;</code> enthält.</p>
<p>Behoben: Das Button-Steuerelement wurde nicht zur Standardschaltfläche, wenn es angeklickt wurde.</p>
<p>Behoben: PixelSearch macht X nun leer, wenn das Pixel nicht gefunden wird.</p>
<p>Behoben: Ein Hotstring mit Escapesequenz führte dazu, dass die nächste Zeile übersprungen wurde.</p>
<p>Behoben: FensterTitel ignorierte Zeichen 1, wenn "ahk_" bei Zeichen 2 ist.</p>
<p>Behoben: Neubelegung nutzt nun den rechten Modifikator, der gerade unten ist. Zum Beispiel wird <code>+x::+y</code> nicht mehr RShift loslassen, um LShift zu drücken.</p>
<p>Geändert: Fehlermeldung für <code>a == b &amp;&amp; c()</code> und ähnliche Fälle, um Hinweise auf das Legacy-<code>=</code> zu vermeiden.</p>
<p>Verbessert: Fehlermeldung für einige Fälle von unbeabsichtigter Zeilenfortsetzung.</p>
<p>Behoben: Reservierte Wörter können nun als Methodennamen verwendet werden, wie dokumentiert.</p>
<p>Behoben: Doppelte OnMessage-Aufrufe für einige Tastaturmeldungen.</p>
<p>Behoben: Ineinander referenzierte Closures wurden vorzeitig gelöscht.</p>
<p>Behoben: SetFont erlaubt nun Leerzeichen am Anfang im Options-Parameter.</p>
<p>Behoben: Senden von <code>{ASC nnnn}</code>.</p>
<p>Behoben: <code>a.base := a</code> löst nun einen Fehler aus.</p>
<p>Behoben: <code>x.y := unset</code> verursachte Abstürze oder undefiniertes Verhalten.</p>
<p>Behoben: GuiControl.Move() ist nun relativ zum Clientbereich der GUI, selbst wenn die GUI nicht übergeordnet ist.</p>
<p>Behoben: Menu Add überschrieb Menüpunkte, die mit Menu Insert angefügt wurden.</p>
<strong>Launcher</strong>
<p>Dash ausführen, anstatt die alte Willkommensseite in der Dokumentation anzuzeigen, wenn es ohne Parameter ausgeführt wird.</p>
<p>Behoben: Die Versionsauswahl-GUI verursachte einen Fehler, wenn Enter gedrückt wurde, ohne eine Version auszuwählen. [PR UX/#4]</p>
<p>Fehler unterdrücken, wenn geprüft wird, ob eine fehlende Version heruntergeladen werden kann.</p>
<p>Behoben: Die Aufforderung zum Herunterladen einer fehlenden Version zeigt nicht mehr das UAC-Schild an, wenn UAC deaktiviert ist.</p>
<p>Behoben: Probleme mit der Interpretation von #Requires.</p>
<ul>
<li>Unterstützung für das Weglassen des Präfixes "v".</li>
<li>Unterstützung für die Operatoren (<code>&gt; &gt;= &lt; &lt;= =</code>).</li>
<li>Unterstützung für Versionen mit nur einer Ziffer.</li>
</ul>
<strong>Installation</strong>
<p>Behoben: Standard-Installationsverzeichnis für die Befehlszeilenverwendung.</p>
<p>Die Startmenüverknüpfung wurde von "AutoHotkey" in "AutoHotkey Dash" umbenannt.</p>
<p>Behoben: EnableUIAccess bei der Ausführung als SYSTEM.</p>
<p>Behoben: EnableUIAccess verifiziert nun den Privatschlüssel bei der Auswahl eines Zertifikats.</p>
<strong>Dash</strong>
<p>Behoben: Launch Config GUI aktualisiert nun die Optionen "Run as administrator" und "Run with UI access".</p>
<p>Behoben: Nach-Oben/Unten-Pfeiltasten-Handhabung in der Launch Config GUI.</p>

<h2 id="v2.0.2">2.0.2 - 2. Januar 2023</h2>
<p>Behoben: Kurze DllCall-Arg-Typen und undefiniertes Verhalten bei ungültigen Typen.</p>
<p>Behoben: (Nicht-Zeichenketten-)Dateiversionsnummer bei AutoHotkey-Binärdateien.</p>
<p>Behoben: Parametertyp-Fehler werden nun die richtige Parameternummer anzeigen.</p>

<h2 id="v2.0.1">2.0.1 - 1. Januar 2023</h2>
<p>Behoben: Func.IsOptional(1) gab manchmal 0 zurück, wo es das nicht tun sollte.</p>
<p>Behoben: GUI-Ereignishandler-Funktionen werden den Gui-Parameter nicht mehr weglassen, wenn die GUI ihr eigener Event-Sink ist.</p>
<p>Behoben: COM-Fehler werden nicht mehr "(null)" anzeigen, wenn keine Beschreibung verfügbar ist.</p>
<p>Behoben: ToolTips erschienen gelegentlich an der falschen Position.</p>
<p>Behoben: __Enum(unset) erlaubt nun eine zweite Variable für Array, Match und Gui.</p>
<p>Behoben: "#Include &lt;&gt;"-Fehlermeldungen werden nun "Script library" statt "Function library" anzeigen.</p>
<p>Behoben: Neue Threads waren nicht in der Lage, eine Meldungsüberprüfung mittels Critical zu verhindern.</p>
<p>Optimiert: Konvertierung von DllCall-Typnamen.</p>
<p>Optimiert: Triviale, aber effektive Optimierungen der Codegröße.</p>

<h2 id="Pre-Release">Pre-Release</h2>
<p>Einen Verlauf der Änderungen vor dem v2.0.0-Release finden Sie an folgenden Orten (beachten Sie jedoch, dass einige Änderungen inzwischen hinfällig sind):</p>
<ul>
  <li><a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=110696">v2.0 Release Candidates</a></li>
  <li><a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=95688">v2.0-beta Releases</a></li>
  <li><a href="https://www.autohotkey.com/boards/viewtopic.php?f=37&t=2120">v2.0-alpha Releases</a></li>
</ul>
</body>
</html>
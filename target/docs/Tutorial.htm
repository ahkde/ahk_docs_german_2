<!DOCTYPE html>
<html lang="de">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="author" content="tidbit" />
<meta name="description" content="Erfahren Sie, wie Sie AutoHotkey herunterladen und installieren, ein Skript erstellen, Hotkeys und Hotstrings verwenden, Tastendrücke senden, Programme starten, etc." />
<meta name="keywords" content="ahk, autohotkey, tutorial, anfänger guide" />
<title>Anfänger-Tutorial | AutoHotkey v2</title>
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>AutoHotkey Anfänger-Tutorial <span style="opacity: 0.4">von tidbit</span></h1>
<h2 id="s0">Inhaltsverzeichnis</h2>
<ol>
    <li><a href="#s1">Die Grundlagen</a>
    <ol type="a">
        <li><a href="#s11">AutoHotkey herunterladen und installieren</a></li>
        <li><a href="#s12">Wie erstellt man ein Skript</a></li>
        <li><a href="#s14">Wie du die englische Hilfedatei auf deinem Computer finden kannst</a></li>
    </ol>
    </li>
    <li><a href="#s2">Hotkeys &amp; Hotstrings</a>
    <ol type="a">
        <li><a href="#s21">Tasten und ihre mysteriösen Symbole</a></li>
        <li><a href="#s22">Fensterspezifische Hotkeys/Hotstrings</a></li>
        <li><a href="#s23">Mehrere Hotkeys/Hotstrings pro Datei</a></li>
        <li><a href="#s24">Beispiele</a></li>
    </ol>
    </li>
    <li><a href="#s3">Tastendrücke senden</a>
    <ol type="a">
        <li><a href="#s31">Videospiele</a></li>
    </ol>
    </li>
    <li><a href="#s4">Programme &amp; Webseiten starten</a></li>
    <li><a href="#s5">Funktionsaufrufe mit oder ohne runde Klammern</a>
    <ol type="a">
        <li><a href="#s51">Code-Blöcke</a></li>
    </ol>
    </li>
    <li><a href="#s6">Variablen</a>
    <ol type="a">
        <li><a href="#s62">Abrufen von Benutzereingaben</a></li>
        <li><a href="#s63">Weitere Beispiele</a></li>
    </ol>
    </li>
    <li><a href="#s7">Objekte</a>
    <ol type="a">
        <li><a href="#s71">Erstellen von Objekten</a></li>
        <li><a href="#s72">Verwenden von Objekten</a></li>
    </ol>
    </li>
    <li><a href="#s8">Andere hilfreiche Goodies</a>
    <ol type="a">
        <li><a href="#s81">Die mysteriösen eckigen Klammern</a></li>
        <li><a href="#s82">Herausfinden deiner AHK-Version</a></li>
        <li><a href="#s83">Trial-and-Error-Prinzip</a></li>
        <li><a href="#s84">Einrückung</a></li>
        <li><a href="#s85">Um Hilfe bitten</a></li>
        <li><a href="#s86">Andere Links</a></li>
    </ol>
    </li>
</ol>

<h2 id="s1">1 - Die Grundlagen</h2>
<p class="note">Bevor wir mit unserer Reise beginnen, habe ich ein paar Ratschläge für dich. Während dieses Tutorials wirst du viel Text und Code sehen. Um AutoHotkey optimal zu lernen, ist es ratsam, den Text zu lesen und die Beispielcodes <b>auszuprobieren</b>. Erst danach solltest du versuchen, die Codes zu analysieren. Die meisten Beispiele auf dieser Seite kannst du kopieren und in deinem Texteditor einfügen. Wenn du einen Abschnitt nicht auf Anhieb verstehst, empfehle ich dir, ihn noch einmal zu lesen.</p>

<h3 id="s11">a. AutoHotkey herunterladen und installieren</h3>
<p id="local_note" class="note" style="display: none">Da du diese Dokumentation auf lokaler Ebene anschaust, hast du AutoHotkey wahrscheinlich bereits installiert und kannst zu Abschnitt b springen.</p>
<script type="text/javascript">
  if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
    document.getElementById("local_note").removeAttribute("style");
</script>
<p>Bevor du lernst, wie man AutoHotkey (AHK) nutzt, musst du es herunterladen. Danach muss AHK eventuell installieren werden, je nachdem, welche Version du heruntergeladen hast. In diesem Guide verwenden wir den Installer, da er am einfachsten zu bedienen ist.</p>

<p>Anleitung:</p>
<ol>
    <li>Öffne die Homepage von AutoHotkey: <a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></li>
    <li>Klicke auf Download. Du müsstest jetzt eine Option für jede Hauptversion von AutoHotkey sehen. Diese Dokumentation ist für v2, also wähle diese Option aus oder wechsle zur v1-Dokumentation.</li>
    <li>Die heruntergeladene Datei müsste AutoHotkey_*_setup.exe oder ähnlich heißen. Führe sie aus und klicke auf Install.</li>
    <li>Sobald das erledigt ist, großartig! Weiter zu Abschnitt b.</li>
</ol>

<h3 id="s12">b. Wie erstellt man ein Skript</h3>
<p>Die folgende Anleitung zeigt, wie man AutoHotkey dazu bringen kann, etwas zu tun. AutoHotkey ist keine Zauberei - wir alle wünschten, es wäre so, ist es aber nicht. Wir müssen AutoHotkey also sagen, was zu tun ist. Diesen Vorgang nennt man "Scripting".</p>

<p>Anleitung:</p>
<ol>
    <li>Klicke mit der rechten Maustaste auf deinem Desktop.</li>
    <li>Suche den Menüpunkt "Neu".</li>
    <li>Wähle den Menüpunkt "AutoHotkey Script" im Menü "Neu" aus.</li>
    <li>Gib dem Skript einen neuen Namen. Der Name muss mit .ahk enden. Zum Beispiel: MeinSkript.ahk</li>
    <li>Suche die neu erstellte Datei auf deinem Desktop und klicke mit der rechten Maustaste darauf.</li>
    <li>Wähle den Menüpunkt "Edit Script" aus.</li>
    <li>Ein Fenster sollte aufgetaucht sein, vermutlich Notepad. Wenn das der Fall ist, hattest du ERFOLG!
    <p>Nun, da du ein Skript erstellt hast, müssen wir noch etwas in die Datei einfügen. Eine Liste aller internen Funktionen und Variablen findest du unter <a href="#s5">Abschnitt 5</a>.</p>
    <p>Hier ein sehr einfaches Skript mit einem Hotkey, das, sobald man den Hotkey drückt, Text mithilfe der <a href="lib/Send.htm">Send</a>-Funktion sendet:</p>
    <pre>
^j::
{
    Send "Mein erstes Skript"
}</pre>
    <p>Wir werden später noch etwas genauer darauf eingehen. Bis dahin erkläre ich dir, was der obige Code macht:</p>
    <ul>
        <li><code>^j::</code> ist der Hotkey. <code>^</code> symbolisiert <kbd>Strg</kbd>, <code>j</code> ist die Taste <kbd>J</kbd>. Alles <b>links</b> von <code>::</code> sind die Tasten, die du drücken musst.</li>
        <li><code>Send "Mein erstes Skript"</code> ist der Vorgang zum <strong>Senden</strong> von Tastendrücken. <code>Send</code> ist die Funktion, alles nach dem Leerzeichen und innerhalb der Anführungszeichen wird gesendet.</li>
        <li>Die Zeilen mit <code>{</code> und <code>}</code> markieren den Anfang und das Ende des <a href="Hotkeys.htm">Hotkeys</a>.</li>
    </ul>
    </li>
    <li>Speichere die Datei.</li>
    <li>Klicke zweimal mit der linken Maustaste auf die Datei bzw. auf das Symbol im Desktop, um das Skript zu starten. Öffne Notepad (oder wo auch immer du etwas schreiben kannst) und drücke <kbd>Strg</kbd> und <kbd>J</kbd>.</li>
    <li>Unglaublich! Dein erstes Skript ist fertig. Hol dir ein paar Snacks als Belohnung und lies dir den Rest des Tutorials durch.</li>
</ol><p class="note">Eine Videoanleitung findest du unter <a href="https://youtu.be/HcgQlGeaPHw">Install und Hello World</a> auf YouTube.</p>

<h3 id="s14">c. Wie du die englische Hilfedatei auf deinem Computer finden kannst</h3>
<p>Downloads für v2.0-a076 und höher enthalten eine Hilfedatei in derselben ZIP-Datei wie das Hauptprogramm. Wenn du die Dateien manuell entpackt hast, sollte sich die Hilfedatei dort befinden, wo du sie abgelegt hast.</p>
<p>v2.0-beta.4 und höher enthalten ein Installationsskript. Wenn du AutoHotkey auf diese Weise installiert hast, sollte sich die Hilfedatei für jede Version in einem Unterverzeichnis des Installationsverzeichnisses von AutoHotkey befinden, z.B. in "C:\Programme\AutoHotkey\v2.0-beta.7". Außerdem sollte dort ein symbolischer Link namens "v2" vorhanden sein, der auf das Unterverzeichnis der zuletzt installierten Version verweist. Wenn v1.x installiert ist, kannst du eine Hilfedatei für diese Version auch im Hauptverzeichnis vorfinden.</p>
<p>Halte Ausschau nach <b>AutoHotkey.chm</b> oder einer Datei mit der Bezeichnung "AutoHotkey" und einem gelben Fragezeichen.</p>
<p>Wenn du die Datei selbst nicht suchen willst oder musst, gibt es auch Möglichkeiten, sie direkt zu starten:</p>
<ul>
    <li>Über den Menüpunkt "Help" im <a href="Program.htm#tray-icon">Tray-Menü</a> eines laufenden Skripts.</li>
    <li>Über das Menü "Help" im <a href="Program.htm#main-window">Hauptfenster</a> eines laufenden Skripts oder durch Drücken von F1, während das Hauptfenster aktiv ist.</li>
    <li>Über die Option "Help files (F1)" im <a href="Program.htm#dash">Dash</a>, die mit der Maus oder durch Drücken von F1 bei aktivem Dash aktiviert werden kann. Dash kann über die Verknüpfung "AutoHotkey" im Startmenü geöffnet werden.</li>
</ul>

<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

<p>Was ist ein Hotkey? Ein Hotkey ist eine Taste, die sich heiß anfühlt. ... kleiner Scherz. Ein Hotkey ist eine Taste oder Tastenkombination, die der Benutzer auf der Tastatur drücken kann, um einige Aktionen auszulösen. Zum Beispiel:</p>
<pre>^j::
{
    Send "Mein erstes Skript"
}</pre>
<p>Was ist ein Hotstring? Hotstrings werden hauptsächlich verwendet, um geschriebene Abkürzungen in lange Texte umzuwandeln (kurz Auto-Ersetzen), aber auch, um eine geskriptete Aktion zu starten. Zum Beispiel:</p>
<pre>::ftw::Free the whales</pre>
<p>Der Unterschied zwischen den beiden Beispielen besteht darin, dass der Hotkey durch Drücken von <kbd>Strg</kbd>+<kbd>J</kbd> ausgelöst werden kann, während der Hotstring dein geschriebenes "ftw" in "Free the whales" umwandelt.</p>
<p><i>"Also, wie genau erstellt eine Person wie ich einen Hotkey?"</i> Gute Frage. Ein Hotkey wird mit einem einzelnen Doppelpunktpaar erstellt. Die Taste oder Tastenkombination kommt auf die <b>linke</b> Seite von <code>::</code>. Und der Inhalt muss darunter stehen, eingeschlossen in geschweiften Klammern.</p>
<p class="note"><strong>Hinweis:</strong> Es gibt Ausnahmen, aber diese führen oft zu Problemen, als dass sie nützlich sind. Deshalb wird im Tutorial nicht weiter darauf eingegangen, zumindest nicht im Moment.</p>
<pre>Esc::
{
    MsgBox "Escape!!!!"
}</pre>
<p>Ein Hotstring hat auf jeder Seite des Textes, der ersetzt werden soll, jeweils ein Doppelpunktpaar. Der Text, der deinen geschriebenen Text ersetzen soll, muss auf der <b>rechten</b> Seite des zweiten Doppelpunktpaares erfolgen.</p>
<p>Hotstrings können, wie bereits erwähnt, auch geskriptete Aktionen starten. Eine ausgefallene Bezeichnung für <i>"tue so ziemlich alles"</i>. Das gleiche gilt für Hotkeys.</p>
<pre>::bzw::
{
    MsgBox "Du hast bzw eingegeben."
}</pre>
<p>Außerdem solltest du wissen, dass du jedem Hotkey, Hotstring, Label oder jedem anderen Element, über das wir noch nicht geredet haben, mehrere Codezeilen zuweisen kannst.</p>
<pre>^j::
{
    MsgBox "Wow!"
    MsgBox "Das sind"
    Run "notepad.exe"
    WinActivate "Unbenannt - Editor"
    WinWaitActive "Unbenannt - Editor"
    Send "7 Zeilen{!}{Enter}"
    SendInput "innerhalb des STRG{+}J-Hotkeys."
}</pre>

<h3 id="s21">a. Tasten und ihre mysteriösen Symbole</h3>
<p>Du wunderst dich vielleicht: <i>"Woher soll ich denn wissen, dass Zirkumflex (^) die <kbd>Strg</kbd>-Taste symbolisiert?!"</i>. Nun, gute Frage. Um dir beizubringen, was ^ und andere Symbole bedeuten, hilft dir die folgende Tabelle weiter:</p>
<table class="info">
    <tr>
        <th class="center">Symbol</th>
        <th abbr="Beschr">Beschreibung</th>
    </tr>
    <tr>
        <td class="center bold">#</td>
        <td><kbd>Win</kbd> (Windows-Logo-Taste)</td>
    </tr>
    <tr>
        <td class="center bold">!</td>
        <td><kbd>Alt</kbd></td>
    </tr>
    <tr>
        <td class="center bold">^</td>
        <td><kbd>Strg</kbd></td>
    </tr>
    <tr>
        <td class="center bold">+</td>
        <td><kbd>Umschalt</kbd></td>
    </tr>
    <tr>
        <td class="center bold">&amp;</td>
        <td>Mit einem Und-Zeichen können zwei beliebige Tasten oder Maustasten zu einem benutzerdefinierten Hotkey kombiniert werden.</td>
    </tr>
</table>
<p><strong>(Die vollständige Liste der Symbole findest du auf der <a href="Hotkeys.htm">Hotkey</a>-Seite)</strong></p>
<p>Zusätzlich findest du eine Liste aller/vieler Hotkey-Namen, die auf der <b>linken</b> Seite des Doppelpunktpaares eines Hotkeys verwendet werden können, unter <a href="KeyList.htm">Tastenliste (Tastatur, Maus und Controller)</a>.</p>
<p>Mithilfe von <code> &amp; </code> kann eine benutzerdefinierte Kombination aus zwei (und nur zwei) Tasten (außer Controller-Tasten) definiert werden. Das folgende Beispiel zeigt, wie einer der Hotkeys ausgelöst werden kann, wenn Numpad0 gedrückt gehalten und danach Numpad1 oder Numpad2 gedrückt wird:</p>

<pre>Numpad0 &amp; Numpad1::
{
    MsgBox "Sie haben Numpad1 gedrückt, während Sie Numpad0 gedrückt hielten."
}

Numpad0 &amp; Numpad2::
{
    Run "notepad.exe"
}</pre>

<p>Du fragst dich bestimmt jetzt, ob Hotstrings auch irgendwelche coole Modifikatoren haben. Ja, das haben sie! Hotstring-Modifikatoren gehören in das erste Doppelpunktpaar. Zum Beispiel:</p>
<pre>:*:ftw::Free the whales</pre>

<p class="note">Weitere Hotkey- und Hotstring-Modifikatoren, Informationen und Beispiele findest du unter <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a>.</p>
<h3 id="s22">b. Fensterspezifische Hotkeys/Hotstrings</h3>

<p>Du hast die Möglichkeit, ein Hotkey oder Hotstring nur für ein bestimmtes Fenster zu aktivieren (oder zu deaktivieren). Um das zu tun, musst du auf einen der Befehle zurückgreifen, die ein #-Zeichen davor haben, genauer gesagt <a href="lib/_HotIf.htm">#HotIf</a>, kombiniert mit der internen Funktion <a href="lib/WinActive.htm">WinActive</a> oder <a href="lib/WinExist.htm">WinExist</a>:</p>
<pre>#HotIf WinActive(FensterTitel)
#HotIf WinExist(FensterTitel)</pre>
<p>Dieser spezielle Befehl (auch "Direktive" genannt) erstellt kontextabhängige Hotkeys und Hotstrings. Gib einfach einen Fenstertitel für <var>FensterTitel</var> an. In einigen Fällen kann es jedoch sinnvoll sein, Kriterien wie HWND, Gruppe oder Klasse anzugeben. Solche Kriterien erfordern fortgeschrittenes Wissen und werden auf der folgenden Seite ausführlicher behandelt: <a href="misc/WinTitle.htm">FensterTitel-Parameter &amp; Zuletzt Gefundenes Fenster</a>.</p>
<pre>#HotIf WinActive("Unbenannt - Editor")
#Space::
{
    MsgBox "Du hast WIN+LEER in Notepad gedrückt."
}</pre>
<p>Um die Kontextabhängigkeit für nachfolgende Hotkeys oder Hotstrings auszuschalten, gib #HotIf ohne Parameter an. Zum Beispiel:</p><pre><em>; Unbenannt - Editor</em>
#HotIf WinActive("Unbenannt - Editor")
!q::
{
    MsgBox "Du hast ALT+Q in Notepad gedrückt."
}

<em>; Jedes andere Fenster, das nicht "Unbenannt - Editor" ist</em>
#HotIf
!q::
{
    MsgBox "Du hast ALT+Q in einem beliebigen Fenster gedrückt."
}
</pre>
<p>Wenn #HotIf-Direktiven nie in einem Skript verwendet werden, sind Hotkeys und Hotstrings für alle Fenster wirksam.</p>
<p>Die #HotIf-Direktive ist von der Position abhängig: sie beeinflusst nur Hotkeys und Hotstrings, die sich im Skript physisch darunter befinden, bis gegebenenfalls die nächste #HotIf-Direktive erreicht ist.</p>
<pre><em>; Notepad</em>
#HotIf WinActive("ahk_class Notepad")
#Space::
{
    MsgBox "Du hast WIN+LEER in Notepad gedrückt."
}
::msg::Du hast msg in Notepad geschrieben

<em>; MSPaint</em>
#HotIf WinActive("Unbenannt - Paint")
#Space::
{
    MsgBox "Du hast WIN+LEER im Paint-Programm gedrückt!"
}
::msg::Du hast msg im Paint-Programm geschrieben!</pre>
<p class="note">Weitere Informationen findest du auf der <a href="lib/_HotIf.htm">#HotIf</a>-Seite.</p>
<h3 id="s23">c. Mehrere Hotkeys/Hotstrings pro Datei</h3>
<p>Das kommt einigen Leuten aus irgendeinem Grund in den Sinn. Also werde ich es klarstellen: AutoHotkey bietet dir die Möglichkeit, <i>beliebig viele</i> Hotkeys und Hotstrings in einer Datei anzugeben. Ob es nun 1, 3253 oder mehr sind - es spielt keine Rolle.</p>
<pre>#i::
{
    Run "https://www.google.com/"
}

^p::
{
    Run "notepad.exe"
}

~j::
{
    Send "ack"
}

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America</pre>
<p>Das Beispiel oben ist absolut in Ordnung. Mehrere Hotkeys, mehrere Hotstrings. Alle in einer großen glücklichen Skriptdatei.</p>

<h3 id="s24">d. Beispiele</h3>
<pre class="NoIndent">::bzw::beziehungsweise  <em>; Ersetzt "bzw" mit "beziehungsweise", sobald du ein <a href="Hotstrings.htm#EndChars">vordefiniertes Endungszeichen</a> drückst.</em></pre>
<pre class="NoIndent">:*:bzw::beziehungsweise  <em>; Ersetzt "bzw" mit "beziehungsweise", ohne dass ein Endungszeichen notwendig ist.</em></pre>
<pre class="NoIndent">^n::  <em>; STRG+N-Hotkey</em>
{
    Run "notepad.exe"  <em>; Startet Notepad, sobald du STRG+N drückst.</em>
}  <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgeführt, wenn der Hotkey gedrückt wird.</em></pre>
<pre class="NoIndent">^b::  <em>; STRG+B-Hotkey</em>
{
    Send "{Ctrl down}c{Ctrl up}"  <em>; Kopiert den markierten Text. ^c könnte man auch verwenden, allerdings ist diese Methode sicherer.</em>
    SendInput "[b]{Ctrl down}v{Ctrl up}[/b]" <em>; Umschließt den markierten Text mit BBCode-Tags, um ihn in einem Forum fett darzustellen.</em>
}  <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgeführt, wenn der Hotkey gedrückt wird.</em></pre>

<h2 id="s3">3 - Tastendrücke senden</h2>
<p>Du hast also vor, Tasten zu senden (virtuell zu drücken). Das können wir tun. Benutze die <a href="lib/Send.htm">Send</a>-Funktion. Diese Funktion sendet wortwörtlich Tastendrücke, um das Schreiben oder Drücken von Tasten zu simulieren.</p>
<p>Bevor wir uns dieser Sache zuwenden, sollten wir über die Probleme reden, auf die einige Leute häufig stoßen.</p>
<p>So wie Hotkeys auch, hat die Send-Funktion spezielle Tasten. <a href="lib/Send.htm">Sehr, sehr viele davon</a>. Hier die vier bekanntesten Symbole:</p>
<table class="info">
    <tr>
        <th class="center">Symbol</th>
        <th abbr="Beschr">Beschreibung</th>
    </tr>
    <tr>
        <td class="center bold">!</td>
        <td>Sendet <kbd>Alt</kbd>. Zum Beispiel würde <code>Send "Das ist ein Text!a"</code> die Tasten "Das ist ein Text" senden und dann <kbd>Alt</kbd>+<kbd>A</kbd> drücken. <strong>Hinweis:</strong> <code>!A</code> hat in einigen Programmen einen anderen Effekt als <code>!a</code>. Das liegt daran, dass <code>!A</code> die Tastenkombination <kbd>Alt</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> und <code>!a</code> die Tastenkombination <kbd>Alt</kbd>+<kbd>A</kbd> drücken würde. Verwenden Sie im Zweifelsfall immer Kleinbuchstaben.</td>
    </tr>
    <tr>
        <td class="center bold">+</td>
        <td>Sendet <kbd>Umschalt</kbd>. Zum Beispiel würde <code>Send "+abC"</code> den Text "AbC" senden, und <code>Send "!+a"</code> würde <kbd>Alt</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> drücken.</td>
    </tr>
    <tr>
        <td class="center bold">^</td>
        <td>Sendet <kbd>Strg</kbd>. Zum Beispiel würde <code>Send "^!a"</code> die Tastenkombination <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> drücken, und <code>Send "^{Home}"</code> würde <kbd>Strg</kbd>+<kbd>Pos1</kbd> senden. <strong>Hinweis:</strong> <code>^A</code> hat in einigen Programmen einen anderen Effekt als <code>^a</code>. Das liegt daran, dass <code>^A</code> die Tastenkombination <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> und <code>^a</code> die Tastenkombination <kbd>Strg</kbd>+<kbd>A</kbd> drücken würde. Verwenden Sie im Zweifelsfall immer Kleinbuchstaben.</td>
    </tr>
    <tr>
        <td class="center bold">#</td>
        <td>Sendet <kbd>Win</kbd> (die Taste mit dem Windows-Logo), demzufolge würde <code>Send "#e"</code> <kbd>Win</kbd> gedrückt halten und dann <kbd>E</kbd> drücken.</td>
    </tr>
</table>
<p>Die <a href="lib/Send.htm">gigantische Tabelle auf der Send-Seite</a> zeigt so ziemlich jede spezielle Taste, die in AHK integriert ist. Zum Beispiel: <code>{Enter}</code> und <code>{Space}</code>.</p>
<p class="warning"><strong>Achtung:</strong> Diese Tabelle gilt <b>nicht</b> für <a href="Hotkeys.htm">Hotkeys</a>. Das heißt, dass du beim Erstellen eines Hotkeys Tasten wie <kbd>Strg</kbd> oder <kbd>Enter</kbd> nicht mit geschweiften Klammern umschließen sollst.</p>
<p>Das folgende Beispiel zeigt, was man mit einem Hotkey nicht machen sollte:</p>
<pre><em>; Beim Erstellen eines Hotkeys...
; FALSCH</em>
{LCtrl}::
{
    Send "AutoHotkey"
}

<em>; RICHTIG</em>
LCtrl::
{
    Send "AutoHotkey"
}
</pre>
<p>Ein häufiges Problem, das viele Leute haben, ist, dass sie davon ausgehen, dass die geschweiften Klammern nur zum Spaß gesetzt werden. Aber in Wirklichkeit <b>werden sie gebraucht</b>. Nur so kann AHK wissen, dass z.B. <code>{!}</code> als "Ausrufezeichen" und nicht als "drücke <kbd>Alt</kbd>" interpretiert werden soll. Vergiss nicht, dass du mit der Tabelle auf der <a href="lib/Send.htm">Send</a>-Seite überprüfen kannst, ob alle Klammern richtig gesetzt sind. Zum Beispiel:</p>
<pre>Send "Dieser Text wurde geschrieben{!}" <em>; Hast du bemerkt, dass das ! in geschweiften Klammern gesetzt ist? Wäre dies nicht so, würde AHK die ALT-Taste drücken.</em>
</pre>
<pre><em>; Wie oben, aber mit der ENTER-Taste. AHK würde "Enter" ausschreiben, wenn
; es nicht von geschweiften Klammern umschlossen wäre.</em>
Send "Mehrere Enter Zeilen wurden Enter gesendet." <em>; FALSCH</em>
Send "Mehrere{Enter}Zeilen wurden{Enter}gesendet." <em>; RICHTIG</em>
</pre>
<p>Ein weiteres Problem, das viele Leute haben, ist, dass sie glauben, dass <b>jedes einzelne Zeichen</b> bei der Send-Funktion in geschweiften Klammern gesetzt werden muss. Das ist FALSCH. Wenn es nicht in der Tabelle steht, braucht es keine Klammern. Normale Buchstaben, Zahlen oder sogar einige Symbole wie <code>.</code> müssen <b>nicht</b> in geschweiften Klammern gesetzt werden. Außerdem kannst du pro Send-Funktion mehr als einen Buchstaben, eine Zahl oder ein Symbol senden. Send-Funktionen mit je einem Buchstaben sind unnötig. Zum Beispiel:</p>
<pre>Send "{a}"       <em>; FALSCH</em>
Send "{b}"       <em>; FALSCH</em>
Send "{c}"       <em>; FALSCH</em>
Send "{a}{b}{c}" <em>; FALSCH</em>
Send "{abc}"     <em>; FALSCH</em>
Send "abc"       <em>; RICHTIG</em></pre>

<p>Um eine Taste gedrückt zu halten oder loszulassen, umschließe den Tastennamen mit geschweiften Klammern und füge das Wort UP oder DOWN ein. Zum Beispiel:</p>
<pre><em>; So hältst du eine Taste gedrückt, während du eine weitere Taste (oder Tasten) drückst.
; Sollte eine Methode nicht funktionieren, kannst du eine andere ausprobieren.</em>
Send "^s"                     <em>; Beide Zeilen senden STRG+S</em>
Send "{Ctrl down}s{Ctrl up}"  <em>; Beide Zeilen senden STRG+S</em>
Send "{Ctrl down}c{Ctrl up}"
Send "{b down}{b up}"
Send "{Tab down}{Tab up}"
Send "{Up down}"  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep 1000        <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send "{Up up}"    <em>; Lässt die NACH-OBEN-Taste los.</em></pre>

<p>Aber nun wunderst du dich vielleicht <i>"Wie kann ich meine wirklich langen Send-Funktionen besser lesbar machen?"</i>. Einfach. Greife auf den sogenannten Fortsetzungsbereich zurück. Beginne einfach eine neue Zeile mit einer runden Startklammer, schreibe auf der nächsten Zeile deinen Inhalt, und schließe den Bereich mit einer runden Endklammer. Weitere Informationen findest du unter <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a>.</p>
<pre>Send "
(
Zeile 1
Zeile 2
Äpfel sind Früchte.
)"</pre>
<p class="note"><strong>Hinweis:</strong> Es gibt verschiedene Methoden zum Senden von Text. Jede Methode hat ihre eigenen Besonderheiten. Wenn eine Methode nicht wie gewollt funktioniert, kannst du eine andere ausprobieren. Ersetze den Funktionsnamen "Send" einfach mit dem Namen einer anderen Methode: SendText, SendInput, SendPlay, SendEvent. Um mehr über die verschiedenen Methoden zu erfahren, <a href="lib/Send.htm">siehe hier</a>.</p>

<h3 id="s31">a. Videospiele </h3>
<p class="warning"><strong>Das ist wichtig:</strong> Viele Videospiele, vor allem die modernen, verfügen über eine Software, um Cheats zu verhindern. Namentlich wären das zum Beispiel GameGuard, Hackshield oder PunkBuster. Das Umgehen solcher Systeme ist nicht nur kompliziert, sondern verstößt auch gegen die Videospielregeln, was zu einem dauerhaften Bann führen kann.</p>
<p>Wenn ein Videospiel über so ein System verfügt und deine Hotkeys, Hotstrings und Send-Funktionen nicht funktionieren, hast du Pech gehabt. Allerdings gibt es Methoden, um die Erfolgschance bei einigen Videospielen zu erhöhen, aber erwarte nicht, dass sie auf <i>wundersame</i> Weise sofort funktionieren werden. Ich empfehle dir, <b>JEDE</b> Methode auszuprobieren, bevor du aufgibst.</p>

<p>Es ist allgemein bekannt, dass DirectX die Ursache vieler Probleme ist. Wenn du bei einem DirectX-Videospiel auf Probleme stößt, kannst du die auf der <a href="FAQ.htm#games">FAQ</a>-Seite beschriebenen Lösungsansätze ausprobieren. Weitere DirectX-Probleme können auftreten, wenn man <a href="lib/PixelSearch.htm">PixelSearch</a>, <a href="lib/PixelGetColor.htm">PixelGetColor</a> oder <a href="lib/ImageSearch.htm">ImageSearch</a> verwendet. Farben werden als schwarz (0x000000) erkannt, egal welche Farbe du versuchst abzurufen. Du solltest auch versuchen, das Videospiel im Fenstermodus zu starten, wenn möglich. Damit könnten einige DirectX-Probleme beseitigt werden.</p>
<p>Es gibt keine einheitliche Lösung, um AutoHotkey für alle Programme lauffähig zu machen. Wenn jeder Versuch deinerseits fehlschlägt, ist AutoHotkey eventuell nicht für deine Anforderungen geeignet.</p>

<h2 id="s4">4 - Programme &amp; Webseiten starten</h2>
<p>Um ein Programm wie <i>mspaint.exe, calc.exe oder script.ahk</i> zu starten oder einen Ordner zu öffnen, verwende die <a href="lib/Run.htm">Run</a>-Funktion. Run kann sogar genutzt werden, um URLs wie <a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a> zu öffnen. Das folgende Beispiel zeigt, wie auf einfache Weise ein Programm gestartet werden kann, sofern dein Computer dahingehend eingerichtet wurde:</p>
<pre><em>; Starte ein Programm. Beachte, dass die meisten Programme einen VOLLSTÄNDIGEN Dateipfad benötigen:</em>
Run A_ProgramFiles "\Beliebiges_Programm\Programm.exe"

<em>; Öffne eine Webseite:</em>
Run "https://www.autohotkey.com"</pre>
<p>Run unterstützt noch andere Features, wie z.B. Befehlszeilenparameter und CLSID. Wenn du mehr darüber erfahren möchtest, solltest du einen Blick auf die <a href="lib/Run.htm">Run</a>-Seite werfen. </p>
<p>Hier ein paar weitere Beispiele:</p>
<pre><em>; Einige Programme wie die von Windows benötigen keinen vollständigen Pfad:</em>
Run "notepad.exe"
Run "mspaint.exe"

<em>; Öffne den Ordner "Eigene Dokumente" mithilfe der <a href="Variables.htm#BuiltIn">internen AHK-Variable</a>:</em>
Run A_MyDocuments

<em>; Öffne einige Webseiten:</em>
Run "https://www.autohotkey.com"
Run "https://www.google.com"</pre>
<p class="note">Weiterführende Informationen und Beispiele findest du auf der <a href="lib/Run.htm">Run</a>-Seite.</p>

<h2 id="s5">5 - Funktionsaufrufe mit oder ohne runde Klammern</h2>
<p>In AutoHotkey können Funktionsaufrufe mit oder ohne runde Klammern angegeben werden. Die runden Klammern sind in der Regel nur notwendig, wenn der Rückgabewert der Funktion benötigt wird oder der Funktionsname nicht am Anfang der Zeile geschrieben steht.</p>
<p class="note">Eine Liste aller internen Funktionen kannst du <a href="lib/index.htm">hier</a> finden.</p>
<p>Ein typischer Funktionsaufruf sieht wie folgt aus:</p>
<pre>Funktion(Parameter1, Parameter2, Parameter3) <em>; mit runden Klammern</em>
Funktion Parameter1, Parameter2, Parameter3  <em>; ohne runde Klammern</em></pre>
<p>Die Parameter unterstützen jede Art von Ausdruck; das bedeutet zum Beispiel:</p>
<ol>
    <li>Du kannst Berechnungen in ihnen durchführen:
        <pre>SubStr(37 * 12, 1, 2)
SubStr(A_Hour - 12, 2)</pre>
    </li>
    <li>Du kannst in ihnen andere Funktionen aufrufen (beachte, dass solche Funktionsaufrufe mit runden Klammern angegeben werden müssen, da sie nicht am Anfang der Zeile stehen):
        <pre>SubStr(A_AhkPath, InStr(A_AhkPath, "AutoHotkey"))</pre>
    </li>
    <li>Texte müssen in Anführungszeichen gesetzt werden:
        <pre>SubStr("Ich programmiere, genial!", 16)</pre>
    </li>
</ol>

<p>Die gebräuchlichste Methode, einer Variable den Rückgabewert der Funktion zuzuweisen, sieht so aus:</p>
<pre><span style="color:#ff4400"><b>MeineVar</b></span> := SubStr("Ich programmiere, genial!", 16)</pre>
<p class="note">Das ist nicht der einzige, aber der meist verwendete Weg. Du nutzt <code>MeineVar</code>, um den Rückgabewert der Funktion, die auf der rechten Seite des <code>:=</code>-Operators zu sehen ist, zu speichern. Einzelheiten findest du unter <a href="Functions.htm">Funktionen</a>.</p>
<p>Kurz gesagt:</p>
<pre><em>; Das sind Funktionsaufrufe ohne runde Klammern:</em>
MsgBox "Dies ist etwas Text."
StrReplace Eingabe, "AutoHotKey", "AutoHotkey"
SendInput "Das ist genial{!}{!}{!}"

<em>; Das sind Funktionsaufrufe mit runden Klammern:</em>
SubStr("Ich programmiere, genial!", 16)
FileExist(VariableMitPfad)
Ausgabe := SubStr("Ich programmiere, genial!", 16)</pre>

<h3 id="s51">a. Code-Blöcke</h3>
<p><a href="lib/Block.htm">Codeblöcke</a> sind Codezeilen, die von kleinen geschweiften Klammern (<code>{</code> und <code>}</code>) umschlossen sind. Sie gruppieren einen Abschnitt des Codes, um AutoHotkey mitzuteilen, dass sie eine große Familie sind, die zusammenbleiben müssen. Sie werden häufig bei Funktionen und Kontrollanweisungen wie <a href="lib/If.htm">If</a> und <a href="lib/Loop.htm">Loop</a> eingesetzt. Lässt man die Klammern weg, wird nur die erste Zeile des Blocks aufgerufen.</p>
<p>Im folgenden Code werden die beiden Zeilen nur ausgeführt, wenn <em>MeineVar</em> gleich 5 ist:</p>
<pre>if (MeineVar = 5)
{
    MsgBox "MeineVar ist gleich " MeineVar "!!"
    ExitApp
}</pre>
<p>Im folgenden Code wird das Mitteilungsfenster nur angezeigt, wenn <em>MeineVar</em> gleich 5 ist. Das Skript wird immer beendet, selbst wenn <em>MeineVar</em> <b>nicht</b> 5 ist:</p>
<pre>if (MeineVar = 5)
    MsgBox "MeineVar ist gleich " MeineVar "!!"
    ExitApp</pre>
<p>Diese Vorgehensweise ist völlig in Ordnung, da der if-Anweisung nur eine Codezeile zugeordnet ist. Es ist genau das gleiche wie oben, allerdings habe ich die zweite Zeile nicht eingerückt, um zu zeigen, dass sie nicht der if-Anweisung gehört:</p>
<pre>if (MeineVar = 5)
    MsgBox "MeineVar ist gleich " MeineVar "!!"
MsgBox "Wir sind nun 'außerhalb' der if-Anweisung. Wir brauchten keine geschweiften Klammern, da sich nur eine Zeile darunter befand."</pre>

<h2 id="s6">6 - Variablen</h2>
<p><a href="Variables.htm">Variablen</a> sind quasi kleine Klebezettel, die wichtige Informationen enthalten. Sie können verwendet werden, um Text, Zahlen, Daten von Funktionen oder mathematischen Gleichungen zu speichern. Ohne sie wäre das Programmieren bzw. Skripten sehr viel anstrengender.</p>
<p>Es gibt mehrere Wege, wie man einer Variable etwas zuweisen kann. Allerdings befassen wir uns nur mit den bekanntesten Formen. Bitte achte auf das Doppelpunkt-Gleichheitszeichen (<code>:=</code>).</p>
<dl>
    <dt>Textzuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := "Text"</pre>
        <p>Die einfachste Form, einer Variable etwas zuzuweisen. Gib einfach deinen Text ein und fertig. Texte müssen in "Anführungszeichen" gesetzt werden.</p>
    </dd>
    <dt>Variablenzuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := MeineVar2</pre>
        <p>Wie oben, außer dass du einer Variable den Wert einer anderen Variable zuweist.</p>
    </dd>
    <dt>Zahlenzuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := 6 + 8 / 3 * 2 - Sqrt(9)</pre>
        <p>Dank des Ausdrucks kannst du Berechnungen durchführen!</p>
    </dd>
    <dt>Gemischte Zuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := "Das Ergebnis von 5 + " MeineVar2 " ist: " 5 + MeineVar2</pre>
        <p>Eine Kombination von den drei Zuweisungen oben.</p>
    </dd>
</dl>
<p class="note">Gleichheitszeichen (<b>=</b>) mit vorangestelltem Symbol wie z.B. <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> etc. werden <b>Zuweisungsoperator</b> genannt und benötigen immer einen Ausdruck.</p>

<h3 id="s62">a. Abrufen von Benutzereingaben</h3>
<p>Manchmal ist es notwendig, Informationen eines Benutzers einzufordern. Es gibt mehrere Möglichkeiten, dies zu tun, aber der einfachste Weg ist die <a href="lib/InputBox.htm">InputBox</a>. Hier ein einfaches Beispiel, wie man dem Benutzer ein paar Fragen stellen kann und die eingegebenen Dinge verarbeitet:</p>
<pre>AusgabeVar := InputBox("Wie heißt du mit Vornamen?", "Frage 1").Value
if (AusgabeVar = "Bill")
    MsgBox "Du hast einen tollen Namen, " AusgabeVar "."

AusgabeVar2 := InputBox("Magst du AutoHotkey?", "Frage 2").Value
if (AusgabeVar2 = "ja")
    MsgBox "Danke, dass du mit " AusgabeVar2 " geantwortet hast, " AusgabeVar "! Wir werden gute Freunde."
else
    MsgBox AusgabeVar ", das macht mich traurig."</pre>

<h3 id="s63">b. Weitere Beispiele</h3>
<pre class="NoIndent">Ergebnis := <a href="lib/MsgBox.htm">MsgBox</a>("Möchtest du fortfahren?",, 4)
if <a href="lib/MsgBox.htm#Result">Ergebnis</a> = "No"
    return  <em>; Bei Nein wird der Code genau hier gestoppt.</em>
MsgBox "Du hast JA gedrückt."  <em>; Andernfalls hat der Benutzer Ja ausgewählt.</em></pre>
<pre class="NoIndent">Var := "text"  <em>; Weist einer Variable etwas Text zu.</em>
Num := 6  <em>; Weist einer Variable eine Zahl zu.</em>
Var2 := Var  <em>; Weist einer Variable eine andere zu.</em>
Var3 .= Var  <em>; Fügt eine Variable an das Ende einer anderen an.</em>
Var4 += Num  <em>; Addiert den Wert einer Variable mit einer anderen.</em>
Var4 -= Num  <em>; Subtrahiert den Wert einer Variable von einer anderen.</em>
Var5 := SubStr(Var, 2, 2)  <em>; Variable innerhalb einer Funktion.</em>
Var6 := Var "Text"  <em>; Weist einer Variable eine andere plus etwas Text zu.</em>
MsgBox(Var)  <em>; Variable innerhalb einer Funktion.</em>
MsgBox Var  <em>; Dasselbe wie oben.</em>
Var := StrSplit(Var, "x")  <em>; Variable innerhalb einer Funktion, die EingabeVar und AusgabeVar verwendet.</em>
if (Num = 6)  <em>; Prüft, ob eine Variable mit einer Zahl übereinstimmt.</em>
if Num = 6  <em>; Dasselbe wie oben.</em>
if (Var != Num)  <em>; Prüft, ob eine Variable nicht mit einer anderen übereinstimmt.</em>
if Var1 &lt; Var2  <em>; Prüft, ob eine Variable kleiner als eine andere ist.</em></pre>
<h2 id="s7">7 - Objekte</h2>
<p><a href="Objects.htm">Objekte</a> sind eine Möglichkeit, deine Daten auf eine effizientere Weise zu organisieren. Ein Objekt ist im Grunde genommen eine Sammlung von Variablen. Eine Variable, die zu einem Objekt gehört, wird als "Eigenschaft" bezeichnet. Ein Objekt kann auch Elemente enthalten, z.B. Array-Elemente.</p>
<p>Es gibt eine Reihe von Gründen, warum ein Objekt nützlich sein kann. Einige Beispiele:</p>
<ul>
    <li>Du brauchst eine nummerierte Liste von Dingen, z.B. eine Einkaufsliste (dies wäre ein indiziertes Array)</li>
    <li>Du möchtest etwas gitterförmig darstellen, z.B. für ein Brettspiel (dies würde mit mehrdimensionalen Objekten erfolgen)</li>
    <li>Du hast eine Liste von Dingen, in der jedes Ding eine Bezeichnung hat, wie z.B. die Merkmale einer Frucht (dies wäre ein assoziatives Array)</li>
</ul>

<h3 id="s71">a. Erstellen von Objekten</h3>
<p>Es gibt viele Wege, um ein Objekt zu erstellen, allerdings werden nachfolgend nur die gängigsten aufgelistet:</p>
<dl>
    <dt>Syntax mit eckigen Klammern (Array)</dt>
    <dd>
        <pre class="NoIndent">MeinArray := ["eins", "zwei", "drei", 17]</pre>
        <p>Erstellt ein <a href="lib/Array.htm">Array</a>, das eine Liste von Elementen repräsentiert, die von 1 aufwärts nummeriert sind. In diesem Beispiel wird der Wert <code>"eins"</code> auf Index 1 und der Wert <code>17</code> auf Index 4 gespeichert.</p>
    </dd>
    <dt>Syntax mit geschweiften Klammern</dt>
    <dd>
        <pre class="NoIndent">Banane := {Farbe: "Gelb", Geschmack: "Köstlich", Preis: 3}</pre>
        <p>Erstellt ein <i>Ad-hoc</i>-<a href="lib/Object.htm">Objekt</a>. Auf diese Weise lässt sich schnell ein Objekt mit einer kleinen Anzahl bekannter Eigenschaften erstellen. In diesem Beispiel wird der Wert <code>"Gelb"</code> in die Eigenschaft <code>Farbe</code> und der Wert <code>3</code> in die Eigenschaft <code>Preis</code> gespeichert.</p>
    </dd>
    <dt>Array-Konstruktor</dt>
    <dd>
        <pre class="NoIndent">MeinArray := Array("eins", "zwei", "drei", 17)</pre>
        <p>Identisch zur Syntax mit eckigen Klammern. Es ruft eigentlich die Array-Klasse auf, nicht eine Funktion.</p>
    </dd>
    <dt>Map-Konstruktor</dt>
    <dd>
        <pre class="NoIndent">MeinMap := Map("^", "Strg", "!", "Alt")</pre>
        <p>Erstellt ein <a href="lib/Map.htm">Map</a> bzw. <em>assoziatives Array</em>. In diesem Beispiel wird der Wert <code>"Strg"</code> mit dem Schlüssel <code>"^"</code> und der Wert <code>"Alt"</code> mit dem Schlüssel <code>"!"</code> verknüpft. Maps werden oft leer erstellt - mittels <code>Map()</code> - und später mit Elementen gefüllt.</p>
    </dd>
    <dt>Anderer Konstruktor</dt>
    <dd>
        <pre class="NoIndent">Banane := Frucht()</pre>
        <p>Erstellt ein Objekt der angegebenen Klasse (in diesem Fall Frucht).</p>
    </dd>
</dl>

<h3 id="s72">b. Verwenden von Objekten</h3>
<p>Objekte können vielfältig eingesetzt werden. Sie können Werte abrufen, Werte setzen, neue Werte hinzufügen und so weiter.</p>

<h4 id="To_set_values">Setzen von Werten</h4>
<dl>
    <dt>Klammerschreibweise</dt>
    <dd>
        <pre class="NoIndent">MeinArray[2] := "ZWEI"
MeinMap["#"] := "Win"</pre>
        <p>Das Setzen von Array- oder Map-Elementen ähnelt dem Zuweisen eines Variablenwertes. Nutze einfach die Klammerschreibweise bei der Variable, die das Objekt enthält (Array, Map oder was auch immer). Der Index oder Schlüssel zwischen den eckigen Klammern ist ein Ausdruck, weshalb Anführungszeichen für alle nicht-numerischen, direkt geschriebenen Werte verwendet werden müssen.</p>
    </dd>
    <dt>Punktschreibweise</dt>
    <dd>
        <pre class="NoIndent">Banane.Konsistenz := "Matschig"</pre>
        <p>In diesem Beispiel bekommt eine Eigenschaft, die im <em>Banane</em>-Objekt enthalten ist, einen neuen Wert zugewiesen. Wenn die Eigenschaft noch nicht existiert, wird sie erstellt.</p>
    </dd>
</dl>

<h4 id="To_retrieve_values">Abrufen von Werten</h4>
<dl>
    <dt>Klammerschreibweise</dt>
    <dd>
        <pre class="NoIndent">Wert := MeinMap["^"]</pre>
        <p>In diesem Beispiel wird der Wert abgerufen, der zuvor dem Schlüssel <code>"^"</code> zugeordnet wurde. Oft ist der Schlüssel in einer Variable enthalten, z.B. <code>MeinMap[ModZeichen]</code>.</p>
    </dd>
    <dt>Punktschreibweise</dt>
    <dd>
        <pre class="NoIndent">Wert := Banane.Farbe</pre>
        <p>In diesem Beispiel wird die Eigenschaft <code>Farbe</code> des Objekts <code>Banane</code> abgerufen.</p>
    </dd>
</dl>

<h4 id="To_add_new_keys_and_values">Hinzufügen neuer Schlüssel und Werte</h4>
<dl>
    <dt>Klammerschreibweise</dt>
    <dd>
        <pre class="NoIndent">MeinMap["NeuererSchlüssel"] := 3.1415</pre>
        <p>Um einen Wert oder Schlüssel direkt hinzuzufügen, setze einfach einen Schlüssel, der noch nicht existiert. Beachte jedoch, dass beim Zuweisen eines Wertes an ein <a href="lib/Array.htm">Array</a> der Index im Bereich von 1 bis zur aktuellen Länge des Arrays liegen muss. Verschiedene Objekte können unterschiedliche Anforderungen haben.</p>
    </dd>
    <dt>Punktschreibweise</dt>
    <dd>
        <pre class="NoIndent">MeinObjekt.NeueEigenschaft := "Glänzend"</pre>
        <p>Wie bereits oben erwähnt, wird beim Zuweisen eines Wertes an eine Eigenschaft, die noch nicht definiert wurde, eine neue Eigenschaft erstellt.</p>
    </dd>
    <dt>InsertAt-Methode</dt>
    <dd>
        <pre class="NoIndent">MeinArray.InsertAt(Index, Wert1, Wert2, Wert3...)</pre>
        <p><a href="lib/Array.htm#InsertAt">InsertAt</a> ist eine Methode zum Einfügen neuer Werte an einer bestimmten Position innerhalb eines <a href="lib/Array.htm">Arrays</a>, allerdings können auch andere Objekttypen eine Methode mit diesem Namen definieren.</p>
    </dd>
    <dt>Push-Methode</dt>
    <dd>
        <pre class="NoIndent">MeinArray.Push(Wert1, Wert2, Wert3...)</pre>
        <p><a href="lib/Array.htm#Push">Push</a> "hängt" die Werte an das Ende des <a href="lib/Array.htm">Arrays</a> <i>MeinArray</i> an. Diese Methode wird zum Hinzufügen neuer Elemente zu einem Array bevorzugt, da die Klammerschreibweise nicht verwendet werden kann, um etwas außerhalb des aktuellen Wertebereichs zuzuweisen.</p>
    </dd>
</dl>

<h4 id="To_remove_keys_and_values">Entfernen von Eigenschaften und Elementen</h4>
<dl>
    <dt>Delete-Methode</dt>
    <dd>
        <pre class="NoIndent">EntfernterWert := MeinObjekt.Delete(BeliebigerSchlüssel)</pre>
        <p><a href="lib/Array.htm">Array</a> und <a href="lib/Map.htm">Map</a> haben eine Delete-Methode, die den Wert aus dem Array oder Map entfernt. Der vorherige Wert von <code>MeinObjekt[BeliebigerSchlüssel]</code> wird in <i>EntfernterWert</i> gespeichert. Bei einem Array bewirkt das, dass das Array-Element keinen Wert mehr hat; es wirkt sich nicht auf die anderen Elemente des Arrays aus.</p>
    </dd>
    <dt>Pop-Methode</dt>
    <dd>
        <pre class="NoIndent">MeinArray.Pop()</pre>
        <p>Diese <a href="lib/Array.htm">Array</a>-Methode entfernt das letzte Element aus einem Array und gibt dessen Wert zurück. Die Länge des Arrays wird um 1 verringert.</p>
    </dd>
    <dt>RemoveAt-Methode</dt>
    <dd>
        <pre class="NoIndent">EntfernterWert := MeinArray.RemoveAt(Index)</pre>
        <pre class="NoIndent">MeinArray.RemoveAt(Index, Länge)</pre>
        <p><a href="lib/Array.htm">Array</a> hat die <a href="lib/Array.htm#RemoveAt">RemoveAt</a>-Methode, die ein Array-Element oder einen Bereich von Array-Elementen entfernt. Elemente (falls vorhanden) rechts von den entfernten Elementen werden nach links verschoben, um den frei gewordenen Platz zu füllen.</p>
    </dd>
</dl>

<h2 id="s8">8 - Andere hilfreiche Goodies</h2>
<p>Wir haben das Ende unserer Reise erreicht, werter Freund. Ich hoffe, du hast etwas gelernt. Aber bevor wir gehen, zeige ich dir noch ein paar Dinge, die du wissen solltest. Viel Spaß!</p>

<h3 id="s81">a. Die mysteriösen eckigen Klammern</h3>
<p>Auf vielen Seiten wirst du zwei Symbole (<code>[</code> und <code>]</code>) innerhalb einer gelben Syntax-Box sehen, die etwas Bestimmtes umschließen. Alles, was sich innerhalb dieser eckigen Klammern befindet, ist <b><i>OPTIONAL</i></b>. Das bedeutet, dass du das Zeug darin weglassen kannst, wenn du es nicht benötigst. Beim Schreiben deines Codes ist es sehr wichtig, die eckigen Klammern <b>NICHT</b> in deinem Code zu verwenden.</p>
<p>Auf der <a href="lib/ControlGetText.htm">ControlGetText</a>-Seite wirst du folgendes sehen:</p>
<pre class="Syntax">Text := <span class="func">ControlGetText</span>(Steuerelement <span class="optional">, FensterTitel, FensterText, AusnahmeTitel, AusnahmeText</span>)</pre>
<p>Also könntest du folgendes tun:</p>
<pre>Text := ControlGetText(Steuerelement)</pre>
<p>Oder weitere Details einfügen:</p>
<pre>Text := ControlGetText(Steuerelement, FensterTitel)</pre>
<p>Was ist zu tun, wenn du <em>AusnahmeTitel</em>, aber nicht <em>FensterText</em> oder <em>FensterTitel</em> angeben willst? Einfach!</p>
<pre>Text := ControlGetText(Steuerelement,,, AusnahmeTitel)</pre>
<p>Bitte beachte, dass die Parameter nicht IGNORIERT, sondern nur leer gelassen werden können. Wenn du <code>FensterTitel, FensterText</code> ignorieren würdest, würde es wie folgt aussehen und zu Problemen führen:</p>
<pre>Text := ControlGetText(Steuerelement, AusnahmeTitel)</pre>

<h3 id="s82">b. Herausfinden deiner AHK-Version</h3>
<p>Führe den folgenden Code aus, um deine aktuelle AHK-Version anzeigen zu lassen:</p>
<pre>MsgBox A_AhkVersion</pre>
<p>Oder suche im Startmenü oder Installationsverzeichnis nach "AutoHotkey Help File" oder "AutoHotkey.chm".</p>

<h3 id="s83">c. Trial-and-Error-Prinzip</h3>
<p>Trial-and-Error (Versuch und Irrtum) ist eine sehr verbreitete und effektive Möglichkeit des Lernens. Statt bei jeder Kleinigkeit nachzufragen, kann es manchmal hilfreich sein, wenn man etwas Zeit für sich alleine verbringt (manchmal Stunden oder Tage) und versucht, etwas selbst auf die Reihe zu bekommen.</p>
<p>Wenn du etwas ausprobierst und eine Fehlermeldung erhältst, solltest du diesen Fehler analysieren. Versuche dann, deinen Code zu korrigieren. Führe ihn nochmals aus. Wenn du weiterhin einen Fehler erhältst, sollte er auch korrigiert werden. Setze dieses Verfahren fort, bis dein Code funktioniert. Auf diese Weise lernst du viel, weil du die Dokumentation liest, Fehler analysierst und kennenlernst, was funktioniert und was nicht. Versuchen, scheitern, versuchen, scheitern, versuchen, versuchen, versuchen, scheitern, scheitern, <b>erfolgreich sein!</b></p>
<p>So haben viele "Profis" begonnen. Aber habe keine Angst zu fragen, wir beißen nicht. Das Lernen ist ein langwieriger Prozess; Die "Profis" haben AutoHotkey auch nicht in einem Tag gemeistert.</p>
<p class="note">"Wenn es beim ersten Mal nicht klappt, versuchen, versuchen Sie es erneut." - William E. Hickson</p>
<h3 id="s84">d. Einrückung</h3>
<p>Diese Sache (Einrücken) ist sehr wichtig! Dein Code läuft auch ohne Einrücken einwandfrei, aber es hilft dir und anderen, dein Code zu lesen. Ein kleines Skript (25 Zeilen oder weniger) ohne eingerückten Code kann vermutlich ohne Probleme gelesen werden, aber je größer es wird, desto unübersichtlicher wird es. Am besten lernst du so schnell wie möglich, wie du deinen Code einrücken kannst. Auf welche Weise du dein Code einrückst, spielt keine Rolle, aber achte darauf, dass es gleichmäßig aussieht.</p>
<p>"<b>Was ist Einrückung?</b>", fragst du dich? Es geht einfach darum, den Code mithilfe von Leerräumen in überschaubare Bestandteile zu gliedern, um sehen zu können, was zu was gehört. Normalerweise werden 3 oder 4 Leerzeichen oder ein Tabulatorzeichen pro "Stufe" verwendet.</p>
<p>Nicht eingerückt:</p>
<pre>if (Auto = "alt")
{
MsgBox "Das Auto ist wirklich alt."
if (Räder = "platt")
{
MsgBox "Das Auto ist nicht zum Fahren geeignet."
return
}
else
{
MsgBox "Sei vorsichtig! Dieses alte Auto könnte zu einer Gefahr werden."
}
}
else
{
MsgBox "Meine Güte, was für ein glänzendes neues Fahrzeug du hast."
}</pre>
<p>Eingerückt:</p>

<pre>if (Auto = "alt")
{
    MsgBox "Das Auto ist wirklich alt."
    if (Räder = "platt")
    {
        MsgBox "Das Auto ist nicht zum Fahren geeignet."
        return
    }
    else
    {
        MsgBox "Sei vorsichtig! Dieses alte Auto könnte zu einer Gefahr werden."
    }
}
else
{
    MsgBox "Meine Güte, was für ein glänzendes neues Fahrzeug du hast."
}</pre>
<p>Schau dir den Wikipedia-Artikel <a href="https://en.wikipedia.org/wiki/Indentation_style">Einrückungsstil</a> an, um verschiedene Stile und Beispiele in Erfahrung zu bringen. Entscheide selbst, was oder wie du einrücken willst bzw. wie dein Code am einfachsten gelesen werden kann.</p>

<h3 id="s85">e. Um Hilfe bitten</h3>
<p>Zuallererst solltest du selbst versuchen, Nachforschungen zu betreiben oder den Code zu schreiben. Wenn du mit den Ergebnissen nicht zufrieden bist, kannst du die Community fragen, aber beachte dabei folgende Punkte:</p>
<ul>
    <li>Habe keine Hemmungen um Hilfe zu bitten, selbst die klügsten Menschen tun das.</li>
    <li>Zeige uns deine Versuche, auch wenn du der Ansicht bist, dass sie lächerlich sind.</li>
    <li>Schicke uns all deine Versuche.</li>
    <li>Tue so, als wäre <i>jeder außer du</i> dumm wie Brot, der von nichts weiß. Gib uns so viele Informationen wie möglich, damit wir wissen, was du vorhast. Hilf uns, dir zu helfen.</li>
    <li>Sei geduldig.</li>
    <li>Sei höflich.</li>
    <li>Sei offen.</li>
    <li>Sei nett.</li>
    <li>Viel Spaß!</li>
</ul>
<p>Erwarte nicht, dass du sofort eine Antwort bekommst - warte wenigstens 1 Tag (24 Stunden), bevor du nachhakst. Wir helfen gerne, aber bedenke, dass wir unsere Hilfe kostenlos anbieten und unsere Freizeit dafür opfern. Wir könnten gerade arbeiten, schlafen, spielen, mit der Familie zusammen sein, oder einfach zu beschäftigt sein, um zu helfen.</p>
<p>Während du auf Hilfe wartest, könntest du selbst versuchen, das Problem zu lösen. Es ist ein tolles Gefühl, etwas ohne Hilfe geschafft zu haben.</p>

<h3 id="s86">f. Andere Links</h3>
<p><a href="FAQ.htm">Häufig gestellte Fragen (FAQ)</a></p>
</body>
</html>

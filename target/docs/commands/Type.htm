<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Type - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Type-Funktion gibt den Klassennamen eines Wertes zurück." />
<meta name="ahk:equiv-v1" content="AutoHotkey.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Type</h1>
<p>Gibt den Klassennamen eines Wertes zurück.</p>
<pre class="Syntax">KlasseName := <span class="func">Type</span>(Wert)</pre>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Diese Funktion gibt den Klassennamen von <em>Wert</em> zurück.</p>
<p>Der Algorithmus zur Bestimmung des Klassennamens eines Wertes kann ungefähr wie folgt dargestellt werden:</p>
<pre>
TypeOf(Value)
{
    if (comClass := ComObjType(Value, "Class")) != ""
        return comClass
    try <em>; `Value is Object` wird nicht geprüft, da es bei Prototypen False sein kann.</em>
        if ObjHasOwnProp(Value, "__Class")
            return "Prototype"
    while Value := ObjGetBase(Value)
        if ObjHasOwnProp(Value, "__Class")
            return Value.__Class
    return "Object"
}
</pre>
<p>Handelt es sich um COM-Wrapper-Objekte, kann der Klassenname auch anhand des <a href="ComObjType.htm#vt">Variantentyps</a> wie folgt ermittelt werden:</p>
<pre>
ComObject_Type(obj)
{
    if ComObjType(obj) &amp; 0x2000 <em>; VT_ARRAY</em>
        return "ComObjArray" <em>; ComObjArray.Prototype.__Class</em>
    if ComObjType(obj) &amp; 0x4000 <em>; VT_BYREF</em>
        return "ComValueRef" <em>; ComValueRef.Prototype.__Class</em>
    if (ComObjType(obj) = 9 || ComObjType(obj) = 13) <em>; VT_DISPATCH || VT_UNKNOWN</em>
        &amp;&amp; ComObjValue(obj) != 0
    {
        if (comClass := ComObjType(obj, "Class")) != ""
            return comClass
        if ComObjType(obj) = 9 <em>; VT_DISPATCH</em>
            return "ComObject" <em>; ComObject.Prototype.__Class</em>
    }
    return "ComValue" <em>; ComValue.Prototype.__Class</em>
}
</pre>

<h2 id="Remarks">Bemerkungen</h2>
<p>Diese Funktion sollte man nicht benutzen, um zu überprüfen, ob ein Wert numerisch ist, da auch numerische <em>Zeichenketten</em> in mathematischen Ausdrücken oder in Verbindung mit internen Funktionen gültig sein können. In einigen Fällen kann der genaue Typ eines Wertes aber wichtig sein. Verwenden Sie in solchen Fällen nicht Type, sondern lieber <code>Wert is Number</code> oder ähnliches.</p>
<p>Um zu überprüfen, ob ein Wert als Zahl benutzt werden kann, nutzen Sie die <a href="Is.htm#number">IsNumber</a>-, <a href="Is.htm#integer">IsInteger</a>- oder <a href="Is.htm#float">IsFloat</a>-Funktion.</p>
<p>Mit der <a href="IsObject.htm">IsObject</a>-Funktion kann man überprüfen, ob ein Wert ein Objekt beliebigen Typs (also alles, was kein primitiver Wert ist) ist.</p>
<p>Um zu prüfen, ob ein Wert eine Instanz einer bestimmten Klasse ist, verwenden Sie den <a href="../Variables.htm#is"><code>is</code></a>-Operator. Dieser kann auch in Verbindung mit primitiven Werten oder zur Identifizierung von <a href="ComValue.htm">COM-Wrapper-Objekten</a> verwendet werden.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="../Concepts.htm#values">Werte</a>, <a href="../Language.htm#expressions">Ausdrücke (Expressions)</a>, <a href="Is.htm">Is-Funktionen</a>, <a href="Integer.htm">Integer</a>, <a href="Float.htm">Float</a>, <a href="String.htm">String</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Ermittelt und meldet den genauen Typ der Werte, die in <var>a</var>, <var>b</var> und <var>c</var> gespeichert sind.</p>
<pre>
a := 1, b := 2.0, c := "3"
MsgBox Type(a)  <em>; Integer</em>
MsgBox Type(b)  <em>; Float</em>
MsgBox Type(c)  <em>; String</em>
</pre>
</div>

</body>
</html>

<!DOCTYPE html>
<html lang="de">
<head>
<meta name="description" content="Erfahren Sie, wie man mit AutoHotkey Programme ausführt." />
<meta name="ahk:equiv-v1" content="Tutorial.htm#s4" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>Wie man Programme ausführt | AutoHotkey v2</title>
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Wie man Programme ausführt</h1>
<p>Eines der einfachsten und nützlichsten Dinge, die AutoHotkey kann, ist das Erstellen von Tastaturkurzbefehlen (Hotkeys), mit denen sich Programme starten lassen.</p>
<p>Um ein Programm zu starten, rufen Sie die <a href="../lib/Run.htm">Run</a>-Funktion auf und <a href="../Concepts.htm#pass-parameters">übergeben</a> Sie die Befehlszeile des Programms als <a href="../Concepts.htm#parameters">Parameter</a>:</p>
<pre>Run "C:\Windows\notepad.exe"</pre>
<p>Dieses Beispiel startet den Texteditor von Windows (auch Notepad genannt). Wie Sie es ausprobieren können, erfahren Sie unter <a href="RunExamples.htm">Wie man Beispielcodes ausführt</a>.</p>
<p>Zu diesem Zeitpunkt haben wir noch keinen Hotkey definiert (oder anders gesagt, keinen Tastaturkurzbefehl zugewiesen), so dass die Anweisungen sofort ausgeführt werden. In diesem Fall muss das Skript nichts weiter tun und beendet sich daher automatisch. Wenn Sie lieber lernen möchten, wie man nützliche Hotkeys erstellt, sollten Sie sich zuerst <a href="WriteHotkeys.htm">Wie man Hotkeys schreibt</a> anschauen.</p>
<p class="note"><strong>Hinweis:</strong> Run kann auch zum Öffnen von Dokumenten, Ordnern und URLs verwendet werden.</p>
<p>Um andere Programme zu starten, ersetzen Sie einfach den Pfad im obigen Beispiel mit dem Pfad des Programms, das Sie starten möchten. Bei einigen Programmen sind die Pfade im System registriert. In diesem Fall brauchen Sie nur den Dateinamen des Programms anzugeben, entweder mit oder (manchmal) ohne die Endung ".exe". Zum Beispiel:</p>
<pre>Run "notepad"</pre>

<h2>Befehlszeilenparameter</h2>
<p>Wenn das Programm Befehlszeilenparameter akzeptiert, können diese als Teil des ersten Parameters der <a href="../lib/Run.htm">Run</a>-Funktion übergeben werden. Das folgende Beispiel sollte license.txt in Notepad öffnen:</p>
<pre>
Run "notepad C:\Program Files\AutoHotkey\license.txt"
</pre>
<p class="note"><strong>Hinweis:</strong> Dieses Beispiel geht davon aus, dass AutoHotkey im Standardverzeichnis installiert ist. Ist das nicht der Fall, wird eine Fehlermeldung angezeigt.</p>
<p>Einfach, oder? Nehmen wir nun an, dass wir die Datei in WordPad statt in Notepad öffnen wollen.</p>
<pre>Run "wordpad C:\Program Files\AutoHotkey\license.txt"</pre>
<p>Führen Sie diesen Code aus, um zu schauen, was passiert.</p>
<p>Okay, der neue Code funktioniert also nicht. Hoffentlich haben Sie die Fehlermeldung nicht sofort weggeklickt; Fehlermeldungen bzw. Fehlerdialogfenster gehören zum Programmieren dazu und enthalten oft sehr nützliche Informationen. Es liefert uns die folgenden Informationen:</p>
<ul>
  <li>Zunächst das Offensichtliche: Das Programm konnte nicht gestartet werden.</li>
  <li>Das Dialogfenster zeigt "Action" und "Params", aber unsere gesamte Befehlszeile wird neben "Action" angezeigt, während "Params" leer ist. Mit anderen Worten: Die Run-Funktion weiß nicht, wo der Programmname endet und die Parameter beginnen.</li>
  <li>"Das System kann die angegebene Datei nicht finden" (in deutschsprachigen Systemen). Vielleicht konnte das System "wordpad" nicht finden, aber was es wirklich sagen will, ist, dass es keine solche Datei wie "wordpad C:\..." gibt.</li>
</ul>
<p>Aber warum hat Notepad funktioniert? Nur "notepad" oder "wordpad" auszuführen, funktioniert, aber aus unterschiedlichen Gründen. Im Gegensatz zu notepad.exe kann wordpad.exe nicht durch Überprüfen aller Verzeichnisse in der PATH-Umgebungsvariable gefunden werden. Es kann durch eine andere Methode lokalisiert werden, allerdings muss die Run-Funktion dafür den Programmnamen und die Parameter trennen.</p>
<p>Folglich benötigt die Run-Funktion in diesem Fall ein wenig Nachhilfe, wahlweise in einer oder allen der folgenden Formen:</p>
<ul>
  <li>Explizit die Endung ".exe" verwenden.</li>
  <li>Explizit den vollständigen Pfad von wordpad.exe verwenden.</li>
  <li>Den Programmnamen in Anführungszeichen setzen.</li>
</ul>
<p>Entscheiden wir uns zunächst für die einfachste Option:</p>
<pre>Run "wordpad.exe C:\Program Files\AutoHotkey\license.txt"</pre>
<p>Jetzt wird WordPad gestartet, aber es zeigt einen Fehler an: "C:\Program" wurde nicht gefunden.</p>

<h2>Anführungszeichen und Leerzeichen</h2>
<p>Bei der Übergabe von Befehlszeilenparametern an ein Programm ist es oft notwendig, jeden Parameter, der Leerzeichen enthält, in Anführungszeichen zu setzen. Bei Notepad war das nicht notwendig, aber Notepad ist eine Ausnahme von der allgemeinen Regel. Ein naiver Lösungsversuch könnte darin bestehen, einfach mehr Anführungszeichen hinzuzufügen:</p>
<pre>Run "wordpad.exe "C:\Program Files\AutoHotkey\license.txt""</pre>
<p>Das wird aber nicht funktionieren, weil Anführungszeichen standardmäßig verwendet werden, um den Anfang und das Ende von direkt geschriebenem Text zu kennzeichnen. Wie kann man also so ein Anführungszeichen in die Befehlszeile einfügen, anstatt die Befehlszeile damit zu beenden?</p>
<p><strong>Methode 1:</strong> Setzen Sie vor jedes dieser Anführungszeichen ein <code>`</code> (Akzentzeichen oder Gravis). Man bezeichnet dies als <a href="../misc/EscapeChar.htm">Escapesequenz</a>. Das Anführungszeichen wird dann in die Befehlszeile (das ist die Zeichenkette, die an die Run-Funktion übergeben wird) eingefügt, während das Akzentzeichen seinen Zweck erfüllt hat und deshalb wegfällt.</p>
<pre>Run "wordpad.exe `"C:\Program Files\AutoHotkey\license.txt`""</pre>
<p><strong>Methode 2:</strong> Umschließen Sie die Befehlszeile mit einfachen anstelle von doppelten Anführungszeichen.</p>
<pre>Run 'wordpad.exe "C:\Program Files\AutoHotkey\license.txt"'</pre>
<p>Natürlich müssten in diesem Fall alle <em>direkt geschriebenen</em> einfachen Anführungszeichen (oder Apostrophe) im Text mit einem Escapezeichen versehen werden (<code>`'</code>).</p>
<p>Die Art und Weise, wie Sie den Code schreiben, wirkt sich darauf aus, welche Anführungszeichen tatsächlich an die Run-Funktion übergeben werden. In den beiden obigen Beispielen wird der Run-Funktion die Zeichenkette <code>wordpad.exe "C:\Program Files\AutoHotkey\license.txt"</code> übergeben. Die Run-Funktion teilt diese Zeichenkette entweder in <em>Programmname</em> und <em>Parameter</em> auf oder überlässt das dem System. In beiden Fällen hängt es ganz vom Zielprogramm ab, wie die restlichen Anführungszeichen interpretiert werden.</p>
<p>Viele Programme behandeln ein Anführungszeichen als Teil des Parameters, wenn ihm ein umgekehrter Schrägstrich vorangestellt ist. Zum Beispiel könnte <code>Run 'meine.exe "A\" B'</code> einen Parameter mit dem Wert <code>A" B</code> anstelle von zwei Parametern erzeugen. Das ist dem Programm überlassen und kann in der Regel durch Verdoppeln des umgekehrten Schrägstrichs vermieden werden, wie in <code>Run 'meine.exe "A\\" B'</code>, das normalerweise zwei Parameter (<code>A\</code> und <code>B</code>) erzeugt.</p>
<p>Die meisten Programme interpretieren Anführungszeichen als eine Art Schalter, der zwischen den Modi "Leerzeichen beendet den Parameter" und "Leerzeichen ist im Parameter enthalten" wechselt. Mit anderen Worten: <code>Run 'meine.exe "A B"'</code> ist grundsätzlich äquivalent zu <code>Run 'meine.exe A" "B'</code>. Um Probleme mit Schrägstrichen zu vermeiden, gibt es auch die Möglichkeit, die <em>Leerzeichen</em> anstelle des gesamten Parameters in Anführungszeichen zu setzen, oder das Anführungszeichen vor dem Schrägstrich zu beenden, wie in <code>Run 'meine.exe "A"\ B'</code>.</p>

<h2>Variablen einbeziehen</h2>
<p>Oft muss eine Befehlszeile einige <a href="../Concepts.htm#variables">Variablen</a> enthalten. Zum Beispiel kann der Ort des Verzeichnisses "Programme" von System zu System variieren. Ein Skript kann diese Tatsache durch Nutzung der <a href="../Variables.htm#ProgramFiles">A_ProgramFiles</a>-Variable berücksichtigen. Wenn die Variable die gesamte Befehlszeile enthält, übergeben Sie die Variable einfach an die Run-Funktion, um sie auszuführen.</p>
<pre>Run A_ComSpec  <em>; Startet eine Eingabeaufforderung (fast immer cmd.exe).</em>
Run A_MyDocuments  <em>; Öffnet den Dokumente-Ordner des Benutzers.</em></pre>
<p>Es ist nicht möglich, eine Variable <em>in</em> eine in Anführungszeichen gesetzte Zeichenkette einzufügen; stattdessen greifen wir auf die <a href="../Variables.htm#concat">Verkettung</a> zurück, um direkt geschriebene Zeichenketten mit Variablen zu verbinden. Zum Beispiel:</p>
<pre>Run 'notepad.exe "' A_MyDocuments '\AutoHotkey.ahk"'</pre>
<p>Eine andere Methode ist die Verwendung von <a href="../lib/Format.htm">Format</a>, um eine Substitution durchzuführen. Zum Beispiel:</p>
<pre>Run Format('notepad.exe "{1}\AutoHotkey.ahk"', A_MyDocuments)</pre>
<p class="note"><strong>Hinweis:</strong> Format kann gleichzeitig zusätzliche Formatierungen vornehmen, z. B. das Auffüllen mit 0en oder Leerzeichen oder die Umwandlung von Dezimalzahlen in Hexadezimalzahlen.</p>

<h2>Die Parameter von Run</h2>
<p>Abgesehen von der Befehlszeile, die ausgeführt werden soll, akzeptiert die Run-Funktion noch andere <a href="../Concepts.htm#parameters">Parameter</a>, die ihr Verhalten beeinflussen.</p>
<p><em>ArbeitVerz</em> spezifiziert das Arbeitsverzeichnis für den neuen Prozess. Wenn Sie einen relativen Pfad für das Programm angeben, ist es relativ zu diesem Verzeichnis. Relative Pfade in Befehlszeilenparametern sind oft auch relativ zu diesem Verzeichnis, aber das ist abhängig vom jeweiligen Programm.</p>
<pre>Run "cmd", "C:\"  <em>; Öffnet eine Eingabeaufforderung unter C:\</em></pre>
<p><em>Optionen</em> kann oft verwendet werden, um ein Programm minimiert oder versteckt auszuführen, sodass es gar nicht erst auf dem Bildschirm erscheint, aber einige Programme ignorieren das.</p>
<p><em>AusgabeVarPID</em> liefert Ihnen die Prozess-ID. Diese ID wird oft zusammen mit <a href="../lib/WinWait.htm">WinWait</a> oder <a href="../lib/WinWaitActive.htm">WinWaitActive</a> und <a href="../misc/WinTitle.htm#ahk_pid">ahk_pid</a> verwendet, um zu warten, bis das Programm ein Fenster auf dem Bildschirm anzeigt, oder um eines seiner Fenster zu identifizieren. Zum Beispiel:</p>
<pre>Run "notepad",,, &amp;pid
WinWaitActive "ahk_pid " pid
SendText "Hallo, Welt!"</pre>

<h2>Systemverben</h2>
<p><a href="../lib/Run.htm#verbs">Systemverben</a> sind Aktionen, die das System oder Applikationen für bestimmte Dateitypen registrieren. Diese sind normalerweise im Rechtsklickmenü der Datei im Explorer verfügbar, aber ihre tatsächlichen Namen stimmen nicht immer mit dem im Menü angezeigten Text überein. AutoHotkey-Skripte haben zum Beispiel das Verb "edit", mit dem das Skript in einem Editor geöffnet wird, und das Verb "compile" (sofern Ahk2Exe installiert ist), mit dem das Skript <a href="../Scripts.htm#ahk2exe">kompiliert</a> wird.</p>
<p>"Edit" ist eines der üblichen Verben, die Run standardmäßig erkennt, und kann daher durch Eingabe des Wortes, gefolgt von einem Leerzeichen und dem Dateinamen, verwendet werden:</p>
<pre>Run 'edit ' A_ScriptFullPath  <em>; Grundsätzlich äquivalent zu <a href="../lib/Edit.htm">Edit</a></em></pre>
<p>Jedes im System registrierte Verb kann durch Nutzung des Präfixes * ausgeführt werden:</p>
<pre>Run '*Compile-Gui ' A_ScriptFullPath</pre>
<p>Wenn Ahk2Exe installiert ist, wird mit diesem Verb die Ahk2Exe-GUI geöffnet, in der das aktuelle Skript vorab ausgewählt ist.</p>

<h2>Umgebung</h2>
<p>Jedes Mal, wenn ein neuer Prozess startet, erbt er in der Regel die <em>Umgebung</em> des Prozesses, der ihn gestartet hat (der <em>übergeordnete Prozess</em>). Das bedeutet im Grunde, dass alle <a href="../Concepts.htm#environment-variables">Umgebungsvariablen</a> des Skripts an Programme vererbt werden, die Sie mit <a href="../lib/Run.htm">Run</a> starten.</p>
<p>In einigen Fällen können Umgebungsvariablen mit <a href="../lib/EnvSet.htm">EnvSet</a> gesetzt werden, bevor das Programm gestartet wird, um sein Verhalten zu beeinflussen oder ihm Informationen zu übergeben. Ein Skript kann auch <a href="../lib/EnvGet.htm">EnvGet</a> verwenden, um Umgebungsvariablen zu lesen, die es ggf. von seinem übergeordneten Prozess geerbt hat.</p>
<p>In 64-Bit-Systemen hängt die Umgebung des Skripts stark davon ab, ob die EXE, die es ausführt, 32-Bit oder 64-Bit ist. 32-Bit-Prozesse haben nicht nur andere Umgebungsvariablen, sondern sind aus Kompatibilitätsgründen auch einer <a href="https://learn.microsoft.com/de-de/windows/win32/winprog64/file-system-redirector">Dateisystemumleitung</a> ausgesetzt.</p>
<pre>Run "cmd /k set pro"</pre>
<p>Das obige Beispiel startet eine Eingabeaufforderung, die alle Umgebungsvariablen anzeigt, die mit "pro" beginnen. Wenn Sie diesen Code mit einem 32-Bit-Skript ausführen, werden Sie wahrscheinlich <code>PROCESSOR_ARCHITECTURE=x86</code> und <code>ProgramFiles=C:\Program Files (x86)</code> sehen. Auch wenn der Titel so etwas wie "C:\Windows\System32\cmd.exe" anzeigt, entspricht das nicht der Wahrheit; es handelt sich eigentlich um die 32-Bit-Version, die sich in "C:\Windows\SysWow64\cmd.exe" befindet.</p>
<p>In solchen Fällen ist es am einfachsten, die Umleitung von "System32" zu umgehen, indem man stattdessen "SysNative" verwendet. Allerdings funktioniert das nur über einen 32-Bit-Prozess auf einem 64-Bit-System, weshalb das nur bedingt geschehen sollte. Wenn das folgende Beispiel in einem 64-Bit-System ausgeführt wird, zeigt es eine 64-Bit-Eingabeaufforderung an, auch wenn das Skript 32-Bit ist:</p>
<pre>if FileExist(A_WinDir "\SysNative")
    Run A_WinDir "\SysNative\cmd.exe /k set pro"
else
    Run "cmd /k set pro"</pre>

</body>
</html>

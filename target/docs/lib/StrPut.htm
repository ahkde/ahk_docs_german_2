<!DOCTYPE HTML>
<html lang="de">
<head>
<title>StrPut - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die StrPut-Funktion kopiert eine Zeichenkette in einen Speicherbereich oder Puffer unter Beachtung eines bestimmten Zeichensatzes." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>StrPut</h1>

<p>Kopiert eine Zeichenkette in einen Speicherbereich oder Puffer unter Beachtung eines bestimmten Zeichensatzes.</p>

<pre class="Syntax"><span class="func">StrPut</span> Zkette <span class="optional">, Codierung := <i>Keine</i></span> 
<span class="func">StrPut</span> Zkette, Ziel <span class="optional">, Länge</span> <span class="optional">, Codierung := <i>Keine</i></span>
</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Zkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine beliebige Zeichenkette. Wenn eine Zahl angegeben ist, wird sie automatisch in eine Zeichenkette umgewandelt.</p>
    <p><em>Zkette</em> wird standardmäßig in der <a href="../Concepts.htm#string-encoding">nativen Codierung</a> vermutet.</p>
  </dd>

  <dt>Ziel</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt oder eine Speicheradresse, in die die Zeichenkette geschrieben werden soll.</p>
    <p>Obwohl ein beliebiges Objekt mit einer <a href="Buffer.htm#Ptr">Ptr</a>- und <a href="Buffer.htm#Size">Size</a>-Eigenschaft verwendet werden kann, ist diese Funktion für das native <a href="Buffer.htm">Buffer</a>-Objekt optimiert. Das Übergeben eines Objekts mit diesen Eigenschaften stellt sicher, dass die Funktion keinen Speicher in einen ungültigen Bereich schreibt, was zu Abstürzen oder anderem unvorhersehbaren Verhalten führen kann.</p>
    <p class="warning"><strong>Hinweis:</strong> Bei einer Konvertierung zwischen Zeichensätzen kann die erforderliche Pufferspeichergröße von der Größe der Quellzeichenkette abweichen. In solchen Fällen können Sie StrPut mit zwei Parametern aufrufen, um die erforderliche Größe zu berechnen.</p>
  </dd>

  <dt>Länge</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der zu schreibenden <a href="../Concepts.htm#character">Zeichen</a>, einschließlich des <a href="../Concepts.htm#null-termination">Null-Terminators</a>, falls notwendig.</p>
    <p>Wenn <em>Länge</em> 0 oder kleiner als die nach der Konvertierung voraussichtliche Länge (oder die Länge der Quellzeichenkette, wenn die Konvertierung nicht erforderlich ist) ist, wird eine Ausnahme ausgelöst.</p>
    <p><em>Länge</em> darf nicht weggelassen werden, wenn <em>Ziel</em> eine reine Speicheradresse ist, es sei denn, man weiß, dass die Pufferspeichergröße ausreicht, z. B. wenn der Pufferspeicher basierend auf einem vorherigen Aufruf von StrPut, das die gleiche <em>Quelle</em> und <em>Codierung</em> hat, reserviert wurde.</p>
    <p>Wenn <em>Ziel</em> ein Objekt ist, löst eine <em>Länge</em> größer als die Pufferspeichergröße, welche über <code><i>Ziel</i>.Size</code> ermittelt wird, einen Fehler aus, auch wenn die umgewandelte Zeichenkette in den Pufferspeicher passen würde.</p>
    <p class="warning"><strong>Hinweis:</strong> Wenn <em>Codierung</em> angegeben ist, sollte <em>Länge</em> mit der Pufferspeichergröße übereinstimmen (in Zeichen), <strong>nicht</strong> mit der Länge von <em>Zkette</em> oder einer Teilzeichenkette, da sie bei der Konvertierung eventuell länger gemacht wird.</p>
    <p class="warning"><strong>Hinweis:</strong> <em>Länge</em> wird in Zeichen gemessen, während Pufferspeichergrößen normalerweise in Bytes gemessen werden, ebenso wie der Rückgabewert von StrPut. Um die Pufferspeichergröße in Bytes anzugeben, muss ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt im <em>Ziel</em>-Parameter verwendet werden.</p>
  </dd>

  <dt>Codierung</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Zielcodierung; zum Beispiel: <code>"UTF-8"</code>, <code>"UTF-16"</code> oder <code>"CP936"</code>. Bei numerischen Identifikatoren kann das Präfix "CP" nur weggelassen werden, wenn <em>Länge</em> angegeben ist. Geben Sie eine leere Zeichenkette oder <code>"CP0"</code> an, um den Standard-ANSI-Zeichensatz des Systems zu nutzen.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Lässt man <em>Ziel</em> weg, gibt diese Funktion die erforderliche Pufferspeichergröße in Bytes zurück, inklusive Platz für den Null-Terminator.</p>
<p>Wenn <em>Ziel</em> angegeben ist, gibt diese Funktion die Anzahl der geschriebenen Bytes zurück. Ein Null-Terminator wird nur dann geschrieben und zum Rückgabewert hinzugefügt, wenn genügend Platz vorhanden ist; das heißt, er wird weggelassen, wenn <em>Länge</em> oder <code><i>Ziel</i>.Size</code> (multipliziert mit der Größe eines Zeichens) exakt mit der Länge der umgewandelten Zeichenkette übereinstimmt.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Es wird ein <a href="Error.htm#ValueError">ValueError</a> ausgelöst, wenn ungültige Parameter erkannt werden, z. B. wenn die umgewandelte Zeichenkette länger als <em>Länge</em> oder <code><i>Ziel</i>.Size</code> ist.</p>
<p>Es wird ein <a href="Error.htm#OSError">OSError</a> ausgelöst, wenn die Konvertierung nicht durchgeführt werden konnte.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Beachten Sie, dass der <i>Zkette</i>-Parameter immer davon ausgeht, die <a href="../Concepts.htm#string-encoding">native Codierung</a> der aktuell genutzten Version von AutoHotkey zu verwenden, wohingegen <i>Codierung</i> die Codierung der auf das angegebene <i>Ziel</i> geschriebenen Zeichenkette spezifiziert. Wenn keine <em>Codierung</em> angegeben ist, wird die Zeichenkette gemessen oder kopiert, ohne dass eine Umwandlung stattfindet.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="../Concepts.htm#string-encoding">Zeichenkettencodierung</a>, <a href="StrGet.htm">StrGet</a>, <a href="../Compat.htm">Binärkompatibilität</a>, <a href="FileEncoding.htm">FileEncoding</a>, <a href="DllCall.htm">DllCall</a>, <a href="Buffer.htm">Buffer-Objekt</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExNumEnc">
<p><a class="ex_number" href="#ExNumEnc"></a> Es ist möglich, <em>Länge</em> oder <em>Codierung</em> direkt nach <em>Ziel</em> anzugeben, aber in diesem Fall darf <em>Codierung</em> nicht numerisch sein.</p>
<pre>
StrPut(Zkette, Adresse, "cp0")  <em>; Zeichensatz 0, unbestimmte Pufferspeichergröße</em>
StrPut(Zkette, Adresse, n, 0)   <em>; Maximal n Zeichen, Zeichensatz 0</em>
StrPut(Zkette, Adresse, 0)      <em>; Nicht unterstützt (maximal 0 Zeichen)</em>
</pre>
</div>
<div class="ex" id="ExEncoding">
<p><a class="ex_number" href="#ExEncoding"></a> StrPut kann einmal aufgerufen werden, um die erforderliche Pufferspeichergröße für eine Zeichenkette in einer bestimmten Codierung zu berechnen, und danach nochmal, um die Zeichenkette zu codieren und sie in den Pufferspeicher zu schreiben. Um diesen Vorgang zu vereinfachen, können Sie die folgende Funktion nutzen.</p>
<pre filename="StrBuf.ahk"><em>; Gibt ein <a href="Buffer.htm">Buffer</a>-Objekt zurück, das die Zeichenkette enthält:</em>
StrBuf(Zkette, Codierung)
{
    <em>; Berechnet erforderliche Größe und reserviert Pufferspeicher.</em>
    buf := Buffer(StrPut(Zkette, Codierung))
    <em>; Kopiert oder wandelt die Zeichenkette um.</em>
    StrPut(Zkette, buf, Codierung)
    return buf
}</pre>
</div>

</body>
</html>

<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Finally - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Finally-Anweisung stellt sicher, dass nach Abschluss einer Try-Anweisung immer eine oder mehrere Anweisungen ausgeführt werden." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Finally</h1>

<p>Stellt sicher, dass nach Abschluss einer <a href="Try.htm">Try</a>-Anweisung immer eine oder mehrere <a href="../Concepts.htm#statement">Anweisungen</a> ausgeführt werden.</p>

<pre class="Syntax"><span class="func">Finally</span> <i>Anweisung</i></pre>
<pre class="Syntax" style="line-height: 100%"><span class="func">Finally</span>
{
    <i>Anweisungen</i>
}</pre>
<h2 id="Remarks">Bemerkungen</h2>
<p>Jedes <em>Finally</em> muss zu einem darüber liegenden <a href="Try.htm">Try</a> (nach einem optionalen <a href="Catch.htm">Catch</a> und/oder <a href="Else.htm">Else</a>) gehören (mit ihm verbunden sein). Ein <em>Finally</em> bezieht sich immer auf das nächstmögliche unbeanspruchte <em>Try</em> über ihm, es sei denn, ein <a href="Block.htm">Block</a> wurde verwendet, um dieses Verhalten zu ändern.</p>
<p>Das Verhalten von <em>Try</em> hängt davon ab, ob ein <em>Catch</em> oder <em>Finally</em> vorhanden ist. Weitere Informationen finden Sie unter <a href="Try.htm">Try</a>.</p>
<p><em>Goto</em>, <em>Break</em>, <em>Continue</em> und <em>Return</em> können nicht verwendet werden, um einen <em>Finally</em>-Block zu verlassen, da sonst jegliche Kontrollanweisungen innerhalb eines <em>Try</em>-Blocks unterdrückt werden müssten. Wenn <em>Try</em> beispielsweise <code>return 42</code> verwendet, wird der Wert 42 erst nach der Ausführung des <em>Finally</em>-Blocks zurückgegeben. Der Versuch, mit einer dieser Anweisungen aus einem <em>Finally</em>-Block herauszuspringen, wird als Fehler erkannt, wenn das Skript geladen wird, sofern möglich, andernfalls während der Ausführung des Skripts.</p>
<p><em>Finally</em>-Anweisungen werden nicht ausgeführt, wenn das Skript direkt terminiert wird, mit Mitteln wie dem Tray-Menü oder <a href="ExitApp.htm">ExitApp</a>.</p>
<p>Je nach Bedarf kann der <a href="Block.htm#otb">One True Brace (OTB) Style</a> bei einem <em>Finally</em> verwendet werden. Zum Beispiel:</p>
<pre>try {
    ...
} finally {
    ...
}

try {
    ...
} catch {
    ...
} else {
    ...
} finally {
    ...
}</pre>
<h2 id="Related">Siehe auch</h2>
<p><a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Else.htm">Else</a>, <a href="Throw.htm">Throw</a>, <a href="Block.htm">Blöcke</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Zeigt detailliert das Verhalten von <em>Finally</em>.</p>
<pre>try
{
    ToolTip "Bearbeite ..."
    Beispiel1()
}
catch as e
{
    <em>; Um mehr über das Objekt zu erfahren, das in e enthalten ist, siehe <a href="Error.htm">Error</a>.</em>
    MsgBox(Type(e) " ausgelöst!`n`nWas: " e.what "`nDatei: " e.file
        . "`nZeile: " e.line "`nNachricht: " e.message "`nZusatz: " e.extra,, 16)
}
finally
{
    ToolTip <em>; Versteckt den Tooltip</em>
}

MsgBox "Fertig!"

<em>; Diese Funktion hat einen Finally-Block, der als Aufräumcode fungiert</em>
Beispiel1()
{
    try
        Beispiel2()
    finally
        MsgBox "Dies wird immer ausgeführt, unabhängig von Ausnahmen"
}

<em>; Diese Funktion schlägt fehl, wenn die Minuten ungerade sind</em>
Beispiel2()
{
    if Mod(A_Min, 2)
        throw Error("That's odd...")
    MsgBox "Beispiel2 ist nicht fehlgeschlagen"
}</pre>
</div>

</body>
</html>

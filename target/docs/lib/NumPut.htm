<!DOCTYPE HTML>
<html lang="de">
<head>
<title>NumPut - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die NumPut-Funktion speichert eine oder mehrere Nummern im Binärformat auf eine bestimmte Adresse + Offset." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut</h1>
<p>Speichert eine oder mehrere Nummern im Binärformat auf eine bestimmte Adresse + Offset.</p>
<pre class="Syntax"><span class="func">NumPut</span> Typ, Nummer, <span class="optional">Typ2, Nummer2, ...</span> Ziel <span class="optional">, Offset</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Typ</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine der folgenden Zeichenketten: UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr oder UPtr</p>
      <p>Bei allen Integer-Typen oder bei der Übergabe von reinen Integern hat der Unterschied zwischen vorzeichenfähig und vorzeichenlos keinen Einfluss auf das Ergebnis, weil zum Darstellen von vorzeichenfähigen Integern das Zweierkomplement genutzt wird.</p>
      <p>Diese Typen müssen in Anführungszeichen gesetzt werden, wenn sie als direkt geschriebene Zeichenketten verwendet werden.</p>
      <p>Um mehr darüber zu erfahren, siehe <a href="DllCall.htm#types">DllCall-Typen</a>.</p>
    </dd>

  <dt>Nummer</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die zu speichernde Nummer.</p>
  </dd>

  <dt>Ziel</dt>
  <dd>
    <p>Typ: <a href="Buffer.htm">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
		<p>Ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt oder eine Speicheradresse.</p>
    <p>Obwohl ein beliebiges Objekt mit einer <a href="Buffer.htm#Ptr">Ptr</a>- und <a href="Buffer.htm#Size">Size</a>-Eigenschaft verwendet werden kann, ist diese Funktion für das native <a href="Buffer.htm">Buffer</a>-Objekt optimiert. Das Übergeben eines Objekts mit diesen Eigenschaften stellt sicher, dass die Funktion keinen Speicher in einen ungültigen Bereich schreibt, was zu Abstürzen oder anderem unvorhersehbaren Verhalten führen kann.</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Eine Zahl (in Bytes), die mit <em>Ziel</em> addiert wird, um die Zieladresse zu bestimmen. Lässt man diesen Parameter weg, wird standardmäßig 0 verwendet.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Adresse ganz rechts des zuletzt geschriebenen Elements zurück. Dieser Rückgabewert kann genutzt werden, wenn eine nicht zusammenhängende Zahlenfolge geschrieben wird, wie in einer Struktur für <a href="DllCall.htm">DllCall</a>, bei der einige Felder nicht gesetzt sind. In vielen Fällen ist es jedoch einfacher und effizienter, stattdessen mehrere <em>Typ</em>-<em>Nummer</em>-Paare anzugeben. Die Übergabe der Adresse zurück an NumPut ist weniger sicher als die Übergabe eines Buffer-ähnlichen Objekts mit einem aktualisierten <em>Offset</em>.</p>

<h2 id="General_Remarks">Allgemeine Bemerkungen</h2>
<p>Um eine Sequenz von Zahlen zu schreiben, kann <em>Typ</em> und <em>Nummer</em> nach der ersten <em>Nummer</em> beliebig oft wiederholt werden. Jede Zahl wird auf das nächste Byte nach der vorherigen Zahl geschrieben, ohne Auffüllen. Beim Erstellen einer Struktur für <a href="DllCall.htm">DllCall</a> ist zu beachten, dass einige Felder aufgrund von Datenausrichtungsanforderungen möglicherweise explizit aufgefüllt werden müssen.</p>
<p>Überschreitet ein Integer den Gültigkeitsbereich des angegebenen <em>Typ</em>s, werden seine höchstwertigen Bytes ignoriert; z. B. würde <code>NumPut("Char", 257, buf)</code> nur die Zahl 1 speichern.</p>
<p>Es wird eventuell eine Ausnahme ausgelöst, wenn die Zieladresse ungültig ist. Allerdings ist es möglich, dass einige ungültige Adressen nicht als solches erkannt werden, was zu unvorhersehbaren Verhalten führen könnte. Die Übergabe eines <a href="Buffer.htm">Buffer</a>-Objekts anstelle einer Adresse stellt sicher, dass die Zieladresse immer validiert werden kann.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="NumGet.htm">NumGet</a>, <a href="DllCall.htm">DllCall</a>, <a href="Buffer.htm">Buffer-Objekt</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>


</body>
</html>

<!DOCTYPE HTML>
<html lang="de">
<head>
<title>NumPut - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die NumPut-Funktion speichert eine oder mehrere Zahlen im Binärformat an einer bestimmten Adresse+Offset." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut</h1>
<p>Speichert eine oder mehrere Zahlen im Binärformat an einer bestimmten Adresse+Offset.</p>
<pre class="Syntax"><span class="func">NumPut</span> Typ, Zahl, <span class="optional">Typ2, Zahl2, ...</span> Ziel <span class="optional">, Offset</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Typ</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine der folgenden Zeichenketten: UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr oder UPtr</p>
      <p>Bei allen Integertypen oder bei der Übergabe von reinen Integern wird das Ergebnis nicht durch vorzeichenfähig vs. vorzeichenlos beeinflusst, da für die Darstellung von vorzeichenfähigen Integern das Zweierkomplement verwendet wird.</p>
      <p>Weitere Informationen finden Sie unter <a href="DllCall.htm#types">DllCall-Typen</a>.</p>
    </dd>

  <dt>Zahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die zu speichernde Zahl.</p>
  </dd>

  <dt>Ziel</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
		<p>Ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt oder eine Speicheradresse.</p>
    <p>Es kann ein beliebiges Objekt mit einer <a href="Buffer.htm#Ptr">Ptr</a>- und <a href="Buffer.htm#Size">Size</a>-Eigenschaft verwendet werden, aber diese Funktion ist für das native <a href="Buffer.htm">Buffer</a>-Objekt optimiert. Die Übergabe eines Objekts mit diesen Eigenschaften stellt sicher, dass die Funktion nicht in einen ungültigen Speicherbereich schreibt, was zu Abstürzen oder anderem unvorhersehbaren Verhalten führen kann.</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird standardmäßig 0 verwendet. Andernfalls geben Sie eine Zahl (in Bytes) an, die zum <em>Ziel</em> addiert wird, um die Zieladresse zu bestimmen.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Adresse ganz rechts vom zuletzt geschriebenen Element zurück. Dieser Rückgabewert kann verwendet werden, wenn eine nicht zusammenhängende Zahlenfolge geschrieben wird, z.B. in einer Struktur für <a href="DllCall.htm">DllCall</a>, bei der einige Felder nicht gesetzt sind. In vielen Fällen ist es jedoch einfacher und effizienter, stattdessen mehrere <em>Typ</em>-<em>Nummer</em>-Paare anzugeben. Die Übergabe der Adresse zurück an NumPut ist weniger sicher als die Übergabe eines Buffer-ähnlichen Objekts mit einem aktualisierten <em>Offset</em>.</p>

<h2 id="General_Remarks">Allgemeine Bemerkungen</h2>
<p>Eine Zahlenfolge kann geschrieben werden, indem <em>Typ</em> und <em>Nummer</em> nach der ersten <em>Nummer</em> beliebig oft wiederholt werden. Jede Zahl wird auf das nächste Byte nach der vorherigen Zahl geschrieben, ohne Padding. Bei der Erstellung einer Struktur für <a href="DllCall.htm">DllCall</a> ist zu beachten, dass einige Felder aufgrund von Anforderungen bzgl. Datenausrichtung ein explizites Padding benötigen.</p>
<p>Wenn ein Integer den Wertebereich von <em>Typ</em> überschreitet, werden seine höchstwertigen Bytes ignoriert; z.B. würde <code>NumPut("Char", 257, buf)</code> nur die Zahl 1 speichern.</p>
<p>Es kann eine Ausnahme ausgelöst werden, wenn die Zieladresse ungültig ist. Es ist jedoch möglich, dass einige ungültige Adressen nicht als solche erkannt werden, was zu unvorhersehbarem Verhalten führen kann. Die Übergabe eines <a href="Buffer.htm">Buffer</a>-Objekts anstelle einer Adresse stellt sicher, dass die Zieladresse immer validiert werden kann.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="NumGet.htm">NumGet</a>, <a href="DllCall.htm">DllCall</a>, <a href="Buffer.htm">Buffer-Objekt</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>


</body>
</html>

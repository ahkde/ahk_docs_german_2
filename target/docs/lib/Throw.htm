<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Throw - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Throw-Anweisung signalisiert das Vorkommen eines Fehlers. Dieses Signal kann mit einer Try-Catch-Anweisung abgefangen werden." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Throw</h1>

<p>Signalisiert das Vorkommen eines Fehlers. Dieses Signal kann mit einer <a href="Try.htm">Try</a>-<a href="Catch.htm">Catch</a>-Anweisung abgefangen werden.</p>

<pre class="Syntax"><span class="func">Throw</span> <span class="optional">Wert</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Wert</dt>
  <dd>
    <p>Ein Wert, der ausgelöst werden soll; typischerweise ein <a href="Error.htm">Error</a>-Objekt. Zum Beispiel:</p>
      <pre>throw ValueError("Parameter #1 ungültig", -1, derSchlechteParam)</pre>
      <p>Es können alle möglichen Werte ausgelöst werden, aber wenn <a href="Catch.htm">Catch</a> ohne Angabe einer Klasse verwendet wird (oder wenn <a href="Try.htm">Try</a> ohne <a href="Catch.htm">Catch</a> oder <a href="Finally.htm">Finally</a> verwendet wird), werden nur Instanzen der <a href="Error.htm">Error</a>-Klasse abgefangen.</p>
      <p>Während sich die Ausführung innerhalb eines <a href="Catch.htm">Catch</a> befindet, kann <em>Wert</em> weggelassen werden, um den abgefangenen Wert erneut auszulösen (wodurch die Notwendigkeit vermieden wird, eine Ausgabevariable nur für diesen Zweck anzugeben). Dies wird sogar innerhalb einer verschachtelten <em>Try-Finally</em>-Anweisung unterstützt, aber nicht innerhalb einer verschachtelten <em>Try-Catch</em>-Anweisung. Die Zeile mit <code>throw</code> muss nicht physisch im Körper der <em>Catch</em>-Anweisung enthalten sein; sie kann von einer aufgerufenen Funktion verwendet werden.</p>
  </dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Das Leer- oder Tabulatorzeichen nach <code>throw</code> ist optional, wenn der Ausdruck in runden Klammern gesetzt ist, wie z. B. <code>throw(Error())</code>.</p>
<p>Ein via Throw ausgelöster Wert oder Laufzeitfehler kann mittels <a href="Try.htm">Try</a>-<a href="Catch.htm">Catch</a> <em>abgefangen</em> werden. In solchen Fällen wird die Ausführung in die <em>Catch</em>-Anweisung oder in die nächste Anweisung nach der <em>Try</em>-Anweisung transferiert. Wenn ein via Throw ausgelöster Wert nicht abgefangen wird, geschieht Folgendes:</p>
<ul>
  <li>Alle aktiven <a href="OnError.htm">OnError</a>-Callbacks werden aufgerufen. Jedes Callback kann <em>Wert</em> inspizieren und weitere Callbacks und Standardbehandlungen entweder unterdrücken oder erlauben.</li>
  <li>Standardmäßig wird eine Fehlermeldung angezeigt, welche sich danach richtet, was ausgelöst wurde. Wenn <em>Wert</em> ein <a href="Object.htm">Object</a> ist und eine Werteigenschaft namens <em>Message</em> besitzt, wird ihr Wert als Meldung verwendet. Wenn <em>Wert</em> eine nicht-numerische Zeichenkette ist, wird diese als Meldung verwendet. In allen anderen Fällen wird eine Standardmeldung verwendet. Wenn <em>Wert</em> numerisch ist, wird es unterhalb der Standardmeldung angezeigt.</li>
  <li>Der Thread wird beendet. Beachten Sie, dass dies nicht unbedingt bei fortsetzbaren Fehlern auftritt, wobei <em>Throw</em> niemals fortsetzbar ist.</li>
</ul>

<h2 id="Related">Siehe auch</h2>
<p><a href="Error.htm">Error-Objekt</a>, <a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Finally.htm">Finally</a>, <a href="OnError.htm">OnError</a></p>

<h2 id="Examples">Beispiele</h2>
<p>Siehe <a href="Try.htm#Examples">Try</a>.</p>

</body>
</html>

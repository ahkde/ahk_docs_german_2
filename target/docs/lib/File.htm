<!DOCTYPE HTML>
<html lang="de">
<head>
<title>File-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das File-Objekt bietet eine Schnittstelle für eine Datei zum Ausführen von Aktionen wie das Lesen oder Schreiben von Daten oder zum Abrufen oder Setzen von Werten wie der Länge." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>File-Objekt</h1>
<pre class="NoIndent">class File extends Object</pre>

<p>Bietet eine Schnittstelle für die Ein- und Ausgabe einer Datei. <a href="FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</p>

<p>"FileObj" wird hier stellvertretend für ein beliebiges File-Objekt verwendet, da "File" die Klasse selbst ist.</p>
<p>Zusätzlich zu den Methoden und Eigenschaften, die von <a href="Object.htm">Object</a> geerbt werden, haben File-Objekte die folgenden vordefinierten Methoden und Eigenschaften.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#Read">Read</a>: Liest eine Zeichenkette aus der Datei und rückt den Dateizeiger vor.</li>
      <li><a href="#Write">Write</a>: Schreibt eine Zeichenkette in die Datei und rückt den Dateizeiger vor.</li>
      <li><a href="#ReadLine">ReadLine</a>: Liest eine Textzeile aus der Datei und rückt den Dateizeiger vor.</li>
      <li><a href="#WriteLine">WriteLine</a>: Schreibt eine Zeichenkette, die mit <code>`n</code> oder <code>`r`n</code> endet, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Rückt den Dateizeiger vor.</li>
      <li><a href="#ReadNum">Read<em>ZahlTyp</em></a>: Liest eine Zahl aus der Datei und rückt den Dateizeiger vor.</li>
      <li><a href="#WriteNum">Write<em>ZahlTyp</em></a>: Schreibt eine Zahl in die Datei und rückt den Dateizeiger vor.</li>
      <li><a href="#RawRead">RawRead</a>: Liest rohe Binärdaten aus der Datei in den Speicher und rückt den Dateizeiger vor.</li>
      <li><a href="#RawWrite">RawWrite</a>: Schreibt rohe Binärdaten in die Datei und rückt den Dateizeiger vor.</li>
      <li><a href="#Seek">Seek</a>: Verschiebt den Dateizeiger. Lässt man den zweiten Parameter weg, ist dies äquivalent zu <code>FileObj.Pos := Distanz</code>.</li>
      <li><a href="#Close">Close</a>: Schließt die Datei, entleert alle Daten im Cache auf die Festplatte und hebt Freigabesperren auf.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#Pos">Pos</a>: Ermittelt oder setzt die Position des Dateizeigers.</li>
      <li><a href="#Length">Length</a>: Ermittelt oder setzt die Größe der Datei.</li>
      <li><a href="#AtEOF">AtEOF</a>: Ermittelt einen Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat.</li>
      <li><a href="#Encoding">Encoding</a>: Ermittelt oder setzt die Textcodierung des File-Objekts.</li>
      <li><a href="#Handle">Handle</a>: Ermittelt ein System-Datei-Handle, das für DllCall verwendet werden kann.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">Methoden</h2>

<div class="methodShort" id="Read"><h3>Read</h3>
<p>Liest eine Zeichenkette aus der Datei und rückt den Dateizeiger vor.</p>
<pre class="Syntax">Zkette := FileObj.<span class="func">Read</span>(<span class="optional">ZeichenAnzahl</span>)</pre>
<dl>
  <dt>ZeichenAnzahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der zu lesenden Zeichen. Lässt man diesen Parameter weg, wird der Rest der Datei gelesen und als einzelne Zeichenkette zurückgegeben. Wenn das File-Objekt von einem Handle erzeugt wurde, das auf ein nicht-suchendes Device wie Konsolenpuffer oder Pipe verweist, kann das Weglassen dieses Parameters dazu führen, dass die Methode fehlschlägt oder nur die aktuell verfügbaren Daten zurückgibt.</p>
  </dd>
</dl>
<p>Gibt eine Zeichenkette zurück.</p>
</div>

<div class="methodShort" id="Write"><h3>Write</h3>
<p>Schreibt eine Zeichenkette in die Datei und rückt den Dateizeiger vor.</p>
<pre class="Syntax">FileObj.<span class="func">Write</span>(Zkette)</pre>
<dl>
  <dt>Zkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die geschrieben werden soll.</p>
  </dd>
</dl>
<p>Gibt die Anzahl der geschriebenen Bytes (nicht Zeichen) zurück.</p>
</div>

<div class="methodShort" id="ReadLine"><h3>ReadLine</h3>
<p>Liest eine Textzeile aus der Datei und rückt den Dateizeiger vor.</p>
<pre class="Syntax">TextZeile := FileObj.<span class="func">ReadLine</span>()</pre>
<p>Der Rückgabewert ist eine Textzeile ohne Zeilenende.</p>
<p>Es können Zeilen mit einer Länge von bis zu 65534 Zeichen gelesen werden. Wenn eine Zeile diese Länge überschreitet, wird der Rest der Zeile durch nachfolgende Aufrufe dieser Methode zurückgegeben.</p></div>

<div class="methodShort" id="WriteLine"><h3>WriteLine</h3>
<p>Schreibt eine Zeichenkette, die mit <code>`n</code> oder <code>`r`n</code> endet, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Rückt den Dateizeiger vor.</p>
<pre class="Syntax">FileObj.<span class="func">WriteLine</span>(<span class="optional">Zkette</span>)</pre>
<dl>
  <dt>Zkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine optionale Zeichenkette, die geschrieben werden soll.</p>
  </dd>
</dl>
<p>Gibt die Anzahl der geschriebenen Bytes (nicht Zeichen) zurück.</p>
</div>

<div class="methodShort" id="ReadNum"><h3>Read<i>ZahlTyp</i></h3>
<p>Liest eine Zahl aus der Datei und rückt den Dateizeiger vor.</p>
<pre class="Syntax">Zahl := FileObj.<span class="func">Read<i>Zahlentyp</i></span>()</pre>
<p><em>ZahlTyp</em> ist entweder UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float. Diese Typennamen haben die gleiche Bedeutung wie bei <a href="DllCall.htm#types">DllCall</a>.</p>
<p>Der Rückgabewert ist bei erfolgreichem Lesen eine Zahl und bei Misserfolg eine leere Zeichenkette. Wenn die Anzahl der gelesenen Bytes ungleich 0 aber kleiner als die Größe von <em>Zahlentyp</em> ist, werden die fehlenden Bytes als 0 angesehen.</p>
</div>

<div class="methodShort" id="WriteNum"><h3>Write<i>ZahlTyp</i></h3>
<p>Schreibt eine Zahl in die Datei und rückt den Dateizeiger vor.</p>
<pre class="Syntax">File.<span class="func">Write<i>Zahlentyp</i></span>(Zahl)</pre>
<dl>
  <dt>Zahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#numbers">Float</a></p>
    <p>Eine Zahl, die geschrieben werden soll.</p>
  </dd>
</dl>
<p><em>ZahlTyp</em> ist entweder UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float. Diese Typennamen haben die gleiche Bedeutung wie bei <a href="DllCall.htm#types">DllCall</a>.</p>
<p>Gibt die Anzahl der geschriebenen Bytes zurück. Zum Beispiel gibt WriteUInt bei Erfolg 4 zurück.</p>
</div>

<div class="methodShort" id="RawRead"><h3>RawRead</h3>
<p>Liest rohe Binärdaten aus der Datei in den Speicher und rückt den Dateizeiger vor.</p>
<pre class="Syntax">FileObj.<span class="func">RawRead</span>(Puffer <span class="optional">, Bytes</span>)</pre>
<dl>
  <dt>Puffer</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt oder eine Speicheradresse, in der die Daten gespeichert werden sollen.</p>
    <p>Es wird empfohlen, zum Einlesen ein <a href="Buffer.htm">Buffer</a>-Objekt zu verwenden. Lässt man <em>Bytes</em> weg, wird standardmäßig die Größe des Pufferspeichers verwendet. Es wird eine Ausnahme ausgelöst, wenn <em>Bytes</em> die Größe des Pufferspeichers überschreitet.</p>
    <p>Wenn eine Speicheradresse übergeben wird, muss <em>Bytes</em> auch angegeben werden.</p>
  </dd>
  <dt>Bytes</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der Bytes, die gelesen werden sollen. Dieser Parameter ist optional, wenn <em>Puffer</em> ein Objekt ist; ist dies nicht der Fall, muss er angegeben werden.</p>
  </dd>
</dl>
<p>Gibt die Anzahl der gelesenen Bytes zurück.</p>
</div>

<div class="methodShort" id="RawWrite"><h3>RawWrite</h3>
<p>Schreibt rohe Binärdaten in die Datei und rückt den Dateizeiger vor.</p>
<pre class="Syntax">FileObj.<span class="func">RawWrite</span>(Daten <span class="optional">, Bytes</span>)</pre>
<dl>
  <dt>Daten</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a>, <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt oder eine Zeichenkette mit binären Daten, oder eine Speicheradresse. Wenn ein Objekt oder eine Zeichenkette angegeben ist, ist <em>Bytes</em> optional und verwendet standardmäßig die Größe des Pufferspeichers oder der Zeichenkette. Andernfalls muss <em>Bytes</em> auch angegeben werden.</p>
  </dd>
  <dt>Bytes</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der Bytes, die geschrieben werden sollen. Dieser Parameter ist optional, wenn <em>Daten</em> ein Objekt oder eine Zeichenkette ist; ist dies nicht der Fall, muss er angegeben werden.</p>
  </dd>
</dl>
<p>Gibt die Anzahl der geschriebenen Bytes zurück.</p>
</div>

<div class="methodShort" id="Seek"><h3>Seek</h3>
<p>Verschiebt den Dateizeiger.</p>
<pre class="Syntax">FileObj.<span class="func">Seek</span>(Distanz <span class="optional">, Startpunkt</span>)
</pre>
<dl>
  <dt>Distanz</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Anzahl der Bytes, um die verschoben werden soll. Je kleiner der Wert, desto näher befindet sich der Dateizeiger am Anfang der Datei.</p>
  </dd>
  <dt>Startpunkt</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Von wo aus der Dateizeiger verschoben werden soll. Muss einer der folgenden Werte sein:</p>
    <ul>
      <li>0 (SEEK_SET): Anfang der Datei. <i>Distanz</i> muss 0 oder größer sein.</li>
      <li>1 (SEEK_CUR): Aktuelle Position des Dateizeigers.</li>
      <li>2 (SEEK_END): Ende der Datei. <i>Distanz</i> sollte normalerweise negativ sein.</li>
    </ul>
    <p>Lässt man <i>Startpunkt</i> weg, wird standardmäßig SEEK_END verwendet, wenn <em>Distanz</em> negativ ist, andernfalls SEEK_SET.</p></dd>
</dl>
<p>Gibt bei Erfolg einen Wert ungleich 0 und bei Misserfolg eine 0 zurück.</p>
</div>

<div class="methodShort" id="Close"><h3>Close</h3>
<p>Schließt die Datei, entleert alle Daten im Cache auf die Festplatte und hebt Freigabesperren auf.</p>
<pre class="Syntax">FileObj.<span class="func">Close</span>()</pre>
<p>Obwohl die Datei beim Freigeben des Objekts automatisch geschlossen wird, ist es ratsam, die Datei so früh wie möglich zu schließen.</p></div>

<h2 id="Properties">Eigenschaften</h2>

<div class="methodShort" id="Pos"><h3>Pos</h3>
<p>Ermittelt oder setzt die aktuelle Position des Dateizeigers.</p>
<pre class="Syntax">Pos := FileObj.Pos</pre>
<pre class="Syntax">FileObj.Pos := NeuePos</pre>
<p>Äquivalent zu <code>FileObj.Seek(NeuePos)</code>.</p>
<p>Die Position ist der Offset vom Anfang der Datei (in Bytes), wobei 0 das erste Byte ist. Wenn Daten in die Datei geschrieben oder aus ihr gelesen werden, springt der Dateizeiger automatisch auf das nächste Byte nach diesen Daten.</p>
</div>

<div class="methodShort" id="Length"><h3>Length</h3>
<p>Ermittelt oder setzt die Größe der Datei.</p>
<pre class="Syntax">Dateigröße := FileObj.Length</pre>
<pre class="Syntax">FileObj.Length := NeueGröße</pre>
<p><em>DateiGröße</em> und <em>NeueGröße</em> ist die Größe der Datei in Bytes.</p>
<p>Diese Eigenschaft sollte nur mit einer echten Datei verwendet werden. Wenn das File-Objekt von einem Handle erzeugt wurde, das auf ein Pipe verweist, kann Length die Menge der Daten zurückgeben, die gerade im internen Pufferspeicher des Pipe verfügbar sind, aber dieses Verhalten ist nicht garantiert.</p></div>

<div class="methodShort" id="AtEOF"><h3>AtEOF</h3>
  <p>Ermittelt einen Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat, andernfalls 0.</p>
<pre class="Syntax">IsAtEOF := FileObj.AtEOF</pre>
  <p>Diese Eigenschaft sollte nur mit einer echten Datei verwendet werden. Wenn das File-Objekt von einem Handle erzeugt wurde, das auf ein nicht-suchendes Device wie Konsolenpuffer oder Pipe verweist, kann der Rückgabewert bedeutungslos sein, da solche Devices logischerweise kein "End of File" haben.</p></div>

<div class="methodShort" id="Encoding"><h3>Encoding</h3>
<p>Ermittelt oder setzt die Textcodierung des File-Objekts.</p>
<pre class="Syntax">ErmittelteCodierung := FileObj.Encoding</pre>
<pre class="Syntax">FileObj.Encoding := NeueCodierung</pre>
  <p><em>NeueCodierung</em> kann ein numerischer Codepageidentifikator (siehe <a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">Microsoft Docs</a>) oder eine der folgenden Zeichenketten sein.</p>
  <p><em>ErmittelteCodierung</em> ist eine der folgenden Zeichenketten:</p>
  <ul>
	<li><code class="no-highlight">UTF-8</code>: Unicode UTF-8, äquivalent zu CP65001.</li>
	<li><code class="no-highlight">UTF-16</code>: Unicode UTF-16 mit Little-Endian-Byte-Order, äquivalent zu CP1200.</li>
	<li><code>CP<i>nnn</i></code>: Eine Codepage mit dem numerischen Identifikator <i>nnn</i>.</li>
  </ul>
  <p><em>ErmittelteCodierung</em> kann nie ein Wert mit dem Suffix <code>-RAW</code> sein, unabhängig davon, wie die Datei geöffnet wurde oder ob sie eine Byte-Order-Markierung (BOM) enthält. <em>NeueCodierung</em> bewirkt nicht, dass eine BOM hinzugefügt oder entfernt wird, da eine BOM normalerweise beim Erstellen der Datei hinzugefügt wird.</p>
  <p>Das Setzen von <em>NeueCodierung</em> auf <code class="no-highlight">UTF-8-RAW</code> oder <code class="no-highlight">UTF-16-RAW</code> ist erlaubt, aber das Suffix <code>-RAW</code> wird ignoriert. Dies gilt nur für <code>FileObj.Encoding</code>, nicht für <a href="FileOpen.htm">FileOpen</a>.</p>
</div>

<div class="methodShort" id="Handle"><h3>Handle</h3>
  <p>Gibt ein System-Datei-Handle zurück, das für DllCall verwendet werden kann. Siehe <a href="https://learn.microsoft.com/windows/win32/api/fileapi/nf-fileapi-createfilea">CreateFile</a>.</p>
<pre class="Syntax">FileObj.Handle</pre>
<p>File-Objekte puffern intern Lese- und Schreibvorgänge. Daten, die in den internen Pufferspeicher des Objekts geschrieben wurden, werden auf die Festplatte übertragen, bevor das Handle zurückgegeben wird. Wenn der Pufferspeicher gelesene Daten aus einer Datei enthält, werden diese verworfen und der Dateizeiger auf die logische Position (widergespiegelt von <code>FileObj.Pos</code>) zurückgesetzt.</p></div>

</body>
</html>

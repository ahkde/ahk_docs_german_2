<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ClipboardAll - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ClipboardAll-Klasse ermöglicht das Speichern und Wiederherstellen von allem, was sich in der Zwischenablage befindet, wie Bilder und Formatierungen." />
<meta name="ahk:equiv-v1" content="misc/Clipboard.htm#ClipboardAll" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>ClipboardAll</h1>

<p>Erstellt ein Objekt, das alles enthält, was sich in der Zwischenablage befindet, wie Bilder und Formatierungen.</p>
<pre class="Syntax">ClipGesichert := <span class="func">ClipboardAll</span>(<span class="optional">Daten, Größe</span>)</pre>
<p><em></em><code>ClipboardAll</code> selbst ist eine <a href="Class.htm">Klasse</a>, die von <code>Buffer</code> abgeleitet ist.</p>

<h2 id="Parameters">Parameter</h2>
<p>Wenn beide Parameter weggelassen werden, wird der aktuelle Inhalt der Zwischenablage abgerufen. Andernfalls geben Sie einen oder beide Parameter an, um ein Objekt zu erstellen, das die angegebenen Binärdaten der Zwischenablage enthält.</p>
<dl>
  <dt>Daten</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein <a href="Buffer.htm">Buffer</a>-ähnliches Objekt oder ein reiner Integer, der die Adresse der Binärdaten ist. Die Daten müssen in einem bestimmten Format vorliegen, d.h. sie stammen typischerweise von einem früheren Aufruf von ClipboardAll. Siehe <a href="#ExFile">Beispiel #2</a> unten.</p>
  </dd>
  <dt>Größe</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Anzahl der zu verwendeten Bytes. Dies ist optional, wenn <em>Daten</em> ein Objekt ist.</p>
  </dd>
</dl>

<h2 id="clipboardall-object">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Diese Funktion gibt ein ClipboardAll-Objekt mit den folgenden zwei Eigenschaften zurück (geerbt von <a href="Buffer.htm">Buffer</a>):</p>
<ul>
  <li><a href="Buffer.htm#Ptr">Ptr</a>: Die Adresse der im Objekt enthaltenen Daten. Diese Adresse verliert ihre Gültigkeit, wenn das Objekt freigegeben wird.</li>
  <li><a href="Buffer.htm#Size">Size</a>: Die Größe der rohen Binärdaten in Bytes.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p>Die interne Variable <a href="A_Clipboard.htm">A_Clipboard</a> spiegelt den aktuellen Inhalt der Windows-Zwischenablage in Textform wider, kann aber einem ClipboardAll-Objekt zugewiesen werden, um ihren Inhalt in die Zwischenablage zurückzuschreiben.</p>
<p><em>ClipboardAll</em> wird häufig verwendet, um den aktuellen Inhalt der Zwischenablage zu sichern, damit die Zwischenablage vorübergehend für eine andere Operation verwendet werden kann. Nach Abschluss der Operation kann der ursprüngliche Inhalt der Zwischenablage wiederhergestellt werden, wie in <a href="#ExVar">Beispiel #1</a> und <a href="#ExFile">Beispiel #2</a> gezeigt.</p>
<p>Wenn <em>ClipboardAll</em> nicht in der Lage ist, bestimmte Datenobjekte (Formate) aus der Zwischenablage abzurufen, werden diese übersprungen und der Rest wird gespeichert.</p>
<p>Mit <a href="ClipWait.htm">ClipWait</a> kann festgestellt werden, wann die Zwischenablage Daten enthält (optional auch Nicht-Text-Daten).</p>
<p>Die im Objekt enthaltenen Binärdaten bestehen aus drei Elementen: Die ersten 4 Bytes enthalten den Formattyp, die nächsten 4 Bytes die Datenblockgröße und der Rest den Datenblock des Formats. Wenn die Zwischenablage mehr als ein Format enthält (was fast immer der Fall ist), werden diese drei Elemente wiederholt, bis alle Formate enthalten sind. Die Daten enden mit einem vier Byte großen Formattyp von 0.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="A_Clipboard.htm">A_Clipboard</a>, <a href="ClipWait.htm">ClipWait</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="_ClipboardTimeout.htm">#ClipboardTimeout</a>, <a href="Buffer.htm">Buffer</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExVar">
<p><a class="ex_number" href="#ExVar"></a> Speichert den Inhalt der Zwischenablage in eine Variable und stellt ihn wieder her.</p>
<pre>ClipSicherung := ClipboardAll()   <em>; Zwischenablage in eine beliebige Variable speichern.
; ... hier die Zwischenablage für etwas anderes verwenden, z.B. schnell eine große Textmenge einfügen ...</em>
A_Clipboard := ClipSicherung   <em>; Originale Zwischenablage wiederherstellen. Beachten Sie die Verwendung von <i>A_Clipboard</i> (nicht <i>ClipboardAll</i>).</em>
ClipSicherung := ""  <em>; Speicher freigeben, falls die Zwischenablage sehr groß war.</em></pre>
</div>

<div class="ex" id="ExFile">
<p><a class="ex_number" href="#ExFile"></a> Speichert den Inhalt der Zwischenablage in eine Datei und stellt ihn wieder her.</p>
<pre><em>; Option 1: Datei löschen und FileAppend verwenden.</em>
<a href="FileDelete.htm">FileDelete</a> "Firmenlogo.clip"
<a href="FileAppend.htm">FileAppend</a> ClipboardAll(), "Firmenlogo.clip" <em>; Die Dateiendung ist egal.</em>

<em>; Option 2: FileOpen im Überschreibmodus und File.RawWrite verwenden.</em>
ClipDaten := ClipboardAll()
<a href="FileOpen.htm">FileOpen</a>("Firmenlogo.clip", "w").<a href="File.htm#RawWrite">RawWrite</a>(ClipDaten)</pre>
<p>Um die Datei später wieder in die Zwischenablage (oder in eine Variable) zu laden, gehen Sie wie folgt vor:</p>
<pre>ClipDaten := FileRead("Firmenlogo.clip", "RAW")  <em>; In diesem Fall gibt FileRead ein Buffer zurück.</em>
A_Clipboard := ClipboardAll(ClipDaten)  <em>; Wandelt das Buffer in ein ClipboardAll um und weist es zu.</em></pre>
</div>

</body>
</html>

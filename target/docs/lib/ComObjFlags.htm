<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComObjFlags - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComObjFlags-Funktion ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>


<h1>ComObjFlags</h1>
<p>Ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren.</p>
<pre class="Syntax">Flags := <span class="func">ComObjFlags</span>(ComObj <span class="optional">, NeueFlags, Maske</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>ComObj</dt>
  <dd>
    <p>Typ: <a href="ComValue.htm">ComValue</a></p>
    <p>Ein COM-Wrapper-Objekt.</p>
  </dd>

  <dt>NeueFlags</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Neue Werte für die via <i>Maske</i> identifizierten Flags, oder Flags, die hinzugefügt oder entfernt werden sollen.</p>
  </dd>

  <dt>Maske</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Eine Bitmaske von Flags, die geändert werden sollen.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die aktuellen Flags des angegebenen COM-Objekts zurück (nach Anwendung von <i>NeueFlags</i>, falls angegeben).</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Es wird ein <a href="Error.htm#TypeError">TypeError</a> ausgelöst, wenn <em>ComObj</em> kein COM-Wrapper-Objekt ist.</p>

<h2 id="Flags">Flags</h2>
<table class="info">
  <tr>
    <th class="center">Flag</th>
    <th>Effekt</th>
  </tr>
  <tr>
    <td class="center">1</td>
    <td>
      <p>F_OWNVALUE</p>
      <p><strong>SafeArray:</strong> Wenn das Flag gesetzt ist, wird das SafeArray bei Freigabe des Wrapper-Objekts zerstört. Da SafeArrays keinen Mechanismus zum Zählen von Referenzen haben, wird, wenn ein SafeArray mit diesem Flag einem Element eines anderen SafeArrays zugewiesen wird, eine separate Kopie erstellt.</p>
      <p><strong>BSTR:</strong> Wenn das Flag gesetzt ist, wird der BSTR bei Freigabe des Wrapper-Objekts freigegeben. Das Flag wird automatisch gesetzt, wenn ein BSTR als Ergebnis einer Typenumwandlung, die von <a href="ComValue.htm">ComValue</a> durchgeführt wurde, reserviert wird, wie z.B. bei <code>ComValue(8, "Beispiel")</code>.</p>
    </td>
  </tr>
</table>

<h2 id="Remarks">Bemerkungen</h2>
<p>Wenn <i>Maske</i> weggelassen wird, können Flags via <i>NeueFlags</i> hinzugefügt (falls positiv) oder entfernt (falls negativ) werden. Zum Beispiel entfernt <code>ComObjFlags(obj, -1)</code> das F_OWNVALUE-Flag. Geben Sie für <i>Maske</i> keinen anderen Wert als 0 oder 1 an; alle anderen Bits sind für zukünftige Verwendung reserviert.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComValue.htm">ComValue</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjArray.htm">ComObjArray</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExCheck">
<p><a class="ex_number" href="#ExCheck"></a> Prüft, ob das F_OWNVALUE-Flag vorhanden ist.</p>
<pre>arr := ComObjArray(0xC, 1)
if ComObjFlags(arr) &amp; 1
    MsgBox "arr wird automatisch zerstört."
else
    MsgBox "arr wird nicht automatisch zerstört."
</pre>
</div>

<div class="ex" id="ExRemove">
<p><a class="ex_number" href="#ExRemove"></a> Ändert das Array-in-Array-Verhalten.</p>
<pre>arr1 := ComObjArray(0xC, 3)
arr2 := ComObjArray(0xC, 1)
arr2[0] := "originaler Wert"
arr1[0] := arr2         <em>; Implizite Kopie zuweisen.</em>
ComObjFlags(arr2, -1)   <em>; F_OWNVALUE entfernen.</em>
arr1[1] := arr2         <em>; Originale Array zuweisen.</em>
arr1[2] := arr2.Clone() <em>; Explizite Kopie zuweisen.</em>
arr2[0] := "neuer Wert"
for arr in arr1
    MsgBox arr[0]

arr1 := ""
<em>; Ungültig, da arr2 == arr1[1], das zerstört wurde: 
;  arr2[0] := "foo"</em>
</pre>
</div>

</body>
</html>

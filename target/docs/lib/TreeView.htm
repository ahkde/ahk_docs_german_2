<!DOCTYPE HTML>
<html lang="de">
<head>
<title>TreeView (GUI) - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Eine TreeView (auf Deutsch: Baumansicht) wird in der Regel verwendet, um eine hierarchisch gegliederte Liste darzustellen, die aus mehreren ineinander geschachtelten Elementen besteht. Diese Seite enthält die Funktionen, um sie zu modifizieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>TreeView</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles für den Optionen-Parameter</a></li>
  <li><a href="#BuiltIn">Interne Methoden für TreeViews</a></li>
  <li><a href="#Events">Ereignisse</a></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>
<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>Eine TreeView (auf Deutsch: Baumansicht) wird in der Regel verwendet, um eine hierarchisch gegliederte Liste darzustellen, die aus mehreren ineinander geschachtelten Elementen besteht. Das wohl bekannteste Beispiel dafür ist der Navigationsbereich des Explorers, der Laufwerke und Ordner hierarchisch darstellt.</p>
<p>Eine typische TreeView sieht wie folgt aus:</p>
<img src="../static/ctrl_treeview.png" alt="TreeView" />
<p>Die Syntax zur Erstellung einer TreeView ist:</p>
<pre class="Syntax" id="GuiAdd">TV := GuiObj.<span class="func">Add</span>("TreeView", Optionen)</pre>
<p>Oder:</p>
<pre class="Syntax">TV := GuiObj.<span class="func">AddTreeView</span>(Optionen)</pre>
<p>Hier sehen Sie ein funktionierendes Skript, das eine einfache Hierarchie von Elementen erstellt und anzeigt:</p>
<pre>MeineGui := Gui()
TV := MeineGui.Add("TreeView")
<span class="red">P1</span> := <a href="#Add">TV.Add</a>("Erstes Elternelement")
P1C1 := TV.Add("Erstes Kindelement von Elternelement 1", <span class="red">P1</span>)  <em>; P1 als Elternelement für dieses Element festlegen.</em>
P2 := TV.Add("Zweites Elternelement")
P2C1 := TV.Add("Erstes Kindelement von Elternelement 2", P2)
P2C2 := TV.Add("Zweites Kindelement von Elternelement 2", P2)
P2C2C1 := TV.Add("Erstes Kindelement von Elternelement 2", P2C2)

MeineGui.Show  <em>; Das Fenster und dessen TreeView anzeigen.</em></pre>
<h2 id="Options">Optionen und Styles für den Optionen-Parameter</h2>
<p><strong>Background</strong>: Geben Sie das Wort Background an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, verwendet TreeView als Hintergrundfarbe standardmäßig die Standardhintergrundfarbe des Systems. Mit <code>BackgroundDefault</code> oder <code>-Background</code> kann die Standardhintergrundfarbe des Systems gesetzt werden (in der Regel weiß). Zum Beispiel kann die Standardfarbe einer TreeView via <code>TV.Opt("+BackgroundDefault")</code> wiederhergestellt werden.</p>
<p><strong>Buttons</strong>: Geben Sie <code>-Buttons</code> (minus Buttons) an, um die Plus- oder Minuszeichen auf der linken Seite eines Elements, das Kindelemente hat, zu entfernen.</p>
<p><strong>C</strong>: Textfarbe. Geben Sie den Buchstaben C an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>Checked</strong>: Zeigt auf der linken Seite jeden Elements eine CheckBox an. Fügt man ein Element via <a href="#Add">TV_Add</a> hinzu, kann das Wort <em>Check</em> in den Optionen angegeben werden, um die CheckBox vorerst im abgehakten Zustand anzuzeigen. Der Benutzer kann die CheckBox anklicken oder die Leertaste drücken, um ein Häkchen zu setzen oder zu entfernen. Um herauszufinden, welche Elemente aktuell in der TreeView abgehakt sind, rufen Sie die <a href="#GetNext">GetNext-Methode</a> oder <a href="#Get">Get-Methode</a> auf.</p>
<p><strong>HScroll</strong>: Geben Sie <code>-HScroll</code> (minus HScroll) an, um das horizontale Scrollen im Steuerelement zu deaktivieren (zusätzlich wird der horizontale Scrollbalken entfernt).</p>
<p id="ImageList"><strong>ImageList</strong>: Das Mittel, mit dem Symbole zu einer TreeView hinzugefügt werden. Geben Sie das Wort <em>ImageList</em> an, unmittelbar gefolgt von der ImageListID, die von einem vorherigen <a href="ListView.htm#IL_Create">IL_Create</a>-Aufruf zurückgegeben wurde. Diese Option funktioniert nur, während eine TreeView erstellt wird (die <a href="#SetImageList">SetImageList-Methode</a> hingegen unterliegt nicht dieser Einschränkung). Hier ein funktionierendes Beispiel:</p>
<pre>MeineGui := Gui()
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; ImageList für vsl. 10 Symbole erstellen.</em>
Loop 10  <em>; ImageList mit einigen Standard-Systemsymbolen befüllen.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
TV := MeineGui.Add("TreeView", "ImageList" . ImageListID)
<a href="#Add">TV.Add</a>("Elementname", 0, "Icon4")  <em>; Element zur TreeView hinzufügen und Ordnersymbol zuweisen.</em>
MeineGui.Show</pre>
<p><strong>Lines</strong>: Geben Sie <code>-Lines</code> (minus Lines) an, um die Verbindungslinien zwischen den Eltern- und Kindelementen zu verstecken. Das Entfernen solcher Linien verhindert allerdings auch, dass die Plus-/Minuszeichen bei Top-Level-Elementen angezeigt werden.</p>
<p id="ReadOnly"><strong>ReadOnly</strong>: Geben Sie <code>-ReadOnly</code> (minus ReadOnly) an, um dem Benutzer zu erlauben, den Text/Namen eines Elements zu editieren. Um ein Element zu editieren, wählen Sie es aus und drücken Sie <kbd>F2</kbd> (weitere Informationen finden Sie unter <a href="#WantF2">WantF2</a>). Alternativ können Sie ein Element einmal anklicken, um es auszuwählen, mindestens eine halbe Sekunde warten und dann das gleiche Element erneut anklicken, um es zu editieren. Nach dem Editieren kann ein Element unter seinen Geschwisterelementen alphabetisch neu positioniert werden; zum Beispiel:</p>
<pre>TV := MeineGui.Add("TreeView", "-ReadOnly")
TV.OnEvent("ItemEdit", MeinTree_Edit)  <em>; MeinTree_Edit jedes Mal aufrufen, wenn der Benutzer aufgehört hat, ein Element zu editieren.</em>
<em>; ...</em>
MeinTree_Edit(TV, Element)
{
    TV.Modify(TV.GetParent(Element), "Sort")  <em>; Funktioniert auch, wenn das Element kein Elternelement hat.</em>
}</pre>
<p><strong>R</strong>: Höhe in Zeilen (beim Erstellen). Geben Sie den Buchstaben R an, unmittelbar gefolgt von der Anzahl der Zeilen, für die innerhalb des Steuerelements Platz geschaffen werden soll. <code>R10</code> beispielsweise macht das Steuerelement 10 Elemente hoch.</p>
<p id="WantF2"><strong>WantF2</strong>: Geben Sie <code>-WantF2</code> (minus WantF2) an, um den Benutzer daran zu hindern, mithilfe von <kbd>F2</kbd> das aktuell ausgewählte Element zu <a href="#ReadOnly">editieren</a>. Diese Einstellung wird ignoriert, wenn <a href="#ReadOnly">-ReadOnly</a> ebenfalls wirksam ist.</p>
<p><strong>(Namenlose numerische Styles)</strong>: Andere Styles als die oben genannten werden selten verwendet und haben dementsprechend keine Namen. Eine vollständige Liste finden Sie unter <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a>.</p>
<h2 id="BuiltIn">Interne Methoden für TreeViews</h2>
<p>Zusätzlich zu den <a href="GuiControl.htm">Standardmethoden/-eigenschaften eines GUI-Steuerelements</a> verfügen TreeView-Steuerelemente über die folgenden Methoden (definiert in der Gui.TreeView-Klasse).</p>
<p><strong>Element-Methoden:</strong></p>
<ul>
  <li><a href="#Add">Add</a>: Fügt ein neues Element zur TreeView hinzu.</li>
  <li><a href="#Modify">Modify</a>: Ändert die Attribute und/oder den Namen eines Elements.</li>
  <li><a href="#Delete">Delete</a>: Löscht ein bestimmtes Element oder alle Elemente.</li>
</ul>
<p><strong>Abrufmethoden:</strong></p>
<ul>
  <li><a href="#GetSelection">GetSelection</a>: Gibt die ID-Nummer des ausgewählten Elements zurück.</li>
  <li><a href="#GetCount">GetCount</a>: Gibt die Anzahl aller Elemente im Steuerelement zurück.</li>
  <li><a href="#GetParent">GetParent</a>: Gibt das Elternelement eines bestimmten Elements als Element-ID zurück.</li>
  <li><a href="#GetChild">GetChild</a>: Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück.</li>
  <li><a href="#GetPrev">GetPrev</a>: Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet.</li>
  <li><a href="#GetNext">GetNext</a>: Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet.</li>
  <li><a href="#GetText">GetText</a>: Ruft den Text/Namen eines bestimmten Elements ab.</li>
  <li><a href="#Get">Get</a>: Gibt eine Nummer ungleich 0 zurück (Element-ID), wenn das angegebene Element ein bestimmtes Attribut hat.</li>
</ul>
<p><strong>Sonstige Methoden:</strong></p>
<ul>
  <li><a href="#SetImageList">SetImageList</a>: Setzt oder ersetzt eine ImageList zum Darstellen von Symbolen.</li>
</ul>
<div class="methodShort" id="Add">
  <h3>Add</h3>
  <p>Fügt ein neues Element zur TreeView hinzu und gibt seine eindeutige Element-ID-Nummer zurück.</p>
  <pre class="Syntax">EindeutigeID := TV.<span class="func">Add</span>(Name, <span class="optional">ElternElementID, Optionen</span>)</pre>
  <dl>
    <dt>Name</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Der Anzeigetext des Elements, das textuell oder numerisch sein kann (einschließlich numerischer Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>).</p>
    </dd>
    <dt>ElternElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die ID-Nummer des Elternelements des neuen Elements (wenn dieser Parameter weggelassen wird oder 0 ist, wird das Element als Top-Level-Element hinzugefügt).</p>
    </dd>
    <dt>Optionen</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Enthält null oder mehr Wörter von der unteren Liste (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Wörter jeweils mit einem Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, setzen Sie ein Minuszeichen davor. Um eine Option hinzuzufügen, lassen Sie das Vorzeichen weg oder setzen Sie ein Pluszeichen davor.</p>
      <p id="Bold"><strong>Bold</strong>: Stellt den Namen des Elements in fetter Schrift dar. Um dessen Schrift später wieder zu normalisieren, verwenden Sie <code>TV.Modify(ElementID, "-Bold")</code>. Direkt nach dem Wort <em>Bold</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen.</p>
      <p id="Check"><strong>Check</strong>: Zeigt ein Häkchen links neben dem Element an (sofern die TreeView über <a href="#Checked">CheckBoxen</a> verfügt). Um das Häkchen später wieder zu entfernen, verwenden Sie <code>TV.Modify(ElementID, "-Check")</code>. Direkt nach dem Wort <em>Check</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Check"</code> das gleiche wie <code>"Check" <strong>.</strong> VarEnhältEins</code> (der hier verwendete Punkt ist ein <a href="../Variables.htm#concat">Verkettungsoperator</a>).</p>
      <p id="Expand"><strong>Expand</strong>: Klappt das Element auf, um seine Kindelemente anzuzeigen (sofern vorhanden). Um das Element später wieder zuzuklappen, verwenden Sie <code>TV.Modify(ElementID, "-Expand")</code>. Wenn es keine Kindelemente hat, wird die <a href="#Modify">Modify-Methode</a> eine 0 anstelle der Element-ID zurückgeben. Die <a href="#Add">Add-Methode</a> hingegen markiert das Element als aufgeklappt, falls später noch Kindelemente hinzugefügt werden. Im Gegensatz zu "Select" (siehe unten) wird beim Aufklappen eines Elements nicht automatisch sein Elternelement aufgeklappt. Direkt nach dem Wort <em>Expand</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Expand"</code> das gleiche wie <code>"Expand" <strong>.</strong> VarEnhältEins</code>.</p>
      <p><strong>First | Sort | N</strong>: Diese Optionen gelten nur für die <a href="#Add">Add-Methode</a>. Sie bestimmen die Position des neuen Elements relativ zu seinen Geschwisterelementen (ein <em>Geschwisterelement</em> befindet sich auf derselben Ebene). Wenn keine dieser Optionen vorhanden ist, wird das neue Element als letztes/unterstes Geschwisterelement hinzugefügt. Geben Sie ansonsten <em>First</em> an, um das Element als erstes/oberstes Geschwisterelement hinzuzufügen, oder <em>Sort</em>, um das Element unter seinen Geschwisterelementen in alphabetischer Reihenfolge einzufügen. Wenn eine Nummer (<strong>N</strong>) angegeben ist, wird sie als ID-Nummer des Geschwisterelements vermutet, nach der das neue Element eingefügt werden soll (wenn die Nummer die einzige vorhandene Option ist, muss sie nicht in Anführungszeichen gesetzt werden).</p>
      <p><strong>Icon</strong>: Geben Sie das Wort <em>Icon</em> an, unmittelbar gefolgt von der Nummer eines Symbols, das auf der linken Seite des Elementnamens angezeigt werden soll. Fehlt diese Option, wird das erste Symbol in der <a href="#ImageList">ImageList</a> verwendet. Um ein leeres Symbol darzustellen, geben Sie eine Nummer größer als die Anzahl der Symbole in der ImageList an. Wenn dem Steuerelement keine ImageList zugewiesen wurde, wird weder ein Symbol angezeigt noch dafür Platz reserviert.</p>
      <p id="Select"><strong>Select</strong>: Wählt das Element aus. Da jeweils nur ein einziges Element ausgewählt werden kann, wird das zuvor ausgewählte Element automatisch abgewählt. Darüber hinaus wird diese Option alle Elternelemente des neu ausgewählten Elements aufklappen, falls erforderlich. Um die aktuelle Auswahl festzustellen, verwenden Sie die <a href="#GetSelection">GetSelection-Methode</a>.</p>
      <p><strong>Sort</strong>: In Verbindung mit der <a href="#Modify">Modify-Methode</a> wird diese Option die Kindelemente des angegebenen Elements in alphabetischer Reihenfolge sortieren. Um stattdessen alle Top-Level-Elemente zu sortieren, verwenden Sie <code>TV.Modify(0, "Sort")</code>. Wenn es keine Kindelemente hat, wird nicht die ID des geänderten Elements, sondern 0 zurückgegeben.</p>
      <p><strong>Vis</strong>: Stellt sicher, dass das Element vollständig sichtbar ist, gegebenenfalls durch Scrollen der TreeView und/oder Aufklappen seines Elternelements.</p>
      <p><strong>VisFirst</strong>: Das gleiche wie oben, außer dass die TreeView zusätzlich gescrollt wird, damit das Element ganz oben erscheint, wenn möglich. Diese Option ist in Verbindung mit der <a href="#Modify">Modify-Methode</a> in der Regel effektiver als mit der <a href="#Add">Add-Methode</a>.</p>
    </dd>
  </dl>
  <p>Hinweis: Um das Hinzufügen sehr vieler Elemente leistungsfähiger zu machen, verwenden Sie <code>TV.Opt("-Redraw")</code>, bevor Sie die Elemente hinzufügen, und danach <code>TV.Opt("+Redraw")</code>. Siehe <a href="GuiControl.htm#redraw-remarks">Redraw (Neuzeichnung)</a> für mehr Details.</p>
</div>
<div class="methodShort" id="Modify">
  <h3>Modify</h3>
  <p>Ändert die Attribute und/oder den Namen eines Elements, und gibt ID des Elements zurück.</p>
  <pre class="Syntax">AktuellesElementID := TV.<span class="func">Modify</span>(ElementID <span class="optional">, Optionen, NeuerName</span>)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das geändert werden soll. Verwendet man nur diesen Parameter, wird das angegebene Element <a href="#Select">ausgewählt</a>.</p>
    </dd>
    <dt>Optionen</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Verwenden Sie für diesen Parameter die Optionen aus der oberen Liste.</p>
    </dd>
    <dt>NeuerName</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Der neue Name des Elements. Lässt man diesen Parameter weg, bleibt der aktuelle Name unverändert.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="Delete">
  <h3>Delete</h3>
  <p>Löscht ein bestimmtes Element oder alle Elemente.</p>
  <pre class="Syntax">TV.<span class="func">Delete</span>(<span class="optional">ElementID</span>)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das gelöscht werden soll. Lässt man diesen Parameter weg, werden <strong>alle</strong> Elemente in der TreeView gelöscht.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetSelection">
  <h3>GetSelection</h3>
  <p>Gibt die ID-Nummer des ausgewählten Elements zurück.</p>
  <pre class="Syntax">AusgewähltesElementID := TV.<span class="func">GetSelection</span>()</pre>
</div>
<div class="methodShort" id="GetCount">
  <h3>GetCount</h3>
  <p>Gibt die Anzahl aller Elemente im Steuerelement zurück.</p>
  <pre class="Syntax">Anzahl := TV.<span class="func">GetCount</span>()</pre>
  <p>&nbsp;Hinweis: Diese Funktion gibt diesen Wert ohne Verzögerung zurück, weil das Steuerelement diesen stets zwischenspeichert.</p>
</div>
<div class="methodShort" id="GetParent">
  <h3>GetParent</h3>
  <p>Gibt das Elternelement eines bestimmten Elements als Element-ID zurück.</p>
  <pre class="Syntax">ElternElementID := TV.<span class="func">GetParent</span>(ElementID)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll. Top-Level-Elemente haben keine Elternelemente und geben daher 0 zurück.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetChild">
  <h3>GetChild</h3>
  <p>Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück (oder 0, wenn keines vorhanden ist).</p>
  <pre class="Syntax">ErstesKindID := TV.<span class="func">GetChild</span>(ElternElementID)</pre>
  <dl>
    <dt>ElternElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Elternelement, das überprüft werden soll.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetPrev">
  <h3>GetPrev</h3>
  <p>Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet (oder 0, wenn keines vorhanden ist).</p>
  <pre class="Syntax">VorherigesElementID := TV.<span class="func">GetPrev</span>(ElementID)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetNext">
  <h3>GetNext</h3>
  <p>Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet (oder 0, wenn keines vorhanden ist).</p>
  <pre class="Syntax">NächstesElementID := TV.<span class="func">GetNext</span>(<span class="optional">ElementID, ElementTyp</span>)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll. Wenn dieser Parameter weggelassen wird oder 0 ist, wird die ID-Nummer des ersten/obersten Elements in der TreeView zurückgegeben.</p>
    </dd>
    <dt>ElementTyp</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Lässt man diesen Parameter weg, wird die ID-Nummer des Geschwisterelements abgerufen, das sich unterhalb des angegebenen Elements befindet. Geben Sie ansonsten "Full" oder "F" an, um das nächste Element abzurufen, egal wie seine Beziehung zu dem angegebenen Element ist; oder "Check", "Checked" oder "C", um das nächste abgehakte Element abzurufen.</p>
    </dd>
  </dl>
  &nbsp;Das folgende Beispiel durchläuft die gesamte TreeView Element für Element:<pre>ElementID := 0  <em>; Die Suche beim ersten Element beginnen.</em>
Loop
{
    ElementID := TV.GetNext(ElementID, "Full")  <em>; Ersetzen Sie "Full" mit "Checked", um alle abgehakten Elemente zu finden.</em>
    if not ElementID  <em>; Keine weiteren Elemente verfügbar.</em>
        break
    ElementText := TV.GetText(ElementID)
    MsgBox('Das nächste Element ist ' ElementID ' und enthält "' ElementText '".')
}</pre>
</div>
<div class="methodShort" id="GetText">
  <h3>GetText</h3>
  <p>Ruft den Text/Namen eines bestimmten Elements ab.</p>
  <pre class="Syntax">ErmittelterText := TV.<span class="func">GetText</span>(ElementID)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die ID-Nummer des Elements, dessen Text abgerufen werden soll. <em>ErmittelterText</em> hat eine maximale Länge von 8191.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="Get">
  <h3>Get</h3>
  <p>Gibt eine Nummer ungleich 0 zurück (Element-ID), wenn das angegebene Element ein bestimmtes Attribut hat.</p>
  <pre class="Syntax">AktuellesElementID := TV.<span class="func">Get</span>(ElementID, Attribut)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll.</p>
    </dd>
    <dt>Attribut</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Geben Sie "E", "Expand" oder "Expanded" an, um zu ermitteln, ob das Element gerade <a href="#Expand">aufgeklappt</a> ist (oder anders gesagt, ob seine Kindelemente gerade sichtbar sind); geben Sie "C", "Check" oder "Checked" an, um zu ermitteln, ob das Element ein <a href="#Check">Häkchen</a> hat; oder geben Sie "B" oder "Bold" an, um zu ermitteln, ob das Element gerade in <a href="#Bold">fetter</a> Schrift dargestellt wird.</p>
    </dd>
  </dl>
  <p><strong>Tipp</strong>: Da eine IF-Anweisung jeden Wert ungleich 0 als "wahr" ansieht, sind <code>if TV.Get(ElementID, "Checked") = ElementID</code> und <code>if TV.Get(ElementID, "Checked")</code> funktionsgemäß identisch.</p>
</div>
<div class="methodShort" id="SetImageList">
  <h3>SetImageList</h3>
  <p>Setzt oder ersetzt eine <a href="ListView.htm#IL">ImageList</a> zum Darstellen von Symbolen, und gibt die ImageListID zurück, die vorher mit diesem Steuerelement verknüpft war (oder 0, wenn nicht).</p>
  <pre class="Syntax">VorherigeImageListID := TV.<span class="func">SetImageList</span>(ImageListID <span class="optional">, SymbolTyp</span>)</pre>
    <dl>
      <dt>ImageListID</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Eine Nummer, die von einem vorherigen <a href="ListView.htm#IL_Create">IL_Create</a>-Aufruf zurückgegeben wurde.</p>
      </dd>
      <dt>SymbolTyp</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Lässt man diesen Parameter weg, wird standardmäßig 0 verwendet. Geben Sie ansonsten eine 2 für Zustandssymbole an (Zustandssymbole werden nur via <a href="SendMessage.htm">SendMessage</a> unterstützt).</p>
      </dd>
    </dl>
    <p>
      Jede nicht mehr verwendete ImageList sollte normalerweise mit <a href="ListView.htm#IL_Destroy">IL_Destroy</a> zerstört werden.</p>
</div>
<h2 id="Events">Ereignisse</h2>
<p>Damit das Skript auf die folgenden Ereignisse reagieren kann, muss via <a href="GuiOnEvent.htm">OnEvent</a> eine Callback-Funktion oder -Methode registriert werden:</p>
<table class="info">
  <tr><th>Ereignis</th><th>Auslösende Aktion</th></tr>
  <tr><td><a href="GuiOnEvent.htm#Click">Click</a></td><td>Das Steuerelement wird angeklickt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a></td><td>Das Steuerelement wird doppelt angeklickt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a></td><td>Der Benutzer hat einen Rechtsklick auf das Steuerelement gemacht, oder <kbd>Menü</kbd> oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> gedrückt, während das Steuerelement fokussiert war.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#Focus">Focus</a></td><td>Das Steuerelement hat den Tastaturfokus erhalten.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#LoseFocus">LoseFocus</a></td><td>Das Steuerelement hat den Tastaturfokus verloren.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemCheck">ItemCheck</a></td><td>Das Häkchen eines Elements wird gesetzt oder entfernt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemEdit">ItemEdit</a></td><td>Die Beschriftung eines Elements wird vom Benutzer editiert.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemExpand">ItemExpand</a></td><td>Ein Element wird auf- oder zugeklappt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemSelect">ItemSelect</a></td><td>Ein Element wird ausgewählt.</td></tr>
</table>
<p>Weitere (selten benutzte) Benachrichtigungen können mithilfe von <a href="GuiOnNotify.htm">OnNotify</a> erfasst werden. Diese Benachrichtigungen sind <a href="https://learn.microsoft.com/windows/win32/controls/bumper-tree-view-control-reference-notifications">bei Microsoft Docs dokumentiert</a>. In der Regel zeigt Microsoft Docs keine numerischen Werte für die Benachrichtigungscodes an; diese können in der Windows SDK oder im Internet nachgeschlagen werden.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p id="Enter">Um einen <kbd>Enter</kbd>-Tastendruck in einer fokussierten TreeView zu erfassen, verwenden Sie eine <a href="GuiControls.htm#DefaultButton">Standardschaltfläche</a> (die bei Bedarf versteckt werden kann). Zum Beispiel:</p>
<pre>MeineGui.Add("Button", "Hidden Default", "OK").OnEvent("Click", ButtonOK)
...
ButtonOK(*) {
    global
    if MeineGui.FocusedCtrl != TV
        return
    MsgBox("Sie haben ENTER gedrückt. Die ID des ausgewählten Elements ist " TV.GetSelection())
}</pre>
<p>Neben der Möglichkeit, mit der Tastatur von Element zu Element zu navigieren, kann der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten paar Zeichen eines Elementnamens eingibt. Dies führt dazu, dass die Auswahl zum nächst passenden Element springt.</p>
<p>Obwohl ein beliebig langer Text in einem TreeView-Element gespeichert werden kann, werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Auch wenn die TreeView theoretisch maximal 65536 Elemente enthalten kann, wird die Leistung beim Hinzufügen von Elementen schon lange vorher merklich abnehmen. Um diesen Leistungsverfall etwas abzuschwächen, können Sie den in der <a href="#Add">Add-Methode</a> beschriebenen Tipp bzgl. Redraw verwenden.</p>
<p id="ILremarks">Im Gegensatz zu den ImageLists einer <a href="ListView.htm">ListView</a> werden ImageLists einer TreeView nicht automatisch zerstört, wenn die TreeView zerstört wird. Demzufolge sollte ein Skript <a href="ListView.htm#IL_Destroy">IL_Destroy</a> nach dem Zerstören eines TreeView-Fensters aufrufen, wenn die ImageList nicht länger benötigt wird. Dies ist jedoch nicht erforderlich, wenn das Skript schon bald beendet wird, da in diesem Fall alle ImageLists automatisch zerstört werden.</p>
<p>Ein Skript kann mehr als eine TreeView pro Fenster erstellen.</p>
<p>Um eine TreeView zum Beispiel größer/kleiner zu machen, zu verstecken, oder um die Schrift einer TreeView zu ändern, siehe <a href="GuiControl.htm">GuiControl-Objekt</a>.</p>
<p>Tree View eXtension (TVX) erweitert TreeViews mit der Möglichkeit, Elemente zu verschieben, einzufügen und zu löschen. Siehe dazu <a href="https://www.autohotkey.com/forum/topic19021.html">www.autohotkey.com/forum/topic19021.html</a>.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="GuiControls.htm">Andere Steuerelemente</a>, <a href="Gui.htm#Call">Gui()</a>, <a href="GuiOnEvent.htm#ContextMenu">ContextMenu-Ereignis</a>, <a href="GuiControl.htm">Gui-Objekt</a>, <a href="GuiControl.htm">GuiControl-Objekt</a>, <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Das folgende Beispiel ist ein funktionierendes Skript, das umfangreicher als das Beispiel ganz oben ist. Es erstellt und zeigt eine TreeView mit allen Ordnern, die sich im Alle-Benutzer-Startmenü befinden. Wenn der Benutzer einen Ordner auswählt, wird dessen Inhalt in einer ListView auf der rechten Seite angezeigt (so ähnlich wie der Windows Explorer). Zusätzlich zeigt ein <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelement Informationen über den aktuell ausgewählten Ordner an.</p>
<pre><em>; Der folgende Ordner definiert den Root-Ordner der TreeView. Beachten Sie, dass das
; Laden lange dauern kann, wenn ein komplettes Laufwerk wie C:\ angegeben ist:</em>
TreeRoot := A_MyDocuments
TreeViewBreite := 280
ListViewBreite := A_ScreenWidth/2 - TreeViewBreite - 30

<em>; MeineGui-Fenster erstellen und Root-Ordner in der Titelleiste anzeigen:</em>
MeineGui := Gui("+Resize", TreeRoot)  <em>; Dem Benutzer erlauben, das Fenster zu maximieren oder dessen Größe anzupassen.</em>

<em>; Eine ImageList erstellen und mit einigen Standard-Systemsymbolen befüllen:</em>
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5 
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
<em>; Eine <a href="#GuiAdd">TreeView</a> und ListView nebeneinandersetzen, ähnlich zum Windows Explorer:</em>
TV := <a href="#GuiAdd">MeineGui.Add</a>("TreeView", "r20 w" TreeViewBreite " <a href="#ImageList">ImageList</a>" ImageListID)
LV := MeineGui.Add("ListView", "r20 w" ListViewBreite " x+10", ["Name","Änderungsdatum"])

<em>; <a href="GuiControls.htm#StatusBar">Statusleiste</a> erstellen, um Anzahl der Dateien und Gesamtgröße anzuzeigen:</em>
SB := MeineGui.Add("StatusBar")
<a href="GuiControls.htm#SB_SetParts">SB.SetParts</a>(60, 85)  <em>; Leiste in drei Segmente aufteilen (das dritte Segment füllt die restliche Breite aus).</em>

<em>; Ordner und ihre Unterordner zur TreeView hinzufügen. Status anzeigen, falls das Laden länger dauert:</em>
M := Gui("ToolWindow -SysMenu Disabled AlwaysOnTop", "Lade Baumstruktur..."), M.Show("w200 h0")
VerzListe := SetzeUnterordnerInBaum(TreeRoot, Map())
M.Hide()

<em>; TV_ItemSelect aufrufen, wenn ein neues Element ausgewählt wird:</em>
TV.OnEvent("ItemSelect", TV_ItemSelect)

<em>; Gui_Size aufrufen, wenn die Fenstergröße geändert wird:</em>
MeineGui.OnEvent("Size", Gui_Size)

<em>; Spaltenbreiten der ListView setzen (dies ist optional):</em>
Spalte2Breite := 70  <em>; Kürzen, um nur den YYYYMMDD-Teil anzuzeigen.</em>
LV.ModifyCol(1, ListViewBreite - Spalte2Breite - 30)  <em>; Platz machen für vertikalen Scrollbalken.</em>
LV.ModifyCol(2, Spalte2Breite)

<em>; Das Fenster anzeigen. Das System wird das Skript jedes Mal benachrichtigen, wenn der Benutzer eine gültige Aktion durchführt:</em>
MeineGui.Show

SetzeUnterordnerInBaum(Ordner, VerzListe, ElternElementID := 0)
{
    <em>; Diese Funktion fügt alle Unterordner eines Ordners zur TreeView hinzu
    ; und speichert deren Pfade zusammen mit einer ID in ein Objekt für den späteren Gebrauch.
    ; Sie ruft sich selbst rekursiv auf, um Unterordner in beliebiger Tiefe zu erfassen.</em>
    Loop Files, Ordner "\*.*", "D"  <em>; Alle Unterordner des Ordners abrufen.</em>
    {
        ElementID := <a href="#Add">TV.Add</a>(A_LoopFileName, ElternElementID, "Icon4")
        VerzListe[ElementID] := A_LoopFilePath
        VerzListe := SetzeUnterordnerInBaum(A_LoopFilePath, VerzListe, ElementID)
    }
    return VerzListe
}

TV_ItemSelect(thisCtrl, Element)  <em>; Diese Funktion wird aufgerufen, wenn ein neues Element ausgewählt wird.</em>
{
    <em>; Dateien in die ListView einfügen:</em>
    LV.Delete  <em>; Alle Zeilen löschen.</em>
    LV.Opt("-Redraw")  <em>; Leistung verbessern durch Abschalten von Redraw beim Laden.</em>
    GesamtGröße := 0  <em>; Für die untere Schleife initialisieren.</em>
    Loop Files, VerzListe[Element] "\*.*"  <em>; Nur die Dateien in der ListView anzeigen.</em>
    {
        LV.Add(, A_LoopFileName, A_LoopFileTimeModified)
        GesamtGröße += A_LoopFileSize
    }
    LV.Opt("+Redraw")

    <em>; Die drei Segmente der Statusleiste mit Infos über den aktuell ausgewählten Ordner aktualisieren:</em>
    <a href="GuiControls.htm#SB_SetText">SB.SetText</a>(LV.GetCount() " Dateien", 1)
    SB.SetText(Round(GesamtGröße / 1024, 1) " KB", 2)
    SB.SetText(VerzListe[Element], 3)
}

Gui_Size(thisGui, MinMax, Breite, Höhe)  <em>; ListView und TreeView kleiner/größer machen, wenn Benutzer die Fenstergröße ändert.</em>
{
    if MinMax = -1  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
        return
    <em>; Ansonsten wurde das Fenster kleiner/größer gemacht oder maximiert. Größe der Steuerelemente anpassen.</em>
    TV.GetPos(,, &amp;TV_W)
    TV.Move(,,, Höhe - 30)  <em>; -30 für StatusBar und Abstände.</em>
    LV.Move(,, Breite - TV_W - 30, Höhe - 30)
}</pre>

</div>
</body>
</html>

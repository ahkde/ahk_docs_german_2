<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Try - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Try-Anweisung schützt eine oder mehrere Anweisungen vor Laufzeitfehlern und via Throw ausgelösten Werten." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Try</h1>

<p>Schützt eine oder mehrere <a href="../Concepts.htm#statement">Anweisungen</a> vor Laufzeitfehlern und via <a href="Throw.htm">Throw</a> ausgelösten Werten.</p>

<pre class="Syntax"><span class="func">Try</span> <i>Anweisung</i></pre>
<pre class="Syntax" style="line-height: 100%"><span class="func">Try</span>
{
    <i>Anweisungen</i>
}</pre>
<h2 id="Remarks">Bemerkungen</h2>
<p>Nach einem <em>Try</em> erfolgt üblicherweise ein <a href="Block.htm">Block</a> (eine oder mehrere <a href="../Concepts.htm#statement">Anweisungen</a>, die von geschweiften Klammern umschlossen sind). Wenn nur eine Anweisung verwendet wird, kann diese direkt neben <em>Try</em> gesetzt werden, oder darunter ohne geschweifte Klammern. Um Code anzugeben, der nur dann ausgeführt wird, wenn <em>Try</em> einen Fehler abfängt, verwenden Sie eine oder mehrere <a href="Catch.htm">Catch</a>-Anweisungen.</p>
<p>Wenn <em>Try</em> ohne <em>Catch</em> oder <em>Finally</em> verwendet wird, ist dies äquivalent zu <code>catch Error</code> mit einem leeren Block.</p>
<p>Ein Wert kann ausgelöst werden, wenn die <a href="Throw.htm">Throw</a>-Anweisung verwendet wird oder wenn das Programm einen Laufzeitfehler verursachen sollte. Wenn ein Wert vom Inneren eines <em>Try</em>-Blocks ausgelöst oder wenn eine Funktion von so einem aufgerufen wird, passiert folgendes:</p>
<ul>
  <li>Wenn es eine <a href="Catch.htm">Catch</a>-Anweisung gibt, die mit der Klasse des via Throw ausgelösten Wertes übereinstimmt, wird die Ausführung in diese transferiert.</li>
  <li>Wenn es keine passende <em>Catch</em>-Anweisung, aber eine <a href="Finally.htm">Finally</a>-Anweisung gibt, wird diese ausgeführt, bis sie ihr Ende erreicht hat, danach wird der Wert automatisch erneut ausgelöst.</li>
  <li>Wenn es keine passende <em>Catch</em>-Anweisung oder <em>Finally</em>-Anweisung gibt, wird der Wert automatisch erneut ausgelöst (es sei denn, es gibt überhaupt kein <em>Catch</em> oder <em>Finally</em>, wie oben erwähnt).</li>
</ul>
<p>Nach dem letzten <em>Catch</em> kann optional ein <a href="Else.htm"><em>Else</em></a> erfolgen. Wenn die <em>Try</em>-Anweisung endet, ohne dass eine Ausnahme ausgelöst wird (und ohne dass die Kontrolle durch <em>Return</em>, <em>Break</em> etc. woanders hin transferiert wird), wird die <em>Else</em>-Anweisung ausgeführt. Ausnahmen, die von der <em>Else</em>-Anweisung ausgelöst werden, werden nicht von der zugehörigen <em>Try</em>-Anweisung behandelt, können aber von einer umschließenden <em>Try</em>-Anweisung behandelt werden. <em>Finally</em> kann auch vorhanden sein, muss aber nach <em>Else</em> platziert werden und wird immer zuletzt ausgeführt.</p>
<p>Je nach Bedarf kann der <a href="Block.htm#otb">One True Brace (OTB) Style</a> bei einem <em>Try</em> verwendet werden. Zum Beispiel:</p>
<pre>try {
    ...
} catch Error as Fehler {
    ...
} else {
    ...
} finally {
    ...
}</pre>

<h2 id="Related">Siehe auch</h2>
<p><a href="Throw.htm">Throw</a>, <a href="Catch.htm">Catch</a>, <a href="Else.htm">Else</a>, <a href="Finally.htm">Finally</a>, <a href="Block.htm">Blöcke</a>, <a href="OnError.htm">OnError</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ex_basic">
<p><a class="ex_number" href="#ex_basic"></a> Zeigt das Grundkonzept von <em>Try-Catch</em> und <em>Throw</em>.</p>
<pre>try  <em>; Versucht den Code auszuführen.</em>
{
    HalloWelt
    MacheToast
}
catch as e  <em>; Verarbeitet den ersten Fehler, ausgelöst durch den vorherigen Block.</em>
{
    MsgBox "Ein Fehler wurde ausgelöst!`nSpeziell: " e.Message
    Exit
}

HalloWelt()  <em>; Ist immer erfolgreich.</em>
{
    MsgBox "Hallo, Welt!"
}

MacheToast()  <em>; Schlägt immer fehl.</em>
{
    <em>; Sofort zur Fehlerbehandlung des Try-Blocks springen:</em>
    <a href="Throw.htm">throw</a> Error(A_ThisFunc " ist nicht implementiert, sorry")
}
</pre>
</div>

<div class="ex" id="ex_el">
<p><a class="ex_number" href="#ex_el"></a> Demonstriert die grundlegende Fehlerbehandlung von internen Funktionen.</p>
<pre>try
{
    <em>; Nachfolgend wird versucht, bestimmte Dateitypen zu sichern:</em>
    FileCopy A_MyDocuments "\*.txt", "D:\Backup\Textdokumente"
    FileCopy A_MyDocuments "\*.doc", "D:\Backup\Textdokumente"
    FileCopy A_MyDocuments "\*.jpg", "D:\Backup\Fotos"
}
catch
{
    MsgBox "Es trat ein Fehler beim Absichern der Dateien auf!",, "IconX"
    ExitApp 1
}
else
{
    MsgBox "Absicherung erfolgreich."
    ExitApp 0
}
</pre>
</div>

<div class="ex" id="ex_com">
<p><a class="ex_number" href="#ex_com"></a> Zeigt die Verwendung von <em>Try-Catch</em> bei COM-Fehlern. Einzelheiten über das hier verwendete COM-Objekt finden Sie unter <a href="https://learn.microsoft.com/previous-versions/visualstudio/visual-studio-6.0/aa227633(v=vs.60)">Using the ScriptControl (Microsoft Docs)</a>.</p>
<pre>try
{
    obj := ComObject("ScriptControl")
    obj.ExecuteStatement('MsgBox "Das ist ein eingebettetes VBScript"')  <em>; Diese Zeile erzeugt einen Error.</em>
    obj.InvalidMethod()  <em>; Diese Zeile würde einen MethodError erzeugen.</em>
}
catch MemberError  <em>; Deckt MethodError und PropertyError ab.</em>
{
    MsgBox "Wir haben versucht, ein Element automatisch aufzurufen, das nicht existiert."
}
catch as e
{
    <em>; Um mehr über das Objekt zu erfahren, das in e enthalten ist, siehe <a href="Error.htm">Error-Objekt</a>.</em>
    MsgBox("Ausnahme ausgelöst!`n`nWas: " e.what "`nDatei: " e.file 
        . "`nZeile: " e.line "`nNachricht: " e.message "`nZusatz: " e.extra,, 16) 
}
</pre>
</div>

<div class="ex" id="ex_nesting">
<p><a class="ex_number" href="#ex_nesting"></a> Zeigt verschachtelte <em>Try-Catch</em>-Anweisungen.</p>
<pre>try Beispiel1 <em>; Einzelanweisungen können neben dem Try stehen.</em>
catch Number as e
    MsgBox "Beispiel1() hat " e " ausgelöst."

Beispiel1()
{
    try Beispiel2
    catch Number as e
    {
        if (e = 1)
            throw <em>; Den abgefangenen Wert erneut auslösen und an unseren Anrufer weiterleiten.</em>
        else
            MsgBox "Beispiel2() hat " e " ausgelöst."
    }
}

Beispiel2()
{
    throw Random(1, 2)
}</pre>
</div>

</body>
</html>

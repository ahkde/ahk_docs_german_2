<!DOCTYPE HTML>
<html lang="de">
<head>
<title>GuiControl-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das GuiControl-Objekt stellt eine Schnittstelle für ein GUI-Steuerelement zur Verfügung, um Aktionen wie das Verschieben durchzuführen oder um Werte wie dessen Text abzurufen oder zu setzen." />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControl-Objekt</h1>
<pre class="NoIndent">class Gui.Control extends Object</pre>

<p>Ermöglicht eine Schnittstelle zum Modifizieren von GUI-Steuerelementen und Abrufen ihrer Informationen. <a href="Gui.htm#Add">Gui.Add</a>, <a href="Gui.htm#__Item">Gui.__Item</a> und <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a> geben ein Objekt dieses Typs zurück.</p>

<p>"GuiCtrl" wird hier stellvertretend für Instanzen der <code>Gui.Control</code>-Klasse verwendet.</p>
<p><code>Gui.Control</code> dient als Basisklasse für alle GUI-Steuerelemente, aber jeder Typ von Steuerelement hat seine eigene Klasse. Einige der folgenden Methoden sind durch den Prototyp der entsprechenden Klasse oder der Basisklasse <code>Gui.List</code> definiert. Eine vollständige Liste finden Sie unter <a href="index.htm">Interne Klassen</a>.</p>
<p>Zusätzlich zu den Methoden und Eigenschaften, die von <a href="Object.htm">Object</a> geerbt werden, können GuiControl-Objekte die folgenden vordefinierten Methoden und Eigenschaften haben.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#Add">Add</a>: Erweitert die aktuelle Liste einer DropDownList, ListBox, ComboBox oder eines Tab-Steuerelements mit bestimmten Listeneinträgen/Tabs.</li>
      <li><a href="#Choose">Choose</a>: Wählt einen bestimmten Listeneintrag/Tab in einer ListBox, DropDownList, ComboBox oder einem Tab-Steuerelement aus.</li>
      <li><a href="#Delete">Delete</a>: Löscht einen bestimmten oder alle Listeneinträge/Tabs aus einer ListBox, DropDownList, ComboBox oder einem Tab-Steuerelement.</li>
      <li><a href="#Focus">Focus</a>: Setzt den Tastaturfokus auf das Steuerelement.</li>
      <li><a href="#GetPos">GetPos</a>: Ruft die Position und Größe des Steuerelements ab.</li>
      <li><a href="#Move">Move</a>: Verschiebt das Steuerelement und/oder ändert dessen Größe.</li>
      <li><a href="#OnCommand">OnCommand</a>: Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn eine Steuerelementbenachrichtigung via WM_COMMAND-Meldung empfangen wird.</li>
      <li><a href="#OnEvent">OnEvent</a>: Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn das entsprechende Ereignis ausgelöst wird.</li>
      <li><a href="#OnNotify">OnNotify</a>: Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn eine Steuerelementbenachrichtigung via WM_NOTIFY-Meldung empfangen wird.</li>
      <li><a href="#Opt">Opt</a>: Setzt verschiedene Optionen und Styles, die das Aussehen und Verhalten des Steuerelements beeinflussen.</li>
      <li><a href="#Redraw">Redraw</a>: Zeichnet den vom Steuerelement beanspruchten Fensterbereich neu.</li>
      <li><a href="#SetFont">SetFont</a>: Bestimmt Schriftart, Schriftgröße, Schriftstil und/oder Schriftfarbe des Steuerelements.</li>
      <li><a href="#SetFormat">SetFormat</a>: Setzt das Anzeigeformat eines DateTime-Steuerelements.</li>
      <li><a href="#UseTab">UseTab</a>: Verknüpft danach erstelle Steuerelemente mit einem bestimmten Tab eines Tab-Steuerelements.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#ClassNN">ClassNN</a>: Ermittelt die ClassNN-Bezeichnung des Steuerelements.</li>
      <li><a href="#Enabled">Enabled</a>: Ermittelt den aktuellen Interaktionsstatus des Steuerelements, oder aktiviert oder deaktiviert die Interaktion mit dem Steuerelement.</li>
      <li><a href="#Focused">Focused</a>: Ermittelt den aktuellen Fokusstatus des Steuerelements.</li>
      <li><a href="#Gui">Gui</a>: Ermittelt das übergeordnete GUI-Fenster des Steuerelements.</li>
      <li><a href="#Hwnd">Hwnd</a>: Ermittelt die HWND-Nummer (eindeutige ID) des Steuerelements.</li>
      <li><a href="#Name">Name</a>: Ermittelt oder setzt den expliziten Namen des Steuerelements.</li>
      <li><a href="#Text">Text</a>: Ermittelt oder setzt den Text bzw. Beschriftung des Steuerelements.</li>
      <li><a href="#Type">Type</a>: Ermittelt den Typ des Steuerelements.</li>
      <li><a href="#Value">Value</a>: Ermittelt oder setzt den Inhalt eines wertefähigen Steuerelements.</li>
      <li><a href="#Visible">Visible</a>: Ermittelt den aktuellen Sichtbarkeitsstatus des Steuerelements, oder zeigt oder versteckt es.</li>
    </ul>
  </li>
  <li><a href="#GenRemarks">Allgemeine Bemerkungen</a>:
    <ul>
      <li><a href="#redraw-remarks">Redraw (Neuzeichnung)</a>: Leistungsbezogene Bemerkungen zum Neuzeichnungsverhalten von Steuerelementen.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">Methoden</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Erweitert eine DropDownList, ListBox oder ComboBox um Listeneinträge oder ein Tab-Steuerelement um Tabs.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Add</span>(Elemente)</pre>
<dl>
  <dt>Elemente</dt><dd>
    <p>Typ: <a href="../Concepts.htm#objects">Array</a> mit <a href="../Concepts.htm#strings">Zeichenketten</a></p>
    <p>Ein Array mit Zeichenketten (z. B. <code>["Rot","Grün","Blau"]</code>), die an das Ende der Liste des Steuerelements angefügt werden sollen. Verwenden Sie vorher <a href="#Delete">GuiCtrl.Delete</a>, um die Liste stattdessen zu ersetzen bzw. zu überschreiben.</p>
  </dd>
</dl>
<p>Verwenden Sie <a href="#Choose">GuiCtrl.Choose</a>, um einen Listeneintrag/Tab auszuwählen.</p>
<p>Siehe auch: <a href="ListView.htm#Add">ListView.Add</a>, <a href="TreeView.htm#Add">TreeView.Add</a></p>
</div>

<div class="methodShort" id="Choose">
<h3>Choose</h3>
<p>Wählt einen bestimmten Listeneintrag/Tab in einer ListBox, DropDownList, ComboBox oder einem Tab-Steuerelement aus.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Choose</span>(Wert)</pre>
<dl>
  <dt>Wert</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Dieser Parameter muss für den ersten Listeneintrag/Tab eine 1 sein, für den Zweiten eine 2, und so weiter.</p>
    <p>Wenn <em>Wert</em> eine Zeichenkette (oder numerische Zeichenkette) ist, wird ein Listeneintrag/Tab ausgewählt, dessen Name mit <em>Wert</em> beginnt. Die Suche ist nicht Groß-/Kleinschreibung-sensitiv. Wenn das Steuerelement beispielsweise den Listeneintrag/Tab "UNIX-Text" enthält, genügt die Angabe des Wortes unix (kleingeschrieben), um diesen Listeneintrag/Tab auszuwählen. Bei einer <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> werden alle übereinstimmenden Listeneinträge ausgewählt.</p>
    <p>Wenn <em>Wert</em> eine 0 oder leer ist, wird die aktuelle Auswahl entfernt.</p></dd>
</dl>
<p>Das folgende Beispiel zeigt, wie <u>alle</u> Listeneinträge in einer <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> aus- oder abgewählt werden können:</p>
<pre>PostMessage 0x0185, 1, -1, ListBox  <em>; Wählt alle Listeneinträge aus. 0x0185 ist LB_SETSEL.</em>
PostMessage 0x0185, 0, -1, ListBox  <em>; Wählt alle Listeneinträge ab.</em>
ListBox.Choose(0)  <em>; Wählt alle Listeneinträge ab.</em></pre>
<p>Im Gegensatz zu <a href="ControlChooseIndex.htm">ControlChooseIndex</a> kann diese Methode keine <a href="GuiOnEvent.htm#Change">Change</a>- oder <a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a>-Ereignisse auslösen.</p>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>Löscht einen bestimmten oder alle Listeneinträge/Tabs aus einer ListBox, DropDownList, ComboBox oder einem Tab-Steuerelement.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Delete</span>(<span class="optional">Wert</span>)</pre>
<dl>
  <dt>Wert</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Dieser Parameter muss für den ersten Listeneintrag/Tab eine 1 sein, für den Zweiten eine 2, und so weiter. Lässt man diesen Parameter weg, werden alle Listeneinträge/Tabs gelöscht.</p>
  </dd>
</dl>
<p>Beachten Sie bei Tab-Steuerelementen, dass die in einem Tab enthaltenen Steuerelemente mit ihrer ursprünglichen Tabnummer verbunden bleiben; das heißt, dass sie nie dem tatsächlichen Anzeigenamen ihres Tabs zugeordnet werden. Das Umbenennen oder Entfernen eines Tabs ändert nicht die Tabnummer, zu der die darin enthaltenen Steuerelemente gehören. Wenn zum Beispiel die drei Tabs <code>["Rot","Grün","Blau"]</code> vorhanden sind und der zweite Tab mit <code>MeinTab.Delete(2)</code> entfernt wird, werden die ursprünglich mit Grün verknüpften Untersteuerelemente mit Blau verknüpft. Infolgedessen sollten grundsätzlich nur Tabs am Ende einer Liste entfernt werden. Auf diese Weise entfernte Tabs können später wieder hinzugefügt werden, um ihnen ihre ursprünglichen Steuerelemente zurückzugeben.</p>
<p>Siehe auch: <a href="ListView.htm#Delete">ListView.Delete</a>, <a href="TreeView.htm#Delete">TreeView.Delete</a></p>
</div>

<div class="methodShort" id="Focus">
<h3>Focus</h3>
<p>Setzt den Tastaturfokus auf das Steuerelement.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Focus</span>()</pre>
<p>Hinweis: Um die gewünschte Wirkung zu erzielen, darf das Fenster weder minimiert noch versteckt sein.</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>Ruft die Position und Größe des Steuerelements ab.</p>
<pre class="Syntax">GuiCtrl.<span class="func">GetPos</span>(<span class="optional">X, Y, Breite, Höhe</span>)</pre>
<p>Jeder Parameter muss eine <a href="../Concepts.htm#variable-references">Referenz</a> sein, die auf eine Variable verweist, in der die jeweilige Koordinate gespeichert werden soll. Die Position ist relativ zum Clientbereich des GUI-Fensters (das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen).</p>
<p>Im Gegensatz zu <a href="ControlGetPos.htm">ControlGetPos</a> wendet diese Methode die <a href="Gui.htm#DPIScale">DPI-Skalierung</a> auf die zurückgegebenen Koordinaten an (es sei denn, es wurde die Option <code>-DPIScale</code> verwendet).</p>
<p>Beispiel:</p>
<pre>MeinEdit.GetPos(&amp;x, &amp;y, &amp;w, &amp;h)
MsgBox "Die X-Koordinate ist " x ". Die Y-Koordinate ist " y ". Die Breite ist " w ". Die Höhe ist " h "."
</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>Verschiebt das Steuerelement und/oder ändert dessen Größe.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Move</span>(<span class="optional">X, Y, Breite, Höhe</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die neue Position, relativ zum Clientbereich des GUI-Fensters (das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen).</p></dd>
  <dt>Breite, Höhe</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die neue Größe.</p></dd>
</dl>
<p>Im Gegensatz zu <a href="ControlMove.htm">ControlMove</a> wendet diese Methode die <a href="Gui.htm#DPIScale">DPI-Skalierung</a> auf die Koordinaten an (es sei denn, es wurde die Option <code>-DPIScale</code> verwendet).</p>
<p>Beispiele:</p>
<pre>MeinEdit.Move(10, 20, 200, 100)
MeinEdit.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)</pre>
</div>

<div class="methodShort" id="OnCommand">
<h3>OnCommand</h3>
<p>Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn eine Steuerelementbenachrichtigung via <a href="https://msdn.microsoft.com/library/ms647591">WM_COMMAND</a>-Meldung empfangen wird.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnCommand</span>(NachrichtCode, Callback <span class="optional">, HinzufügenEntfernen</span>)</pre>
<p>Weitere Informationen finden Sie unter <a href="GuiOnCommand.htm">OnCommand</a>.</p>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn ein bestimmtes <a href="GuiOnEvent.htm#Control_Events">Ereignis</a> ausgelöst wird.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnEvent</span>(Ereignisname, Callback <span class="optional">, HinzufügenEntfernen</span>)</pre>
<p>Weitere Informationen finden Sie unter <a href="GuiOnEvent.htm">OnEvent</a>.</p>
</div>

<div class="methodShort" id="OnNotify">
<h3>OnNotify</h3>
<p>Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn eine Steuerelementbenachrichtigung via <a href="https://msdn.microsoft.com/library/bb775583">WM_NOTIFY</a>-Meldung empfangen wird.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnNotify</span>(NachrichtCode, Callback <span class="optional">, HinzufügenEntfernen</span>)</pre>
<p>Weitere Informationen finden Sie unter <a href="GuiOnNotify.htm">OnNotify</a>.</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>Ermöglicht das Hinzufügen oder Entfernen von Optionen und Styles des Steuerelements.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Opt</span>(Optionen)</pre>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Entweder <a href="GuiControls.htm">steuerelementspezifische</a> oder <a href="Gui.htm#OtherOptions">allgemeine</a> Optionen und Styles.</p>
  </dd>
</dl>
<p>Im folgenden Beispiel wird die Interaktion mit dem Steuerelement <a href="Gui.htm#Disabled">deaktiviert</a> und jegliche Änderungen am <a href="Gui.htm#Background">Hintergrund</a> rückgängig gemacht:</p>
<pre>MeinEdit.Opt("+Disabled -Background")</pre>
<p>Im nächsten Beispiel wird die OK-Schaltfläche zur neuen Standardschaltfläche gemacht:</p>
<pre>OKButton.Opt("+Default")</pre>
<p>Obwohl auch <a href="../misc/Styles.htm">Styles</a> und erweiterte Styles erkannt werden, können einige von ihnen nicht angewendet oder entfernt werden, nachdem ein Steuerelement erstellt wurde. Eine erfolgreich angewendete Änderung kann immer noch vom Steuerelement selbst ignoriert werden.</p>
</div>

<div class="methodShort" id="Redraw">
<h3>Redraw</h3>
<p>Zeichnet den vom Steuerelement beanspruchten Fensterbereich neu.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Redraw</span>()</pre>
<p>Obwohl diese Methode bei wiederholtem und schnellem Aufruf ein ungewolltes Flackern erzeugen kann, ist sie in der Lage, fehlerhafte Darstellungen beim Zeichnen von bestimmten Steuerelementen wie <a href="GuiControls.htm#GroupBox">GroupBox</a> zu verhindern.</p>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>Bestimmt Schriftart, Schriftgröße, Schriftstil und/oder Schriftfarbe des Steuerelements.</p>
<p>Hinweis: Es können beide Parameter weggelassen werden, um die aktuell via <a href="Gui.htm#SetFont">Gui.SetFont</a> definierte Schrift der GUI zu setzen. Ansonsten werden alle nicht angegebenen Schriftattribute von der vorherigen Schrift des Steuerelements übernommen. Die Schriftfarbe wird nur geändert, wenn sie in den <em>Optionen</em> angegeben ist.</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFont</span>(<span class="optional">Optionen, SchriftName</span>)</pre>
<p>Einzelheiten zu beiden Parametern finden Sie unter <a href="Gui.htm#SetFont">Gui.SetFont</a>.</p>
</div>

<div class="methodShort" id="SetFormat">
<h3>SetFormat</h3>
<p>Setzt das Anzeigeformat eines <a href="GuiControls.htm#DateTime">DateTime</a>-Steuerelements.</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFormat</span>(<span class="optional">Format</span>)</pre>
  <p>Siehe <a href="GuiControls.htm#DateTimeFormat">SetFormat</a> für weitere Details.</p>
</div>

<div class="methodShort" id="UseTab">
<h3>UseTab</h3>
<p>Verknüpft danach erstelle Steuerelemente mit einem bestimmten Tab eines Tab-Steuerelements.</p>
<pre class="Syntax">GuiCtrl.<span class="func">UseTab</span>(<span class="optional">Wert, GenaueÜbereinstimmung</span>)</pre>
<dl>
  <dt>Wert</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Dieser Parameter muss für den ersten Tab eine 1 sein, für den Zweiten eine 2, und so weiter. Wenn <em>Wert</em> kein Integer ist, wird ein Tab verwendet, dessen Name mit <em>Wert</em> beginnt. Die Suche ist nicht Groß-/Kleinschreibung-sensitiv. Wenn ein Steuerelement beispielsweise den Tab "UNIX-Text" enthält, genügt die Angabe des Wortes unix (kleingeschrieben), um diesen Tab zu verwenden. Wenn <em>Wert</em> eine 0 ist, eine leere Zeichenkette ist oder weggelassen wird, werden nachfolgende Steuerelemente außerhalb des Tab-Steuerelements platziert.</p>
  </dd>
  <dt>GenaueÜbereinstimmung</dt><dd>
    <p>Typ: <a href="../Concepts.htm#boolean">Boolescher Wert</a></p>
    <p>Wenn dieser Parameter 1 (true) ist, muss <em>Wert</em> exakt aber nicht Groß-/Kleinschreibung-sensitiv mit dem Namen des Tabs übereinstimmen.</p>
  </dd>
</dl>
</div>

<h2 id="Properties">Eigenschaften</h2>
<div class="methodShort" id="ClassNN">
<h3>ClassNN</h3>
<p>Ermittelt die ClassNN-Bezeichnung des Steuerelements.</p>
<pre class="Syntax">ClassNN := GuiCtrl.ClassNN</pre>
</div>

<div class="methodShort" id="Enabled">
<h3>Enabled</h3>
<p>Ermittelt den aktuellen Interaktionsstatus des Steuerelements, oder aktiviert oder deaktiviert die Interaktion mit dem Steuerelement.</p>
<pre class="Syntax">ErmittelterStatus := GuiCtrl.Enabled</pre>
<pre class="Syntax">GuiCtrl.Enabled := NeuerStatus</pre>
<p>Bei Tab-Steuerelementen wird diese Eigenschaft zudem die Interaktion mit allen darin enthaltenen Steuerelementen aktivieren oder deaktivieren. Beachten Sie aber, dass jedes darin enthaltene Steuerelement, das explizit via <code>GuiCtrl.Enabled := false</code> deaktiviert wurde, sich diese Einstellung merkt und dementsprechend auch nach Reaktivierung des Tab-Steuerelements deaktiviert bleibt.</p>
</div>

<div class="methodShort" id="Focused">
<h3>Focused</h3>
<p>Ermittelt den aktuellen Fokusstatus des Steuerelements.</p>
<pre class="Syntax">ErmittelterStatus := GuiCtrl.Focused</pre>
<p>Hinweis: Um die gewünschte Wirkung zu erzielen, darf das Fenster weder minimiert noch versteckt sein.</p>
</div>

<div class="methodShort" id="Gui">
<h3>Gui</h3>
<p>Ermittelt das <a href="Gui.htm">Gui-Objekt</a> des GUI-Fensters, wo das Steuerelement enthalten ist.</p>
<pre class="Syntax">GuiObj := GuiCtrl.Gui</pre>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>Ruft die HWND-Nummer (eindeutige ID) des Steuerelements ab. </p>
<pre class="Syntax">Hwnd := GuiCtrl.Hwnd</pre>
<p>Die HWND-Nummer (eindeutige ID) eines Steuerelements wird oft in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a> genutzt.</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>Ermittelt oder setzt den Namen des Steuerelements.</p>
<pre class="Syntax">ErmittelterName := GuiCtrl.Name</pre>
<pre class="Syntax">GuiCtrl.Name := NeuerName</pre>
<p>Der Name eines Steuerelements kann in Verbindung mit <a href="Gui.htm#__Item">Gui.__Item</a> genutzt werden, um dessen GuiControl-Objekt abzurufen. Bei den meisten eingabefähigen Steuerelementen wird der Name auch von <a href="Gui.htm#Submit">Gui.Submit</a> verwendet.</p>
</div>

<div class="methodShort" id="Text">
<h3>Text</h3>
<p>Ermittelt oder setzt den Text bzw. Beschriftung des Steuerelements.</p>
<pre class="Syntax">ErmittelterText := GuiCtrl.Text</pre>
<pre class="Syntax">GuiCtrl.Text := NeuerText</pre>
<p>Hinweis: Wenn das Steuerelement weder eine sichtbare Beschriftung noch einen (einzelnen) Textwert hat, greift diese Eigenschaft auf die versteckte Beschriftung des Steuerelements zurück (wie bei <a href="ControlGetText.htm">ControlGetText</a>/<a href="ControlSetText.htm">ControlSetText</a>).</p>
<p><strong>Beschriftung/Anzeigetext</strong>: Die <em>Text</em>-Eigenschaft ermittelt oder setzt die Beschriftung bzw. Anzeigetext von folgenden Steuerelementen: <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#Text">Text</a>. Da sich hierbei die Größe des Steuerelements nicht automatisch erweitert, muss so etwas wie <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> verwendet werden, um das Steuerelement breiter zu machen.</p>

<p><strong><a href="GuiControls.htm#DateTime">DateTime</a></strong>: Die <em>Text</em>-Eigenschaft ruft den im Steuerelement angezeigten formatierten Text ab. Das Zuweisen einer formatierten Datum/Zeit-Zeichenkette an das Steuerelement wird nicht unterstützt. Weisen Sie dem Steuerelement stattdessen via <a href="#Value">GuiCtrl.Value</a> einen Zeitstempel im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format zu, um den aktuellen Datum- bzw. Zeitwert zu ändern.</p>

<p><strong><a href="GuiControls.htm#Edit">Edit</a></strong>: Wie bei anderen Steuerelementen auch, wird der Text unverändert abgerufen oder gesetzt; es erfolgt keine End-of-Line-Übersetzung. Mit <a href="#Value">GuiCtrl.Value</a> kann der Text eines mehrzeiligen Edit-Steuerelements abgerufen oder gesetzt werden, während zwischen <code>`r`n</code> und <code>`n</code> übersetzt wird.</p>

<p><strong><a href="GuiControls.htm#StatusBar">StatusBar</a></strong>: Die <em>Text</em>-Eigenschaft ermittelt oder setzt nur den Text des ersten Bereiches (nutzen Sie <a href="GuiControls.htm#SB_SetText">SB.SetText</a> für mehr Flexibilität).</p>

<p><strong>Listentext</strong>: Die <em>Text</em>-Eigenschaft ermittelt oder setzt den aktuell ausgewählten Listeneintrag/Tab für folgende Steuerelemente: <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a>.</p>
<p><em>NeuerText</em> sollte der vollständige Text (nicht Groß-/Kleinschreibung-sensitiv) des Listeneintrags/Tabs sein, der ausgewählt werden soll.</p>
<p>Bei einer ComboBox ohne ausgewähltem Listeneintrag wird stattdessen der im Eingabefeld enthaltene Text abgerufen. Bei anderen Steuerelementen ist <em>ErmittelterText</em> leer. Wenn <em>NeuerText</em> leer ist, wird der aktuelle Listeneintrag/Tab abgewählt.</p>
<p>Bei einer <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> ist <em>ErmittelterText</em> ein Array. <em>NeuerText</em> kann kein Array sein, aber wenn mehrere Listeneinträge übereinstimmen, werden sie alle ausgewählt. Um mehrere Listeneinträge mit unterschiedlichem Text auszuwählen, rufen Sie <a href="#Choose">GuiCtrl.Choose</a> wiederholt auf.</p>
<p>Mit <a href="#Value">GuiCtrl.Value</a> kann ein Listeneintrag/Tab stattdessen via Positionsnummer ausgewählt werden.</p>
</div>

<div class="methodShort" id="Type">
<h3>Type</h3>
<p>Ermittelt den Typ des Steuerelements.</p>
<pre class="Syntax">ErmittelterTyp := GuiCtrl.Type</pre>
<p>Je nach <a href="GuiControls.htm">Steuerelement</a> ist <var>ErmittelterTyp</var> eine der folgenden Zeichenketten: Text, Edit, UpDown, Pic, Button, CheckBox, Radio, DDL, ComboBox, ListBox, ListView, TreeView, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox, Tab, Tab2, Tab3, StatusBar, ActiveX, Custom.</p>
</div>

<div class="methodShort" id="Value">
<h3>Value</h3>
<p>Ermittelt oder setzt den Inhalt eines Steuerelements.</p>
<pre class="Syntax">ErmittelterWert := GuiCtrl.Value</pre>
<pre class="Syntax">GuiCtrl.Value := NeuerWert</pre>
  <p>Hinweis: Wenn das Steuerelement nicht wertefähig ist, wird <em>ErmittelterWert</em> leer sein und das Zuweisen von <em>NeuerWert</em> einen Fehler auslösen. Ungültige Werte lösen eine Ausnahme aus.</p>
  <p>Folgende Steuerelemente sind wertefähig:</p>

<p><strong>Picture</strong></p>
<p><em>ErmittelterWert</em> ist der Dateiname des Bildes, der beim Erstellen des <a href="GuiControls.htm#Picture">Picture</a>-Steuerelements angegeben wurde. Dieser Name ändert sich auch dann nicht, wenn später ein anderer Dateiname angegeben wird.</p>
<p><em>NeuerWert</em> ist der Dateiname (oder <a href="../misc/ImageHandles.htm">Handle</a>) eines neuen Bildes, das geladen werden soll (siehe <a href="GuiControls.htm#Picture">Picture</a>, welche Dateitypen unterstützt werden). Direkt vor dem Dateinamen können Null oder mehr der folgenden Optionen angegeben werden: <code>*wN</code> (Breite N), <code>*hN</code> (Höhe N) und <code>*IconN</code> (Symbolgruppennummer N in einer DLL- oder EXE-Datei). Im folgenden Beispiel wird das Standardsymbol aus der zweiten Symbolgruppe mit einer Breite von 100 Pixel und einer automatischen Höhe via "Seitenverhältnis beibehalten" geladen: <code>MeinBild.Value := "*icon2 *w100 *h-1 C:\Meine Anwendung.exe"</code>. Geben Sie <code>*w0 *h0</code> an, um die aktuelle Breite und Höhe des Bildes zu nutzen. Lässt man <code>*w</code> und <code>*h</code> weg, wird die Größe des Bildes an die Größe des Steuerelements angepasst. Lädt man ein Symbol aus einer mit mehreren Symbolen bestückten ICO-Datei, bestimmt die Angabe einer Breite und Höhe zudem, welches Symbol geladen werden soll. Hinweis: Verwenden Sie nur ein Leer- oder Tabulatorzeichen zwischen der letzten Option und dem Dateinamen selbst; alle anderen Leer- oder Tabulatorzeichen werden als Teil des Dateinamens interpretiert.</p>

<p><strong>Text</strong></p>
<p><em>ErmittelterWert</em> ist der Text bzw. Beschriftung des <a href="GuiControls.htm#Text">Text</a>-Steuerelements.</p>
<p><em>NeuerWert</em> ist der neue Text des Steuerelements. Da sich hierbei die Größe des Steuerelements nicht automatisch erweitert, muss so etwas wie <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> verwendet werden, um das Steuerelement breiter zu machen.</p>

<p><strong>Edit</strong></p>
<p><em>ErmittelterWert</em> ist der aktuelle Inhalt des <a href="GuiControls.htm#Edit">Edit</a>-Steuerelements. Bei mehrzeiligen Steuerelementen werden alle Zeilenumbrüche im Text in reine LF-Zeichen (`n) umgewandelt, anstatt wie üblich in CR+LF (`r`n), das von Nicht-GUI-Funktionen wie <a href="ControlGetText.htm">ControlGetText</a> und <a href="ControlSetText.htm">ControlSetText</a> verwendet wird.</p>
<p><em>NeuerWert</em> ist der neue Inhalt. Bei mehrzeiligen Steuerelementen wird jedes LF-Zeichen (`n) in <em>NeuerWert</em>, das kein CR-Zeichen (`r) davor hat, automatisch in CR+LF (`r`n) umgewandelt, um eine korrekte Darstellung zu gewährleisten. In der Regel sollte das keine Probleme bereiten, weil beim Verwenden von <a href="Gui.htm#Submit">Gui.Submit</a> oder beim Abrufen des Wertes diese Übersetzung automatisch rückgängig gemacht wird, indem CR+LF mit LF (`n) ersetzt wird.</p>
  <p>Mit <a href="#Text">GuiCtrl.Text</a> kann der Text abgerufen oder gesetzt werden, ohne dass eine Übersetzung zwischen `n und `r`n erfolgt.</p>

<p><strong>Hotkey</strong></p>
<p><em>ErmittelterWert</em> ist eine Tastenkombination in Form von Modifikatorsymbolen und einem Tastennamen, sofern ein Hotkey im <a href="GuiControls.htm#Hotkey">Hotkey</a>-Steuerelement angegeben ist; ansonsten leer. Beispiele: <code>^!C</code>, <code>^Home</code>, <code>+^NumpadHome</code>.</p>
<p><em>NeuerWert</em> kann eine Tastenkombination in Form von Modifikatorsymbolen und einem Tastennamen sein, oder leer sein, um das Steuerelement leer zu machen. Beispiele: <code>^!c</code>, <code>^Numpad1</code>, <code>+Home</code>. Die einzigen unterstützten Modifikatoren sind ^ (STRG), ! (ALT) und + (UMSCHALT). Weitere verfügbare Tastennamen finden Sie in der <a href="../KeyList.htm">Tastenliste</a>.</p>

<p><strong>Checkbox / Radio</strong></p>
<p><em>ErmittelterWert</em> ist eine 1, wenn das Steuerelement (<a href="GuiControls.htm#Checkbox">CheckBox</a> oder <a href="GuiControls.htm#Radio">Radio-Button</a>) abgehakt oder eingeschaltet ist, eine 0, wenn es nicht-abgehakt oder ausgeschaltet ist, oder -1, wenn es grau/unbestimmt ist.</p>
<p><em>NeuerWert</em> kann eine 0 für nicht-abgehakt oder ausgeschaltet, eine 1 für abgehakt oder eingeschaltet, oder -1 für grau/unbestimmt sein. Wenn ein Radio-Button eingeschaltet wird und Mitglied einer Multi-Radio-Gruppe ist, werden die anderen Radio-Buttons in der Gruppe automatisch ausgeschaltet.</p>
  <p>Mit <a href="#Text">GuiCtrl.Text</a> kann stattdessen der Text bzw. Beschriftung des Steuerelements abgerufen oder gesetzt werden.</p>

<p><strong>DateTime / MonthCal</strong></p>
<p><em>ErmittelterWert</em> ist ein Zeitstempel im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format, der aktuell im <a href="GuiControls.htm#DateTime">DateTime</a>- oder <a href="GuiControls.htm#MonthCal">MonthCal</a>-Steuerelement ausgewählt ist.</p>
<p><em>NeuerWert</em> ist ein Zeitstempel im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Geben Sie <code>A_Now</code> an, um das heutige Datum und die aktuelle Uhrzeit zu verwenden. Bei DateTime-Steuerelementen kann <em>NeuerWert</em> eine leere Zeichenkette sein, um das Steuerelement anzuzeigen, ohne dass ein Datum oder eine Uhrzeit vorab ausgewählt ist (wenn es mit <a href="GuiControls.htm#ChooseNone">dieser Option</a> erstellt wurde). Bei MonthCal-Steuerelementen kann ein Bereich angegeben werden, wenn das Steuerelement fähig zur <a href="GuiControls.htm#MonthCalMulti">Mehrfachauswahl</a> ist.</p>

<p><strong>UpDown / Slider / Progress</strong></p>
<p><em>ErmittelterWert</em> ist die aktuelle Position des <a href="GuiControls.htm#UpDown">UpDown</a>-, <a href="GuiControls.htm#Slider">Slider</a>- oder <a href="GuiControls.htm#Progress">Progress</a>-Steuerelements.</p>
<p><em>NeuerWert</em> ist die neue Position des Steuerelements, zum Beispiel <code>MeinSlider.Value := 10</code>. Verwenden Sie <code>+=</code>, <code>-=</code>, <code>++</code> oder <code>--</code> anstelle von <code>:=</code>, um mathematische Operationen an dem aktuellen Wert durchzuführen. Liegt die neue Position außerhalb des gültigen Bereichs, wird das Steuerelement auf den nächstmöglichen gültigen Wert gesetzt.</p>

<p><strong>Tab / DropDownList / ComboBox / ListBox</strong></p>
<p><em>ErmittelterWert</em> ist die Position des aktuell ausgewählten Listeneintrags/Tabs im <a href="GuiControls.htm#Tab">Tab</a>-, <a href="GuiControls.htm#DropDownList">DropDownList</a>-, <a href="GuiControls.htm#ComboBox">ComboBox</a>- oder <a href="GuiControls.htm#ListBox">ListBox</a>-Steuerelement. Wenn nichts ausgewählt ist, wird 0 zurückgegeben. Wenn man Text im Eingabefeld einer ComboBox einträgt, wird der erste übereinstimmende Listeneintrag ausgewählt. Wenn kein einziger Listeneintrag übereinstimmt, wird 0 zurückgegeben, selbst wenn Text im Steuerelement vorhanden ist. Handelt es sich um eine <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a>, wird ein Array mit Nummern zurückgegeben (das leer ist, wenn keine Listeneinträge ausgewählt sind).</p>
<p><em>NeuerWert</em> ist die Position eines Listeneintrags/Tabs, der ausgewählt werden soll, oder 0, um die aktuelle Auswahl zu entfernen (das funktioniert auch bei Tab-Steuerelementen). Um mehrere Listeneinträge auszuwählen, rufen Sie <a href="#Choose">GuiCtrl.Choose</a> wiederholt auf.</p>
<p>Mit <a href="#Text">GuiCtrl.Text</a> kann stattdessen der Text des ausgewählten Listeneintrags/Tabs abgerufen oder gesetzt werden.</p>

<p><strong>ActiveX</strong></p>
<p><em>ErmittelterWert</em> ist das ActiveX-Objekt des <a href="GuiControls.htm#ActiveX">ActiveX</a>-Steuerelements. Wenn das Steuerelement beispielsweise mit dem Text <em>Shell.Explorer</em> erstellt wurde, wird ein <a href="https://msdn.microsoft.com/library/aa752043">WebBrowser</a>-Objekt zurückgegeben. Es wird jedes Mal das gleiche <a href="ComValue.htm">Wrapperobjekt</a> zurückgegeben.</p>
</div>

<div class="methodShort" id="Visible">
<h3>Visible</h3>
<p>Ermittelt den aktuellen Sichtbarkeitsstatus des Steuerelements, oder zeigt oder versteckt es.</p>
<pre class="Syntax">ErmittelterStatus := GuiCtrl.Visible</pre>
<pre class="Syntax">GuiCtrl.Visible := NeuerStatus</pre>
<p>Bei Tab-Steuerelementen wird diese Eigenschaft zudem alle darin enthaltenen Steuerelemente verstecken oder sichtbar machen. Mit <code>GuiCtrl.Enabled := false</code> kann zusätzlich der Tastaturkurzbefehl eines Steuerelements (unterstrichene Buchstabe) deaktiviert werden.</p>
</div>

<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>

<h3 id="redraw-remarks">Redraw</h3>
<p>Beim Hinzufügen einer großen Anzahl von Elementen zu einem Steuerelement (z. B. <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a> oder <a href="GuiControls.htm#ListBox">ListBox</a>) kann die Leistung verbessert werden, indem die Neuzeichnung des Steuerelements kurzzeitig unterdrückt wird, während die Änderungen vorgenommen werden. Verwenden Sie hierfür <code>GuiCtrl.Opt("-Redraw")</code>, bevor Sie die Elemente hinzufügen, und danach <code>GuiCtrl.Opt("+Redraw")</code>. Änderungen am Steuerelement, die vor dem Deaktivieren der Neuzeichnung noch nicht sichtbar waren, werden in der Regel erst sichtbar, nachdem die Neuzeichnung wieder aktiviert wurde.</p>
<p>Grundsätzlich werden Änderungen am Inhalt eines Steuerelements aus Leistungsgründen nicht sofort dazu führen, dass das Steuerelement neu gezeichnet wird, selbst wenn die Neuzeichnung aktiv ist. Stattdessen wird ein Teil des Steuerelements "ungültig" gemacht und üblicherweise nach einer kurzen Verzögerung neu gezeichnet, sobald das Programm seine interne Meldungswarteschlange überprüft. Das Skript kann die Neuzeichnung mittels <code>Sleep -1</code> sofort erzwingen.</p>

</body>
</html>

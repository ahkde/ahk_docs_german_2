<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Func-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das Func-Objekt bietet eine Schnittstelle für eine Funktion zum Abrufen von Werten wie die Parameteranzahl oder zum Ausführen von Aktionen wie das Aufrufen der Funktion." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Func-Objekt</h1>
<pre class="NoIndent">class Func extends Object</pre>

<p>Repräsentiert eine benutzerdefinierte oder interne Funktion.</p>
<p>Informationen über andere Objekte, die wie Funktionen aufgerufen werden können, finden Sie unter <a href="../misc/Functor.htm">Funktionsobjekte</a>.</p>
<p>Die <code>Closure</code>-Klasse erweitert <code>Func</code>, definiert aber keine neuen Eigenschaften.</p>

<p>Für jede interne Funktion oder Funktionsdefinition innerhalb des Skripts gibt es eine entsprechende schreibgeschützte Variable, die ein Func-Objekt enthält. Diese Variable wird direkt für den Aufruf der Funktion verwendet, allerdings kann ihr Wert auch gelesen werden, um die Funktion selbst als Wert abzurufen. Zum Beispiel:</p>
<pre>PrüfeFn StrLen
PrüfeFn PrüfeFn

PrüfeFn(fn)
{
    <em>; Zeigt Informationen über die übergebene Funktion an.</em>
    MsgBox fn.Name "() ist " (fn.IsBuiltIn ? "integriert." : "benutzerdefiniert.")
}
</pre>
<p>"FuncObj" wird hier stellvertretend für ein beliebiges Func-Objekt verwendet, da "Func" die Klasse selbst ist.</p>
<p>Zusätzlich zu den Methoden und Eigenschaften, die von <a href="Object.htm">Object</a> geerbt werden, haben Func-Objekte die folgenden vordefinierten Methoden und Eigenschaften.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#Call">Call</a>: Ruft die Funktion auf.</li>
      <li><a href="#Bind">Bind</a>: Bindet Parameter an die Funktion und gibt ein BoundFunc-Objekt zurück.</li>
      <li><a href="#IsByRef">IsByRef</a>: Ermittelt, ob der Parameter ein ByRef-Parameter ist.</li>
      <li><a href="#IsOptional">IsOptional</a>: Ermittelt, ob der Parameter ein optionaler Parameter ist.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#Name">Name</a>: Gibt den Namen der Funktion zurück.</li>
      <li><a href="#IsBuiltIn">IsBuiltIn</a>: Gibt 1 (true) zurück, wenn die Funktion eine interne Funktion ist, andernfalls 0 (false).</li>
      <li><a href="#IsVariadic">IsVariadic</a>: Gibt 1 (true) zurück, wenn die Funktion variadisch ist, andernfalls 0 (false).</li>
      <li><a href="#MinParams">MinParams</a>: Gibt die Anzahl der Pflichtparameter zurück.</li>
      <li><a href="#MaxParams">MaxParams</a>: Gibt die Anzahl der formal deklarierten Parameter einer benutzerdefinierten Funktion oder die maximale Anzahl der Parameter einer internen Funktion zurück.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">Methoden</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>Ruft die Funktion auf.</p>
<pre class="Syntax">FuncObj(Param1, Param2, ...)
FuncObj.<span class="func">Call</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>Parameter und Rückgabewerte werden durch die Funktion definiert.</dd>
</dl>
<p>Die Methode "Call" ist beim Aufruf eines Wertes inbegriffen, muss also nicht explizit angegeben werden.</p>
</div>

<div class="methodShort" id="Bind"><h3>Bind</h3>
<p>Bindet Parameter an die Funktion und gibt ein <a href="../misc/Functor.htm#BoundFunc">BoundFunc-Objekt</a> zurück.</p>
<pre class="Syntax">BoundFunc := FuncObj.<span class="func">Bind</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>Beliebig viele Parameter.</dd>
</dl>
<p>Informationen und Beispiele finden Sie unter <a href="../misc/Functor.htm#BoundFunc">BoundFunc-Objekt</a>.</p>
</div>

<div class="methodShort" id="IsByRef"><h3>IsByRef</h3>
<p>Ermittelt, ob der Parameter ein ByRef-Parameter ist.</p>
<pre class="Syntax">Boolesch := FuncObj.<span class="func">IsByRef</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Optional: Die 1-basierte Indexnummer eines Parameters. Lässt man diesen Parameter weg, gibt <em>Boolesch</em> an, ob die Funktion irgendwelche ByRef-Parameter hat.</p>
  </dd>
</dl>
<p>Der Rückgabewert ist ein boolescher Wert, der angibt, ob der Parameter ein ByRef-Parameter ist. Wenn <em>ParamIndex</em> ungültig ist, wird eine Ausnahme ausgelöst.</p>
</div>

<div class="methodShort" id="IsOptional"><h3>IsOptional</h3>
<p>Ermittelt, ob der Parameter ein optionaler Parameter ist.</p>
<pre class="Syntax">Boolesch := FuncObj.<span class="func">IsOptional</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Optional: Die 1-basierte Indexnummer eines Parameters. Lässt man diesen Parameter weg, gibt <em>Boolesch</em> an, ob die Funktion optionale Parameter hat.</p>
  </dd>
</dl>
<p>Der Rückgabewert ist ein boolescher Wert, der angibt, ob der Parameter optional ist. Wenn <em>ParamIndex</em> ungültig ist, wird eine Ausnahme ausgelöst.</p>
<p>Parameter müssen nicht formal deklariert werden, wenn die Funktion variadisch ist. Interne Funktionen werden unterstützt.</p></div>

<h2 id="Properties">Eigenschaften</h2>

<div class="methodShort" id="Name"><h3>Name</h3>
<p>Gibt den Namen der Funktion zurück.</p>
<pre class="Syntax">FunktionName := FuncObj.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h3>IsBuiltIn</h3>
<p>Gibt 1 (true) zurück, wenn die Funktion eine <a href="../Functions.htm#BuiltIn">interne Funktion</a> ist, andernfalls 0 (false).</p>
<pre class="Syntax">Boolesch := FuncObj.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h3>IsVariadic</h3>
<p>Gibt 1 (true) zurück, wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, andernfalls 0 (false).</p>
<pre class="Syntax">Boolesch := FuncObj.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h3>MinParams</h3>
<p>Gibt die Anzahl der Pflichtparameter zurück.</p>
<pre class="Syntax">ParamAnzahl := FuncObj.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h3>MaxParams</h3>
<p>Gibt die Anzahl der formal deklarierten Parameter einer benutzerdefinierten Funktion oder die maximale Anzahl der Parameter einer internen Funktion zurück.</p>
<pre class="Syntax">ParamAnzahl := FuncObj.MaxParams</pre>
<p>Wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, ist <em>ParamAnzahl</em> die Anzahl von Parametern, die die Funktion maximal akzeptieren kann, ohne in den "variadischen*" Parameter überzulaufen.</p></div>

</body>
</html>

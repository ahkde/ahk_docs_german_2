<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop Read - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Loop-Read-Anweisung ruft die Zeilen einer Textdatei einzeln ab." />
<meta name="ahk:equiv-v1" content="lib/LoopReadFile.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop Read</h1>

<p>Ruft die Zeilen einer Textdatei einzeln ab.</p>

<pre class="Syntax"><span class="func">Loop Read</span> EingabeDatei <span class="optional">, AusgabeDatei</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>EingabeDatei</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name der Textdatei, die von der Schleife gelesen werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet. Die Zeilen einer Datei können entweder mit einem CR-LF-Paar (`r`n), nur mit einem LF-Zeichen (`n) oder nur mit einem CR-Zeichen (`r) enden.</p>
  </dd>

  <dt id="OutputFile">AusgabeDatei</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Name der Datei, die während des Schleifenvorgangs offen bleibt. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
      <p>Innerhalb der Schleife kann die <a href="FileAppend.htm">FileAppend</a>-Funktion ohne <em>DateiName</em>-Parameter benutzt werden, um den zu schreibenden Text an die spezielle Datei anzufügen. Diese Art von Anfügen ist leistungsfähiger als <a href="FileAppend.htm">FileAppend</a> im 2-Parameter-Modus, weil es verhindert, dass die Datei bei jeder Operation geschlossen und neu geöffnet wird. Achten Sie darauf, ein LF-Zeichen (`n) oder ein CR-LF-Paar (`r`n) nach dem Text einzufügen, falls notwendig.</p>
      <p>Die Datei wird nie geöffnet, wenn nichts zu schreiben ist. Zum Beispiel wenn die Schleife nie durchlaufen wird oder nie die <a href="FileAppend.htm">FileAppend</a>-Funktion aufruft.</p>
      <p><strong>Optionen</strong>: Der EOL-Umwandlungsmodus (EOL = End Of Line = Zeilenende) und die Kodierung der Ausgabedatei sind abhängig davon, welche Optionen zu Beginn an <a href="FileAppend.htm">FileAppend</a> übergeben wurden (also der erste Aufruf ohne <em>DateiName</em>). Nachfolgende Aufrufe ignorieren den <em>Optionen</em>-Parameter. Standardmäßig erfolgt keine EOL-Umwandlung; das heißt, dass LF-Zeichen (`n) unverändert geschrieben werden, es sei denn, die <code>"`n"</code>-Option ist vorhanden.</p>
      <p><strong>Standardausgabe (stdout)</strong>: Ein Sternchen (*) im Parameter <em>AusgabeDatei</em> bewirkt, dass ein von <a href="FileAppend.htm">FileAppend</a> geschriebener Text zur Standardausgabe (stdout) gesendet wird. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von wo aus die Zeile gestartet wurde. Dies kann umgangen werden, indem 1) das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert, oder 2) die Ausgabe des Skripts via Piping an einen anderen Befehl oder an ein anderes Programm weitergeleitet wird. Siehe <a href="FileAppend.htm">FileAppend</a> für mehr Details.</p>
  </dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Eine dateilesende Schleife ist nützlich, wenn Sie alle Zeilen in einer Textdatei einzeln abarbeiten wollen. Die Datei wird die ganze Zeit offen gelassen, um zu verhindern, dass sie für jede neue Zeile neu eingelesen werden muss.</p>
<p id="LoopReadLine">Die interne Variable <strong>A_LoopReadLine</strong> ist nur in einer dateilesenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Zeile ohne das CR-LF-Paar (`r`n) am Ende. Wenn eine innere dateilesende Schleife von einer äußeren dateilesenden Schleife umschlossen ist, hat die Dateizeile der innersten Schleife Vorrang.</p>
<p>Es können Zeilen mit einer Länge von bis zu 65534 Zeichen gelesen werden. Wenn eine Zeile diese Länge überschreitet, werden die restlichen Zeichen während des nächsten Schleifendurchlaufs gelesen.</p>
<p>In einer dateilesenden Schleife wird oft die <a href="StrSplit.htm">StrSplit</a>-Funktion oder eine <a href="LoopParse.htm">parsende Schleife</a> verwendet, um den Inhalt von jeder Zeile zu parsen, die in <em>EingabeDatei</em> gefunden wurde. Wenn jede Zeile in <em>EingabeDatei</em> beispielsweise aus mehreren tabgetrennten Feldern besteht, können solche Felder wie folgt einzeln abgerufen werden:</p>
<pre>Loop read, "C:\Datenbank-Export.txt"
{
    Loop parse, A_LoopReadLine, A_Tab
    {
        MsgBox "Feldnummer " A_Index " ist " A_LoopField "."
    }
}</pre>
<p>Um eine komplette Datei in eine Variable zu laden, verwendet Sie <a href="FileRead.htm">FileRead</a>, weil es deutlich leistungsfähiger als eine Schleife ist (besonders bei großen Dateien).</p>
<p>Um mehrere Dateien simultan zu lesen oder zu schreiben, verwenden Sie <a href="FileOpen.htm">FileOpen</a>.</p>
<p id="otb">Optional kann der "One True Brace Style" (OTB) angewendet werden, um die geschweifte Startklammer auf dieselbe Zeile statt darunter zu setzen. Zum Beispiel: <code>Loop Read EingabeDatei, AusgabeDatei {</code>.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (sie können in jeder Schleifenvariante verwendet werden).</p>
<p>Mit <a href="FileEncoding.htm">FileEncoding</a> können Sie kontrollieren, wie eine Datei ohne Byte-Order-Markierung entschlüsselt werden soll.</p>
<p>Nach der Schleife kann optional eine <a href="Else.htm">Else</a>-Anweisung erfolgen, die ausgeführt wird, wenn die Eingabedatei leer ist oder nicht gefunden werden konnte. Wenn <em>AusgabeDatei</em> angegeben wurde, kann der <a href="#OutputFile">oben</a> beschriebene spezielle Modus von <a href="FileAppend.htm">FileAppend</a> auch innerhalb des Körpers der <em>Else</em>-Anweisung verwendet werden. Wenn kein <em>Else</em> vorhanden ist, wird ein <a href="Error.htm#OSError">OSError</a> ausgelöst, wenn die Datei nicht gefunden werden konnte.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="Sort.htm">Sort</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExFileAppend">
<p><a class="ex_number" href="#ExFileAppend"></a> Zeilen, die in der ersten Datei das Wort FAMILIE enthalten, werden in die zweite Datei geschrieben. Heben Sie die Kommentierung der ersten Zeile auf, um die vorhandene Datei zu überschreiben statt Text anzufügen.</p>
<pre><em>;FileDelete "C:\Dokumente\Familie-Adressen.txt"</em>

Loop read, "C:\Dokumente\Adressenliste.txt", "C:\Dokumente\Familie-Adressen.txt"
{
    if InStr(A_LoopReadLine, "Familie")
        FileAppend(A_LoopReadLine "`n")
}
else
    MsgBox "Adressenliste.txt war komplett leer oder wurde nicht gefunden."</pre>
</div>

<div class="ex" id="ExLastLine">
<p><a class="ex_number" href="#ExLastLine"></a> Ruft die letzte Zeile einer Textdatei ab.</p>
<pre>Loop read, "C:\Logdatei.txt"
    letzteZeile := A_LoopReadLine  <em>; Sobald die Schleife endet, wird diese Variable die letzte Zeile beinhalten.</em></pre>
</div>

<div class="ex" id="ExURL">
<p><a class="ex_number" href="#ExURL"></a> Versucht, alle FTP- und HTTP-URLs aus einer Text- oder HTML-Datei zu extrahieren.</p>
<pre>
QuelleDatei := FileSelect(3,, "Wähle eine Text- oder HTML-Datei zum Analysieren aus:")
if QuelleDatei = ""
    return  <em>; In diesem Fall beenden.</em>

SplitPath QuelleDatei,, &amp;QuelleDateiPfad,, &amp;QuelleDateiOhneEnd
ZielDatei := QuelleDateiPfad "\" QuelleDateiOhneEnd " Extrahierte Links.txt"

if FileExist(ZielDatei)
{
    Ergebnis := MsgBox("Vorhandene Datei überschreiben? Drücken Sie Nein, um die Links nur anzufügen.`n`nDATEI: " ZielDatei,, 4)
    if Ergebnis = "Yes"
        FileDelete ZielDatei
}

LinksAnzahl := 0
Loop read, QuelleDatei, ZielDatei
{
    URLSuche(A_LoopReadLine)
}
MsgBox LinksAnzahl ' Links wurden gefunden und in "' ZielDatei '" geschrieben.'
return


URLSuche(URLSuchZkette)
{
    <em>; Das wird auf diese Weise gemacht, weil einige URLs andere URLs eingebettet haben:
    ; Findet die Startposition ganz links:</em>
    URLStart := 0  <em>; Setzt den Standardwert.</em>
    for URLPräfix in ["https://", "http://", "ftp://", "www."]
    {
        DiesePos := InStr(URLSuchZkette, URLPräfix)
        if !DiesePos  <em>; Dieses Präfix ist disqualifiziert.</em>
            continue
        if !URLStart
            URLStart := DiesePos
        else <em>; URLStart beinhaltet eine gültige Position, also mit DiesePos vergleichen.</em>
        {
            if DiesePos &amp;&amp; DiesePos &lt; URLStart
                URLStart := DiesePos
        }
    }

    if !URLStart  <em>; Keine URLs in der URLSuchZkette.</em>
        return

    <em>; Extrahiert ansonsten diese URL:</em>
    URL := SubStr(URLSuchZkette, URLStart)  <em>; Entfernt den beginnenden/irrelevanten Teil.</em>
    Loop parse, URL, " `t&lt;&gt;"  <em>; Findet das erste Leer-, Tab- oder Winkelzeichen (falls vorhanden).</em>
    {
        URL := A_LoopField
        break  <em>; Führt nur eine Schleifeniteration durch, um das erste "Feld" zu holen.</em>
    }
    <em>; Wenn die obige Schleife aufgrund eines nicht-vorhandenen Endungszeichen keine Iteration hat,
    ; bleibt der Inhalt der URL-Variable unberührt.

    ; Wenn die URL mit einem doppelten Anführungszeichen endet, wird sie entfernt.  Vorerst wird StrReplace verwendet, aber
    ; beachten Sie, dass doppelte Anführungszeichen in URLs legitim sind, so dass sie dadurch
    ; beschädigt werden könnten:</em>
    SaubereURL := StrReplace(URL, '"')
    FileAppend SaubereURL "`n"
    global LinksAnzahl += 1

    <em>; Schaut nach, ob noch andere URLs in dieser Zeile vorkommen:</em>
    WegzulassendeZeichen := StrLen(URL)
    WegzulassendeZeichen += URLStart
    URLSuchZkette := SubStr(URLSuchZkette, WegzulassendeZeichen)
    
    <em>; Ruft sich nochmals selbst auf:</em>
    URLSuche(URLSuchZkette)
}
</pre>
</div>

</body>
</html>

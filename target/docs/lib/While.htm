<!DOCTYPE HTML>
<html lang="de">
<head>
<title>While Loop - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die While-Schleifenanweisung führt eine Reihe von Codezeilen wiederholt aus, bis ein bestimmter Ausdruck als falsch gewertet wird." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>While-Schleife</h1>

<p>Führt eine Reihe von Funktionen wiederholt aus, bis ein bestimmter <a href="../Variables.htm#Expressions">Ausdruck</a> als falsch gewertet wird.</p>

<pre class="Syntax"><span class="func">While</span> <i>Ausdruck</i></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Ausdruck</dt>
  <dd><p>Beliebiger gültiger <a href="../Variables.htm#Expressions">Ausdruck</a>. Zum Beispiel: <code>while x &lt; y</code>.</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Das Leer- oder Tabulatorzeichen nach <code>While</code> ist optional, wenn der Ausdruck in runden Klammern gesetzt ist, wie z. B. <code>While(Ausdruck)</code>.</p>
<p>Der Ausdruck wird nach jedem Schleifendurchlauf einmal ausgewertet. Falls die Auswertung des Ausdrucks wahr ist (weder eine leere Zeichenkette noch die Zahl 0), wird der Schleifenkörper ausgeführt, ansonsten springt die Ausführung auf die Zeile nach dem Schleifenkörper.</p>
<p>Nach einer While-Schleife erfolgt üblicherweise ein <a href="Block.htm">Block</a> (eine Sammlung von Anweisungen), der den <em>Schleifenkörper</em> definiert. Eine Schleife mit nur einer einzigen Anweisung benötigt keinen Block (ein "if" und das dazugehörige "else" werden hierbei als Einzelanweisung angesehen).</p>
<p id="otb">Optional kann der "One True Brace Style" (OTB) angewendet werden, um die geschweifte Startklammer auf dieselbe Zeile statt darunter zu setzen. Zum Beispiel: <code>while x &lt; y {</code>.</p>
<p>Die interne Variable <strong>A_Index</strong> enthält die Nummer des aktuellen Schleifendurchlaufs. Sie enthält eine 1, sobald der Ausdruck und Körper der Schleife das erste Mal ausgeführt werden. Beim zweiten Mal enthält sie eine 2; und so weiter. Wenn eine innere Schleife von einer äußeren Schleife umschlossen ist, hat die innere Schleife Vorrang. A_Index funktioniert in jeder Schleifenvariante, aber außerhalb einer Schleife enthält sie eine 0.</p>
<p>Wie bei allen anderen Schleifen auch, kann mit <a href="Break.htm">Break</a> die Schleife vorzeitig beendet werden. Mit <a href="Continue.htm">Continue</a> kann außerdem der Rest des aktuellen Durchlaufs übersprungen werden, dabei wird A_Index um 1 erhöht und der Ausdruck der While-Schleife neu ausgewertet. Ist die Auswertung weiterhin wahr, beginnt ein neuer Durchlauf; ansonsten endet die Schleife.</p>
<p>Nach der Schleife kann optional eine <a href="Else.htm">Else</a>-Anweisung erfolgen, die ausgeführt wird, wenn die Schleife null Iterationen hatte.</p>
<p>Spezialisierte Schleifen: Mit Schleifen können Dateien, Ordner oder Registry-Einträge automatisch abgerufen werden (einzeln). Siehe <a href="LoopFiles.htm">Datei-Schleife</a> und <a href="LoopReg.htm">Registry-Schleife</a> für Details. <a href="LoopRead.htm">Dateilesende Schleifen</a> können den kompletten Inhalt einer Datei zeilenweise durchgehen. <a href="LoopParse.htm">Parsende Schleifen</a> können einzelne Felder einer Zeichenkette durchgehen.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="Loop.htm">Loop</a>, <a href="For.htm">For-Schleife</a>, <a href="LoopFiles.htm">Datei-Schleife</a>, <a href="LoopReg.htm">Registry-Schleife</a>, <a href="LoopRead.htm">dateilesende Schleife</a>, <a href="LoopParse.htm">parsende Schleife</a>, <a href="If.htm">If</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Während der Benutzer einen Ziehvorgang mit der linken Maustaste durchführt, zeigt ein Tooltip Informationen über die Größe der Fläche innerhalb des Ziehbereichs an.</p>
<pre>CoordMode "Mouse", "Screen"

~LButton::
{
    MouseGetPos &amp;StartPosX, &amp;StartPosY
    while GetKeyState("LButton")
    {
        MouseGetPos &amp;x, &amp;y
        ToolTip StartPosX ", " StartPosY "`n" Abs(StartPosX-x) " x " Abs(StartPosY-y)
        Sleep 10
    }
    ToolTip
}</pre>
</div>

</body>
</html>

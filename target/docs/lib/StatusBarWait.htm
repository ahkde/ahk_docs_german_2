<!DOCTYPE HTML>
<html lang="de">
<head>
<title>StatusBarWait - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die StatusBarWait-Funktion wartet, bis die Statusleiste eines Fensters eine bestimmte Zeichenkette enthält." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>StatusBarWait</h1>

<p>Wartet, bis die Statusleiste eines Fensters eine bestimmte Zeichenkette enthält.</p>

<pre class="Syntax"><span class="func">StatusBarWait</span> <span class="optional">LeisteText, Zeitlimit, SegmentNummer, FensterTitel, FensterText, Intervall, AusnahmeTitel, AusnahmeText</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>LeisteText</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn ungesetzt oder weggelassen, wartet die Funktion, bis die Statusleiste leer wird. Andernfalls geben Sie den Text oder ein Teil des Textes an, auf dessen Erscheinen die Funktion warten soll. Der Text ist Groß-/Kleinschreibung-sensitiv. Das Übereinstimmungsverhalten wird durch <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> bestimmt, ähnlich wie bei <em>FensterTitel</em> unten.</p>
    <p>Um stattdessen auf eine <em>Änderung</em> des Leistentextes zu warten, führen Sie <a href="StatusBarGetText.htm">StatusBarGetText</a> wiederholt mit einer Schleife aus oder verwenden Sie das RegEx-Beispiel am Ende dieser Seite.</p>
  </dd>
  
  <dt>Zeitlimit</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#numbers">Float</a></p>
    <p>Wenn ungesetzt oder weggelassen, wird die Funktion unendlich lang warten. Andernfalls geben Sie die maximale Wartezeit in Sekunden an (kann einen Dezimalpunkt enthalten). Bei Zeitüberschreitung wird 0 (false) zurückgegeben.</p>
  </dd>
  
  <dt>SegmentNummer</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn ungesetzt oder weggelassen, wird standardmäßig 1 verwendet, was üblicherweise das Segment ist, das den Text von Interesse enthält. Andernfalls geben Sie die Nummer des Leistensegments an, dessen Text abgerufen werden soll.</p>
  </dd>

  <dt>FensterTitel, FensterText, AusnahmeTitel, AusnahmeText</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a>, <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Objects.htm">Objekt</a></p>
    <p>Wenn jeder dieser Parameter ungesetzt ist oder weggelassen wird, wird das <a href="../misc/WinTitle.htm#LastFoundWindow">Zuletzt Gefundene Fenster</a> verwendet. Andernfalls geben Sie für <em>FensterTitel</em> ein <a href="../misc/WinTitle.htm">Fenstertitel oder andere Kriterien</a> zur Identifizierung des Zielfensters und/oder für <em>FensterText</em> eine Teilzeichenkette aus einem Textelement des Zielfensters an (Textelemente können mit dem internen Tool "Window Spy" aufgedeckt werden). Versteckte Textelemente werden erkannt, wenn <a href="DetectHiddenText.htm">DetectHiddenText</a> eingeschaltet wurde. Fenster, deren Titel oder Texte <em>AusnahmeTitel</em> bzw. <em>AusnahmeText</em> enthalten, werden ignoriert.</p>
  </dd>

  <dt>Intervall</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn ungesetzt oder weggelassen, wird standardmäßig 50 verwendet. Andernfalls geben Sie an, wie oft die Statusleiste geprüft werden soll, während die Funktion wartet (in Millisekunden).</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#boolean">Integer (boolesch)</a></p>
<p>Diese Funktion gibt 1 (true) zurück, wenn eine Übereinstimmung gefunden wurde, oder 0 (false), wenn die Funktion das Zeitlimit überschritten hat.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Es wird in folgenden Fällen eine Ausnahme ausgelöst:</p>
<ul>
  <li><a href="Error.htm#TargetError">TargetError</a>: Das Zielfenster konnte nicht gefunden werden oder enthält keine reguläre Statusleiste.</li>
  <li><a href="Error.htm#OSError">OSError</a>: Es gab ein Problem beim Senden der SB_GETPARTS-Meldung, oder es erfolgte keine Antwort innerhalb von 2000&nbsp;ms.</li>
  <li><a href="Error.htm#OSError">OSError</a>: Es konnte kein Speicher innerhalb des Prozesses, dem die Statusleiste gehört, reserviert werden.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p>Diese Funktion versucht, die erste <em>reguläre</em> Statusleiste eines Fensters zu lesen (allgemeines Microsoft-Steuerelement: msctls_statusbar32). Einige Programme verwenden eigene Statusleisten oder spezielle Versionen des MS-Steuerelements - in diesem Fall werden solche Leisten nicht unterstützt.</p>
<p>Anstatt <a href="StatusBarGetText.htm">StatusBarGetText</a> wiederholt mit einer Schleife auszuführen, ist es in der Regel effizienter, StatusBarWait zu verwenden, da es Optimierungen enthält, die den Overhead durch mehrfache Aufrufe von <a href="StatusBarGetText.htm">StatusBarGetText</a> vermeiden.</p>
<p>StatusBarWait ermittelt das Zielfenster, bevor es damit beginnt, auf eine Übereinstimmung zu warten. Falls dieses Zielfenster geschlossen wird, hört die Funktion auf zu warten, auch dann, wenn ein anderes Fenster mit dem gleichen <em>FensterTitel</em> und <em>FensterText</em> vorhanden ist.</p>
<p>Während die Funktion im Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkeys</a>, <a href="Menu.htm">benutzerdefinierte Menüpunkte</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>
<p>Fenstertitel und -texte sind Groß-/Kleinschreibung-sensitiv. Versteckte Fenster werden nur erkannt, wenn <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> eingeschaltet ist.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="StatusBarGetText.htm">StatusBarGetText</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="WinGetText.htm">WinGetText</a>, <a href="ControlGetText.htm">ControlGetText</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExSearch">
<p><a class="ex_number" href="#ExSearch"></a> Schreibt ein neues Suchmuster in ein existierendes Explorer-/Suchfenster.</p>
<pre>if WinExist("Suchergebnisse") <em>; Setzt das zuletzt gefundene Fenster, um das folgende zu vereinfachen.</em>
{
    WinActivate
    Send "{tab 2}!o*.txt{enter}"  <em>; Das Suchmuster in das Suchfenster schreiben.</em>
    Sleep 400  <em>; Der Statusleiste Zeit geben, auf "wird durchsucht" zu wechseln.</em>
    if StatusBarWait("gefunden", 30)
        MsgBox "Die Suche wurde erfolgreich durchgeführt."
    else
        MsgBox "Die Funktion hat die Zeit überschritten."
}</pre>
</div>

<div class="ex" id="ExChange">
<p><a class="ex_number" href="#ExChange"></a> Wartet auf eine Änderung der Statusleiste im aktiven Fenster.</p>
<pre>SetTitleMatchMode "RegEx"  <em>; Akzeptiert <a href="SetTitleMatchMode.htm#RegEx">Reguläre Ausdrücke</a> für den nachfolgenden Gebrauch.</em>
if WinExist("A")  <em>; Macht das aktive Fenster zum zuletzt gefundenen Fenster.</em>
{
    Originaltext := StatusBarGetText()
    StatusBarWait "^(?!^\Q" Originaltext "\E$)"  <em>; Dieser reguläre Ausdruck wartet auf eine Änderung des Textes.</em>
}</pre>
</div>

</body>
</html>

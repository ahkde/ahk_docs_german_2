<!DOCTYPE HTML>
<html lang="de">
<head>
<title>GetKeyState - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die GetKeyState-Funktion gibt 1 (true) oder 0 (false) zurück, je nachdem, ob die angegebene Tastatur-, Maus- oder Controller-Taste unten oder oben ist. Ruft auch Controller-Werte ab." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState</h1>

<p>Gibt 1 (true) oder 0 (false) zurück, je nachdem, ob die angegebene Tastatur-, Maus- oder Controller-Taste unten oder oben ist. Ruft auch Controller-Werte ab.</p>

<pre class="Syntax">IstUnten := <span class="func">GetKeyState</span>(TasteName <span class="optional">, Modus</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>TasteName</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Nahezu jedes Zeichen, das mit der Tastatur erzeugt werden kann, oder einer der Tastennamen aus der <a href="../KeyList.htm">Tastenliste</a>, einschließlich Maus- und Controller-Tasten. Beispiele: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternativ kann explizit ein eindeutiger virtueller Tastencode wie vkFF angegeben werden. Tastencodes sind nützlich, um auf Tasten zu verweisen, die keinen Namen haben (selten). Schauen Sie sich die Instruktion am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> an, um zu erfahren, wie der Code einer solchen Taste ermittelt werden kann. Beachten Sie, dass dieser Code hexadezimal sein muss.</p>
      <p><b>Bekannte Einschränkung:</b> Diese Funktion kann nicht zwischen zwei Tasten unterscheiden, die den gleichen virtuellen Tastencode haben, wie z.B. Left und NumpadLeft.</p>
  </dd>

  <dt>Modus</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Dieser Parameter wird ignoriert, wenn Controller-Werte abgerufen werden.</p>
      <p>Wenn weggelassen, wird standardmäßig der logische Status der Taste abgerufen. Dies ist der Status, den das Betriebssystem und das aktive Fenster für diese Taste vermuten, der aber nicht unbedingt dem physischen Status entspricht.</p>
	  <p>Andernfalls geben Sie einen der folgenden Buchstaben an:</p>
      <p><strong>P:</strong> Ruft den physischen Status ab (d.h. ob der Benutzer eine Taste physisch gedrückt hält). Der physische Status einer Tastatur- oder Maustaste ist in der Regel derselbe wie der logische Status, es sei denn, der Tastatur- und/oder Maus-Hook ist installiert, dann spiegelt dieser genau wider, ob der Benutzer die Taste physisch gedrückt hält oder nicht (vorausgesetzt, die Taste wurde während der Ausführung des Skripts nach unten gedrückt). Mit der <a href="KeyHistory.htm">KeyHistory</a>-Funktion oder dem zugehörigen Menüpunkt können Sie prüfen, ob Ihr Skript die Hooks verwendet. Rufen Sie die Funktionen <a href="InstallKeybdHook.htm">InstallKeybdHook</a> und/oder <a href="InstallMouseHook.htm">InstallMouseHook</a> auf, um die Installation eines Hooks zu erzwingen.</p>
      <p><strong>T:</strong> Ruft den Schaltstatus ab. Bei allen Tasten außer <kbd>Feststell</kbd>, <kbd>Num</kbd> und <kbd>Rollen</kbd> ist der Schaltstatus beim Start des Skripts grundsätzlich immer 0 und wird nicht zwischen Prozessen synchronisiert.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#boolean">Integer (boolesch)</a>, <a href="../Concepts.htm#numbers">Float</a>, <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#nothing">Zeichenkette (leer)</a></p>
<p>Diese Funktion gibt 1 (true) zurück, wenn die Taste unten ist (oder eingeschaltet ist), oder 0 (false), wenn sie oben ist (oder ausgeschaltet ist).</p>
<p>Wenn <em>TasteName</em> die Achse eines Sticks wie z.B. JoyX ist, gibt diese Funktion eine Floating-Point-Zahl zwischen 0 und 100 zurück, die die Position des Sticks als Prozentsatz des Bewegungsbereichs dieser Achse repräsentiert. Mit dem <a href="../scripts/index.htm#ControllerTest">Testskript</a> können Sie Ihren Controller analysieren.</p>
<p>Wenn <em>TasteName</em> JoyPOV ist, gibt diese Funktion einen Integer zwischen 0 und 35900 zurück. Die folgenden ungefähren POV-Werte werden von den meisten Controllern verwendet:</p>
<ul>
    <li>-1: keinen Winkel erkannt</li>
    <li>0: nach vorne gerichtet</li>
    <li>9000 (90 Grad): nach rechts gerichtet</li>
    <li>27000 (270 Grad): nach links gerichtet</li>
    <li>18000 (180 Grad): nach hinten gerichtet</li>
</ul>
<p>Wenn <em>TasteName</em> JoyName, JoyButtons, JoyAxes oder JoyInfo ist, wird der Name, die Anzahl der Tasten, die Anzahl der Achsen bzw. die Fähigkeiten des Controllers abgerufen. Weitere Informationen finden Sie unter <a href="../KeyList.htm#Controller">Gamecontroller</a>.</p>
<p>Wenn <em>TasteName</em> eine Taste oder ein Bedienelement eines Controllers ist, die/das nicht erkannt werden konnte, gibt diese Funktion eine leere Zeichenkette zurück.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Es wird ein <a href="Error.htm#ValueError">ValueError</a> ausgelöst, wenn ungültige Parameter erkannt wurden, z.B. wenn <em>TasteName</em> in der aktuellen Tastaturbelegung nicht existiert.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p><a href="KeyWait.htm">KeyWait</a> ist besser geeignet als eine GetKeyState-Schleife, wenn es darum geht, auf die Statusänderung einer Tastatur-, Maus- oder Controller-Taste zu warten.</p>
<p>Es kann vorkommen, dass Betriebssysteme mit ungewöhnlichen Tastaturtreibern den Status von Tasten, insbesondere den Schaltstatus von Tasten wie <kbd>Feststell</kbd>, nur langsam aktualisieren. Wenn Sie also vorhaben, den geänderten Status einer solchen Taste zu prüfen, ist es ratsam, ein <a href="Sleep.htm">Sleep</a> vor der Überprüfung zu setzen, um dem Betriebssystem genügend Zeit zu geben, den Status der Taste zu aktualisieren.</p>
<p>Beispiele für die Verwendung von GetKeyState mit einem Controller finden Sie unter <a href="../misc/RemapController.htm">Controller-Neubelegung</a> und <a href="../scripts/index.htm#ControllerMouse">Controller-Zu-Maus-Skript</a>.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="GetKeyVK.htm">GetKeyVK</a>, <a href="GetKeySC.htm">GetKeySC</a>, <a href="GetKeyName.htm">GetKeyName</a>, <a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Tastenliste</a>, <a href="../misc/RemapController.htm">Controller-Neubelegung</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="InstallKeybdHook.htm">InstallKeybdHook</a>, <a href="InstallMouseHook.htm">InstallMouseHook</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Ruft den aktuellen Status der rechten Maustaste ab.</p>
<pre>Status := GetKeyState("RButton")</pre>
</div>

<div class="ex" id="ExBasic2">
<p><a class="ex_number" href="#ExBasic2"></a> Ruft den aktuellen Status der zweiten Taste des ersten Controllers ab.</p>
<pre>Status := GetKeyState("Joy2")</pre>
</div>

<div class="ex" id="ExIfElse">
<p><a class="ex_number" href="#ExIfElse"></a> Prüft, ob mindestens eine <kbd>Umschalt</kbd>-Taste unten ist.</p>
<pre>if GetKeyState("Shift")
    MsgBox "Mindestens eine UMSCHALT-Taste ist unten."
else
    MsgBox "Keine UMSCHALT-Taste unten."</pre>
</div>

<div class="ex" id="ExToggle">
<p><a class="ex_number" href="#ExToggle"></a> Ruft den aktuellen Schaltstatus von <kbd>Feststell</kbd> ab.</p>
<pre>Status := GetKeyState("CapsLock", "T")</pre>
</div>

<div class="ex" id="ExRemap">
<p><a class="ex_number" href="#ExRemap"></a> Neubelegung. (Dieses Beispiel dient nur zur Illustration, da es einfacher wäre, die <a href="../misc/Remap.htm">interne Neubelegung</a> zu verwenden.) Im folgenden Hotkey wird die Maustaste gedrückt gehalten, während NumpadAdd unten ist, was NumpadAdd effektiv zu einer Maustaste macht. Diese Methode kann auch verwendet werden, um eine Aktion zu wiederholen, während der Benutzer eine Taste gedrückt hält.</p>
<pre>*NumpadAdd::
{
    MouseClick "left",,, 1, 0, "D"  <em>; Die linke Maustaste gedrückt halten.</em>
    Loop
    {
        Sleep 10
        if !GetKeyState("NumpadAdd", "P")  <em>; Die Taste wurde losgelassen, also Schleife verlassen.</em>
            break
        <em>; ... fügen Sie hier beliebig andere Aktionen ein, die wiederholt werden sollen.</em>
    }
    MouseClick "left",,, 1, 0, "U"  <em>; Lässt die Maustaste los.</em>
}</pre>
</div>

<div class="ex" id="ExController">
<p><a class="ex_number" href="#ExController"></a> Macht das Verhalten einer Controller-Taste abhängig von der Achsenposition des Sticks.</p>
<pre>joy2::
{
    JoyX := GetKeyState("JoyX")
    if JoyX &gt; 75
        MsgBox "Aktion #1 (Taste gedrückt, während Stick nach rechts gedrückt wurde)."
    else if JoyX &lt; 25
        MsgBox "Aktion #2 (Taste gedrückt, während Stick nach links gedrückt wurde)."
    else
        MsgBox "Aktion #3 (Taste gedrückt, während Stick horizontal zentriert wurde)."
}</pre>
</div>

<p>Weitere Beispiele finden Sie unter <a href="../misc/RemapController.htm">Controller-Neubelegung</a> und <a href="../scripts/index.htm#ControllerMouse">Controller-Zu-Maus-Skript</a>.</p>

</body>
</html>

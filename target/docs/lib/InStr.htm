<!DOCTYPE HTML>
<html lang="de">
<head>
<title>InStr - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die InStr-Funktion sucht nach einem bestimmten Vorkommen einer Zeichenkette, beginnend von links oder rechts." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>InStr</h1>

<p>Sucht nach einem bestimmten Vorkommen einer Zeichenkette, beginnend von links oder rechts.</p>

<pre class="Syntax">FundPos := <span class="func">InStr</span>(Heuhaufen, Nadel <span class="optional">, GroßKleinSensitiv, StartPos, Vorkommen</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Heuhaufen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die durchsucht werden soll.</p>
  </dd>
  
  <dt>Nadel</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Die Zeichenkette, nach der gesucht werden soll.</p>
  </dd>
  
  <dt>GroßKleinSensitiv</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn weggelassen, wird standardmäßig 0 (false) verwendet. Andernfalls geben Sie einen der folgenden Werte an:</p>
    <p><code>"On"</code> oder <code>1</code> (<code>True</code>): Die Suche erfolgt Groß-/Kleinschreibung-sensitiv.</p>
    <p><code>"Off"</code> oder <code>0</code> (<code>False</code>): Die Großbuchstaben A bis Z und die entsprechenden Kleinbuchstaben werden als identisch betrachtet.</p>
    <p><code>"Locale"</code>: Die Suche erfolgt nicht Groß-/Kleinschreibung-sensitiv, gemäß den Regeln der aktuellen Sprach- und Regionseinstellungen des Benutzers. Zum Beispiel behandeln die meisten englischen und westeuropäischen Sprach- und Regionseinstellungen die Großbuchstaben A bis Z, einschließlich ASCII-fremde Großbuchstaben wie Ä und Ü, und die entsprechenden Kleinbuchstaben als identisch. <em>Locale</em> ist 1- bis 8-mal langsamer als <em>Off</em>, abhängig von den zu vergleichenden Zeichenketten.</p>
  </dd>

  <dt>StartPos</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird die gesamte Zeichenkette durchsucht. Andernfalls geben Sie die Position an, ab der die Suche begonnen werden soll, wobei 1 das erste Zeichen ist, 2 das zweite und so weiter. Negative Werte zählen ab dem Ende von <em>Heuhaufen</em>; also -1 ist das letzte Zeichen, -2 ist das vorletzte und so weiter.</p>
    <p>Wenn <em>Vorkommen</em> weggelassen wird, bewirkt eine negative <em>StartPos</em>, dass die Suche von rechts nach links durchgeführt wird. <em>StartPos</em> hat jedoch keinen Einfluss auf die Suchrichtung, wenn <em>Vorkommen</em> angegeben ist.</p>
    <p>Bei einer Rechts-nach-Links-Suche wird mit <em>StartPos</em> die Position des <em>letzten</em> Zeichens des ersten möglichen Vorkommens von <em>Nadel</em> angegeben. Zum Beispiel wird <code>InStr("abc", "bc",, 2, +1)</code> eine Übereinstimmung finden, <code>InStr("abc", "bc",, 2, -1)</code> jedoch nicht.</p>
    <p>Wenn der Absolutwert von <em>StartPos</em> größer als die Länge von <em>Heuhaufen</em> ist, wird eine 0 zurückgegeben.</p>
  </dd>

  <dt>Vorkommen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird standardmäßig die erste Übereinstimmung in <em>Heuhaufen</em> verwendet. Die Suche erfolgt von rechts nach links, wenn <em>StartPos</em> negativ ist, andernfalls von links nach rechts.</p>
    <p>Wenn <em>Vorkommen</em> positiv ist, wird die Suche immer von links nach rechts durchgeführt. Fügen Sie eine 2 in <em>Vorkommen</em> ein, um die Position der zweiten Übereinstimmung zurückzugeben, eine 3 für die dritte Übereinstimmung und so weiter.</p>
    <p>Wenn <em>Vorkommen</em> negativ ist, wird die Suche immer von rechts nach links durchgeführt. -2 beispielsweise sucht nach dem zweiten Vorkommen von rechts.</p>
  </dd>

  </dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Position der Zeichenkette <em>Nadel</em> zurück, die in der Zeichenkette <em>Heuhaufen</em> vorkommt. Position 1 ist das erste Zeichen, damit 0 als Synonym für False verwendet werden kann, was sich gut für "nicht gefunden" eignet.</p>
<p>Egal welche Werte man für <em>StartPos</em> oder <em>Vorkommen</em> verwendet - der Rückgabewert ist immer relativ zum ersten <em>Heuhaufen</em>-Zeichen. Zum Beispiel ist die Position von "abc" in "123abc789" immer 4.</p>
<p>Traditionsgemäß kann das Vorkommen einer leeren Zeichenkette (<code>""</code>) an jeder Position gefunden werden. Allerdings übergibt man normalerweise keine leere <em>Nadel</em>, daher wird sie als Fehler behandelt (es wird eine Ausnahme ausgelöst).</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Es wird in folgenden Fällen ein <a href="Error.htm#ValueError">ValueError</a> ausgelöst:</p>
<ul>
  <li><em>Nadel</em> ist eine leere (null-lange) Zeichenkette.</li>
  <li><em>GroßKleinSensitiv</em> ist ungültig.</li>
  <li><em>Vorkommen</em> oder <em>StartPos</em> ist 0 oder nicht-numerisch.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p><a href="RegExMatch.htm">RegExMatch</a> ist flexibler als InStr, wenn es darum geht, ein bestimmtes Suchmuster (regulärer Ausdruck) innerhalb einer Zeichenkette zu suchen. Zum Suchen einer einfachen Zeichenkette ist InStr besser geeignet.</p>
<p>InStr stoppt die Suche, sobald eine binäre Null (Null-Terminator) gefunden wird, während RegExMatch die komplette <a href="StrLen.htm">Länge</a> der Zeichenkette durchsucht, egal ob sie binäre Nullen enthält.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="RegExMatch.htm">RegExMatch</a>, <a href="Is.htm">Is-Funktionen</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExRetValue">
<p><a class="ex_number" href="#ExRetValue"></a> Meldet die 1-basierte Position der Teilzeichenkette "abc" in der Zeichenkette "123abc789".</p>
<pre>MsgBox InStr("123abc789", "abc") <em>; Gibt 4 zurück</em></pre>
</div>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Sucht die <var>Nadel</var> im <var>Heuhaufen</var>.</p>
<pre>Heuhaufen := "The Quick Brown Fox Jumps Over the Lazy Dog"
Nadel := "Fox"
If InStr(Heuhaufen, Nadel)
    MsgBox "Die Zeichenkette wurde gefunden."
Else
    MsgBox "Die Zeichenkette wurde nicht gefunden."</pre>
</div>

<div class="ex" id="ExCaseSens">
<p><a class="ex_number" href="#ExCaseSens"></a> Zeigt den Unterschied zwischen einer nicht-Groß-/Kleinschreibung-sensitiven und Groß-/Kleinschreibung-sensitiven Suche.</p>
<pre>Heuhaufen := "The Quick Brown Fox Jumps Over the Lazy Dog"
Nadel := "the"
MsgBox InStr(Heuhaufen, Nadel, false, 1, 2) <em>; nicht-Groß-/Kleinschreibung-sensitive Suche, Startposition des zweiten Vorkommens zurückgeben</em>
MsgBox InStr(Heuhaufen, Nadel, true) <em>; Groß-/Kleinschreibung-sensitive Suche, Startposition des ersten Vorkommens zurückgeben, gleiches Ergebnis wie oben</em>
</pre>
</div>

</body>
</html>

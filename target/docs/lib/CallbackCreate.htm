<!DOCTYPE HTML>
<html lang="de">
<head>
<title>CallbackCreate - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die CallbackCreate-Funktion erstellt eine Maschinencode-Adresse, die, wenn aufgerufen, den Aufruf an eine Funktion im Skript weiterleitet." />
<meta name="ahk:equiv-v1" content="lib/RegisterCallback.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>CallbackCreate</h1>

<p>Erstellt eine Maschinencode-Adresse, die, wenn aufgerufen, den Aufruf an eine <a href="../Functions.htm">Funktion</a> im Skript weiterleitet.</p>

<pre class="Syntax">Adresse := <span class="func">CallbackCreate</span>(Funktion <span class="optional">, Optionen, ParamAnzahl</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Funktion</dt>
  <dd>
    <p>Typ: <a href="../misc/Functor.htm">Funktionsobjekt</a></p>
    <p>Ein Funktionsobjekt, das automatisch jedes Mal aufgerufen werden soll, wenn <em>Adresse</em> aufgerufen wird. Die Funktion erhält auch die Parameter, die an <em>Adresse</em> übergeben wurden.</p>
    <p>Ein <a href="../Functions.htm#closures">Closure</a> oder <a href="../misc/Functor.htm#BoundFunc">Bound-Funktion</a> kann genutzt werden, um zwischen mehreren Callbacks zu unterscheiden, die alle die gleiche Skript-Funktion aufrufen.</p>
    <p>Das Callback reserviert für sich selbst eine Referenz zum Funktionsobjekt und gibt sie frei, wenn das Skript <a href="#CallbackFree">CallbackFree</a> aufruft.</p>
  </dd>

  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Geben Sie keine oder mehr der folgenden Wörter oder Zeichen an. Trennen Sie diese Optionen jeweils mit einem Leerzeichen (z.B. <code>"C Fast"</code>).</p>
    <p id="Fast"><strong>Fast</strong> oder <strong>F</strong>: Verhindert, dass bei jedem Aufruf von <em>Funktion</em> ein neuer <a href="../misc/Threads.htm">Thread</a> gestartet wird. Trotz der daraus resultierenden höheren Leistung sollte diese Option nicht verwendet werden, wenn der Thread, in dem <em>Adresse</em> aufgerufen wird, variiert (z. B. wenn das Callback durch eine eingehende Meldung ausgelöst wurde). Der Grund dafür ist, dass <em>Funktion</em> in der Lage sein wird, globale Einstellungen wie <a href="../Variables.htm#LastError">A_LastError</a> und das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> eines Threads zu ändern, der zum Zeitpunkt des Aufrufs aktiv war. Weitere Informationen finden Sie unter <a href="#Threads">Bemerkungen</a>.</p>
    <p><strong>CDecl</strong> oder <strong>C</strong>: Macht <em>Adresse</em> konform mit der "C"-Aufrufkonvention. Diese Option lässt man üblicherweise weg, weil die meisten Callbacks die Standardaufrufkonvention verwenden. 64-Bit-Versionen von AutoHotkey, die die x64-Aufrufkonvention verwenden, ignorieren diese Option.</p>
    <p><strong>&amp;</strong>: Bewirkt, dass die Parameter nicht einzeln, sondern als Parameterliste in Form einer Adresse (ein einzelner Integer) an <em>Funktion</em> übergeben wird. Parameterwerte können mithilfe von <a href="NumGet.htm">NumGet</a> abgerufen werden. Wenn man die standardmäßige 32-Bit-Aufrufkonvention verwendet, muss <em>ParamAnzahl</em> die Größe der Parameterliste als DWORDs spezifizieren (die Anzahl der Bytes geteilt durch 4).</p>
  </dd>

  <dt>ParamAnzahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Anzahl der Parameter, die der Aufrufer von <em>Adresse</em> übergeben muss. Lässt man diesen Parameter weg, wird standardmäßig <a href="Func.htm#MinParams"><i>Funktion</i>.MinParam</a> verwendet, was üblicherweise der Anzahl von Pflichtparametern entspricht, die in der <a href="../Functions.htm#define">Definition</a> von <em>Funktion</em> angegeben sind. In beiden Fällen muss sichergestellt werden, dass der Aufrufer genau diese Anzahl von Parametern übergibt.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>CallbackCreate gibt eine Maschinencode-Adresse zurück. Diese Adresse wird üblicherweise via <a href="DllCall.htm">DllCall</a> an eine externe Funktion übergeben oder via <a href="NumPut.htm">NumPut</a> in eine Struktur geschrieben, kann aber auch direkt von DllCall aufgerufen werden. Übergibt man die Adresse an <a href="#CallbackFree">CallbackFree</a>, wird das Callback gelöscht.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Diese Funktion scheitert und löst eine Ausnahme unter folgenden Bedingungen aus:</p>
<ul>
  <li><em>Funktion</em> ist kein Objekt oder hat weder eine <code>MinParams</code>-Eigenschaft noch eine <code>Call</code>-Methode.</li>
  <li><em>Funktion</em> hat eine <code>MinParams</code>-Eigenschaft, die die Anzahl der vom Callback bereitgestellten Parameter überschreitet.</li>
  <li><em>ParamAnzahl</em> ist negativ.</li>
  <li><em>ParamAnzahl</em> wird weggelassen und: 1) <em>Funktion</em> hat keine <code>MinParams</code>-Eigenschaft; oder 2) die <code>&amp;</code>-Option wird in Verbindung mit der standardmäßigen 32-Bit-Aufrufkonvention genutzt.</li>
</ul>

<h2 id="The_Callback_Functions_Parameters">Die Parameter der Callback-Funktion</h2>
<p>Eine <a href="../Functions.htm">Funktion</a>, die einer Callback-Adresse zugewiesen wurde, kann bis zu 31 Parameter akzeptieren. <a href="../Functions.htm#optional">Optionale Parameter</a> sind erlaubt; dies ist nützlich, wenn die Funktion von mehr als einem Aufrufer aufgerufen wird.</p>
<p>Die korrekte Interpretation der Parameter erfordert ein gewisses Verständnis dafür, wie die x86-Aufrufkonventionen funktionieren. Da Autohotkey keine typisierten Parameter besitzt, wird davon ausgegangen, dass die Parameterliste des Callbacks aus Integern besteht und dass einige Neuinterpretationen gemacht werden müssen.</p>

<p><strong>AutoHotkey 32-Bit:</strong> Alle eingehenden Parameter sind vorzeichenlose 32-Bit-Integer. Kleinere Typen werden auf 32 Bit erweitert, während größere Typen in mehreren 32-Bit-Parametern aufgeteilt werden.</p>
<p>Wenn ein eingehender Parameter als vorzeichenfähiger Integer vorgesehen ist, können negative Zahlen mit einem der folgenden Beispiele offenbart werden:</p>
<pre><em>; Methode #1</em>
if (wParam &gt; 0x7FFFFFFF)
    wParam := -(~wParam) - 1

<em>; Methode #2: Verlässt sich auf die Tatsache, dass AutoHotkey von sich aus vorzeichenfähige 64-Bit-Integer verwendet.</em>
wParam := wParam &lt;&lt; 32 &gt;&gt; 32</pre>

<p><strong>AutoHotkey 64-Bit:</strong> Alle eingehenden Parameter sind vorzeichenfähige 64-Bit-Integer. AutoHotkey unterstützt von sich aus keine vorzeichenlose 64-Bit-Integers. Kleinere Typen werden auf 64 Bit erweitert, während größere Typen immer via Adresse übergeben werden.</p>

<p><strong>AutoHotkey 32-Bit/64-Bit:</strong> Wenn ein eingehender Parameter als 8-Bit- oder 16-Bit-Wert (oder 32-Bit in x64) vorgesehen ist, sind die höheren Bits des Wertes willkürlich gesetzt - um diese herauszufiltern, können Sie wie folgt das bitweise UND nutzen:</p>
<pre>Callback(UCharParam, UShortParam, UIntParam) {
    UCharParam &amp;= 0xFF
    UShortParam &amp;= 0xFFFF
    UIntParam &amp;= 0xFFFFFFFF
    <em>;...</em>
}</pre>
<p>Wenn ein eingehender Parameter von seinem Aufrufer als Zeichenkette vorgesehen ist, dann ist das, was tatsächlich ankommt, die Adresse der Zeichenkette. Mit <a href="StrGet.htm">StrGet</a> kann die Zeichenkette selbst abgerufen werden:</p>
<pre>MeineZkette := StrGet(MeinParameter)</pre>
<p>Wenn ein eingehender Parameter die Adresse einer Struktur ist, können die einzelnen Elemente durch Befolgen der Schritte in <a href="DllCall.htm#struct">DllCall-Strukturen</a> extrahiert werden.</p>

<p id="Indirect"><strong>Parameter via Adresse abrufen:</strong> Wenn die <code>&amp;</code>-Option genutzt wird, erhält die Funktion die <i>Adresse</i> des ersten Callback-Parameters. Zum Beispiel:</p>
<pre>
callback := CallbackCreate(DieFunk, "F&amp;", 3)  <em>; Größe der Parameterliste muss bei 32-Bit angegeben werden.</em>
DllCall(callback, "float", 10.5, "int64", 42)
DieFunk(params) {
    MsgBox <a href="NumGet.htm">NumGet</a>(params, 0, "float") ", " NumGet(params, A_PtrSize, "int64")
}</pre>
<p>Die meisten Callbacks in 32-Bit-Programmen verwenden die <em>stdcall</em>-Aufrufkonvention, die eine feste Anzahl von Parametern voraussetzt. In solchen Fällen muss <em>ParamAnzahl</em> auf die Größe der Parameterliste gesetzt werden, wobei Int64 und Double als zwei 32-Bit-Parameter zählen. Bei <em>Cdecl</em>- oder 64-Bit-Aufrufkonventionen hat <em>ParamAnzahl</em> keine Wirkung.</p>

<h2 id="What_the_Function_Should_Return">Was die Funktion per <em>Return</em> zurückgeben sollte</h2>
<p>Wenn die Funktion ein <a href="Return.htm">Return</a> ohne Parameter verwendet oder einen leeren Wert wie "" zurückgibt (oder überhaupt kein Return verwendet), wird 0 an den Aufrufer des Callbacks zurückgegeben. Ansonsten sollte die Funktion einen Integer zurückgeben, der dann an den Aufrufer zurückgegeben wird. AutoHotkey 32-Bit kürzt Rückgabewerte auf das 32-Bit-Format, während AutoHotkey 64-Bit Rückgabewerte im 64-Bit-Format unterstützt. Zurückgegebene Strukturen größer als diesen Wert werden nicht unterstützt.</p>

<h2 id="Threads">Fast vs. Slow</h2>
<p>Der Standard/Slow-Modus bewirkt, dass die Funktion vorerst die Standardwerte von Einstellungen wie <a href="SendMode.htm">SendMode</a> und <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> verwendet. Diese Standardwerte können während der <a href="../Scripts.htm#auto">Startphase des Skripts</a> geändert werden.</p>
<p>Der <a href="#Fast">Fast-Modus</a> hingegen erbt die globalen Einstellungen von einem <a href="../misc/Threads.htm">Thread</a>, der zum Zeitpunkt des Funktionsaufrufs aktiv war. Darüber hinaus werden jegliche Änderungen, die die Funktion an den globalen Einstellungen (einschließlich dem <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a>) vornimmt, für den <a href="../misc/Threads.htm">aktuellen Thread</a> wirksam. Demzufolge sollte der Fast-Modus nur verwendet werden, wenn genau bekannt ist, in welchem oder welchen Threads die Funktion aufgerufen wird.</p>
<p>Um zu verhindern, dass ein Callback sich selbst unterbricht (oder von einem anderen Thread unterbrochen wird), können Sie <a href="Critical.htm">Critical</a> in die erste Zeile einfügen. Allerdings ist diese Vorgehensweise nicht besonders effektiv, wenn die Funktion indirekt über eine eingehende Meldung kleiner als 0x0312 aufgerufen wird (das <a href="Critical.htm#Interval">Intervall</a> von Critical zu erhöhen könnte hierbei helfen). Darüber hinaus hindert <a href="Critical.htm">Critical</a> die Funktion nicht daran, etwas zu tun, das zum indirekten Selbstaufruf führen könnte, wie z. B. der Aufruf von <a href="SendMessage.htm">SendMessage</a> oder <a href="DllCall.htm">DllCall</a>.</p>

<h2 id="CallbackFree">CallbackFree</h2>
<p>Löscht ein Callback und gibt dessen Referenz zum Funktionsobjekt frei.</p>
<pre class="Syntax"><span class="func">CallbackFree</span>(Adresse)</pre>
<p>Jedes Mal, wenn CallbackCreate verwendet wird, wird eine kleine Menge an Speicher reserviert (32 oder 48 Bytes plus System-Overhead). Da das Betriebssystem diesen Speicher automatisch beim Beenden des Skripts freigibt, kann jedes Skript, das Speicher für eine kleine <em>feste</em> Anzahl von Callbacks reserviert hat, damit leben, den Speicher nicht explizit freigegeben zu haben.</p>
<p>Wenn das vom Callback gehaltene Funktionsobjekt jedoch dynamischer Natur ist (wie z. B. <a href="../Functions.htm#closures">Closure</a> oder <a href="../misc/Functor.htm#BoundFunc">Bound-Funktion</a>), kann die Freigabe des Callbacks besonders dann wichtig sein, wenn es nicht mehr benötigt wird; ansonsten wird das Funktionsobjekt nicht freigegeben.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="DllCall.htm">DllCall</a>, <a href="OnMessage.htm">OnMessage</a>, <a href="OnExit.htm">OnExit</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="Sort.htm#callback">Sort-Callback</a>, <a href="Critical.htm">Critical</a>, <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="../Functions.htm">Funktionen</a>, <a href="../misc/SendMessageList.htm">Liste mit Fenstermeldungen</a>, <a href="../misc/Threads.htm">Threads</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExWinList">
<p><a class="ex_number" href="#ExWinList"></a> Zeigt eine Zusammenfassung aller nicht-untergeordneten Fenster an.</p>
<pre>EnumAdresse := CallbackCreate(EnumWindowsProc, "Fast")  <em>; Fast-Modus ist okay, weil er nur von diesem Thread aufgerufen wird.</em>

DetectHiddenWindows True  <em>; Aufgrund des Fast-Modus wird diese Einstellung auch für Callback wirksam.</em>

<em>; Übergibt die Kontrolle an EnumWindows(), das Callback wiederholt aufruft:</em>
DllCall("EnumWindows", "Ptr", EnumAdresse, "Ptr", 0)
MsgBox Ausgabe  <em>; Zeigt die gesammelten Informationen von Callback an.</em>
    
EnumWindowsProc(hwnd, lParam)
{
    global Ausgabe
    Titel := WinGetTitle(hwnd)
    Klasse := WinGetClass(hwnd)
    if Titel
        Ausgabe .= "HWND: " hwnd "`tTitel: " Titel "`tKlasse: " Klasse "`n"
    return true  <em>; Setzt EnumWindows() fort, bis alle Fenster abgearbeitet wurden.</em>
}</pre>
</div>

<div class="ex" id="ExSubclassGUI">
<p><a class="ex_number" href="#ExSubclassGUI"></a> Demonstriert, wie ein GUI-Fenster zu einer Unterklasse gemacht werden kann, wenn man dessen WindowProc an einen neuen WindowProc weiterleitet. In diesem Fall wird die Hintergrundfarbe des Text-Steuerelements auf eine benutzerdefinierte Farbe gesetzt.</p>
<pre>TextHintergrundFarbe := 0xFFBBBB  <em>; Eine benutzerdefinierte Farbe im BGR-Format.</em>
TextHintergrundPinsel := DllCall("CreateSolidBrush", "UInt", TextHintergrundFarbe)

MeineGui := Gui()
Text := MeineGui.Add("Text",, "Hier ein Text mit einer`nbenutzerdefinierter Hintergrundfarbe.")

<em>; 64-Bit-Skripte müssen SetWindowLongPtr statt SetWindowLong aufrufen:</em>
SetWindowLong := A_PtrSize=8 ? "SetWindowLongPtr" : "SetWindowLong"

WindowProcNeu := CallbackCreate(WindowProc)  <em>; Vermeide den Fast-Modus beim Setzen der Unterklasse.</em>
WindowProcAlt := DllCall(SetWindowLong, "Ptr", MeineGui.Hwnd, "Int", -4  <em>; -4 ist GWL_WNDPROC</em>
    , "Ptr", WindowProcNeu, "Ptr") <em>; Rückgabewert muss auf "Ptr" oder "UPtr" statt auf "Int" gesetzt werden.</em>

MeineGui.Show

WindowProc(hwnd, uMsg, wParam, lParam)
{
    Critical
    if (uMsg = 0x0138 &amp;&amp; lParam = Text.Hwnd)  <em>; 0x0138 ist WM_CTLCOLORSTATIC.</em>
    {
        DllCall("SetBkColor", "Ptr", wParam, "UInt", TextHintergrundFarbe)
        return TextHintergrundPinsel  <em>; Gibt HBRUSH zurück, um dem OS mitzuteilen, dass wir HDC geändert haben.</em>
    }
    <em>; Ansonsten (da oben nichts zurückgegeben wurde) werden alle unbehandelten Ereignisse an das originale WindowProc übergeben.</em>
    return DllCall("CallWindowProc", "Ptr", WindowProcAlt, "Ptr", hwnd, "UInt", uMsg, "Ptr", wParam, "Ptr", lParam)
}</pre>

</div>
</body>
</html>

<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Scripts - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie mehr über Skripte im Allgemeinen, das Aufteilen langer Zeilen, das Kompilieren eines Skripts, das Übergeben von Befehlszeilenparametern, die Codepage und das Debuggen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Skripte</h1>
<p>Verwandte Themen:</p>
<ul>
  <li><a href="Program.htm">Verwendung des Programms</a>: Wie man AutoHotkey grundsätzlich benutzt.</li>
  <li><a href="Concepts.htm">Konzepte und Konventionen</a>: Allgemeine Erklärung der verschiedenen Konzepte, auf denen AutoHotkey basiert.</li>
  <li><a href="Language.htm">Skriptsprache</a>: Spezifische Details zur Syntax (wie man Skripte schreibt).</li>
</ul>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#auto">Startphase des Skripts (der Auto-Execute-Thread)</a>: Unmittelbar nach dem Start des Skripts Aktionen durchführen und Standardeinstellungen ändern.</li>
  <li><a href="#continuation">Eine lange Zeile in mehrere kurze Zeilen aufteilen</a>: Dies kann zur besseren Lesbarkeit und Wartbarkeit des Skripts beitragen.</li>
  <li><a href="#lib">Skriptbibliotheksordner</a></li>
  <li><a href="#ahk2exe">Ein Skript in eine EXE-Datei umwandeln (Ahk2Exe)</a>: Ein .ahk-Skript in eine .exe-Datei umwandeln, die auf jedem PC ausgeführt werden kann.</li>
  <li><a href="#cmd">Befehlszeilenparameter an ein Skript übergeben</a>: Die Variable A_Args enthält die eingehenden Parameter.</li>
  <li><a href="#cp">Skriptdatei-Codepage</a>: Sichere Verwendung von ASCII-fremde Zeichen in Skripten.</li>
  <li><a href="#debug">Ein Skript debuggen</a>: Wie man Fehler in einem Skript findet, das sich falsch verhält.</li>
</ul>
<h2 id="intro">Einführung</h2>
<p>Jedes Skript ist eine reine Textdatei mit mehreren Zeilen, die das Programm (AutoHotkey.exe) ausführen soll. Solche Skripte können <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten oder nur aus diesen bestehen. Falls keine Hotkeys und Hotstrings vorhanden sind, wird ein Skript, sobald es gestartet wird, seine Funktionen von oben nach unten und der Reihe nach ausführen.</p>
<p>Das Programm lädt das Skript zeilenweise in den Speicher. Während des Ladevorgangs wird das Skript <a href="misc/Performance.htm">optimiert</a> und auf seine Gültigkeit überprüft. Stößt das Programm auf einen Syntaxfehler, wird dieser angezeigt. Solche Fehler müssen korrigiert werden, bevor das Skript ausgeführt werden kann.</p>

<h2 id="auto">Startphase des Skripts (der Auto-Execute-Thread)</h2>
<p>Nachdem das Skript geladen wurde, beginnt der <em>Auto-Execute-Thread</em> die Ausführung bei der Zeile ganz oben im Skript, bis ihm befohlen wird, zu stoppen, z.B. via <a href="lib/Return.htm">Return</a>, <a href="lib/ExitApp.htm">ExitApp</a> oder <a href="lib/Exit.htm">Exit</a>. Das physische Ende des Skripts fungiert auch als <a href="lib/Exit.htm">Exit</a>.</p>
<p id="persistent">Das Skript wird nach Abschluss der Startphase automatisch terminiert, wenn es keine <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, sichtbare <a href="lib/Gui.htm">GUIs</a>, aktive <a href="lib/SetTimer.htm">Timer</a>, <a href="lib/OnClipboardChange.htm">Überwachungen der Zwischenablage</a> und <a href="lib/InputHook.htm">InputHooks</a> hat und die <a href="lib/Persistent.htm">Persistent</a>-Funktion nicht aufgerufen hat. Andernfalls läuft das Skript im Leerlauf weiter, wo es nur noch auf Ereignisse wie Hotkeys, Hotstrings, <a href="lib/GuiOnEvent.htm">GUI-Ereignisse</a>, <a href="lib/Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="lib/SetTimer.htm">Timer</a> reagieren kann. Ändern sich diese Bedingungen nach Abschluss der Startphase des Skripts (zum Beispiel beim Deaktivieren des letzten Timers), könnte sich das Skript schließen, sobald der letzte laufende Thread endet oder das letzte GUI-Fenster geschlossen wird.</p>
<p>Jedes Mal, wenn ein neuer <a href="misc/Threads.htm">Thread</a> gestartet wird (sei es via <a href="Hotkeys.htm">Hotkey</a>, <a href="Hotstrings.htm">Hotstring</a>, <a href="lib/SetTimer.htm">Timer</a> oder aufgrund eines anderen Ereignisses), werden die folgenden Einstellungen aus dem Auto-Execute-Thread kopiert. Wenn diese nicht via Auto-Execute-Thread gesetzt sind, werden die vordefinierten Standardwerte verwendet (welche das sind, finden Sie auf den folgenden Seiten): <a href="lib/CoordMode.htm">CoordMode</a>, <a href="lib/Critical.htm">Critical</a>, <a href="lib/DetectHiddenText.htm">DetectHiddenText</a>, <a href="lib/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="lib/FileEncoding.htm">FileEncoding</a>, <a href="lib/ListLines.htm">ListLines</a>, <a href="lib/SendLevel.htm">SendLevel</a>, <a href="lib/SendMode.htm">SendMode</a>, <a href="lib/SetControlDelay.htm">SetControlDelay</a>, <a href="lib/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="lib/SetKeyDelay.htm">SetKeyDelay</a>, <a href="lib/SetMouseDelay.htm">SetMouseDelay</a>, <a href="lib/SetRegView.htm">SetRegView</a>, <a href="lib/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>, <a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="lib/SetWinDelay.htm">SetWinDelay</a>, und <a href="lib/Thread.htm">Thread</a>.</p>
<p>Jedem <a href="misc/Threads.htm">Thread</a> ist eine eigene Sammlung von den oben genannten Einstellungen zugewiesen; das Ändern dieser Einstellungen hat keinen Einfluss auf andere Threads.</p>
<p>Die "Standardeinstellung" für eine der oben genannten Funktionen bezieht sich in der Regel auf die aktuelle Einstellung des Auto-Execute-Threads, die vorerst mit der programmdefinierten Standardeinstellung übereinstimmt.</p>
<p>Traditionell wird der Anfang des Skripts als <em>automatischer Ausführungsbereich</em> bezeichnet. Der Auto-Execute-Thread ist hingegen nicht nur auf den Anfang des Skripts beschränkt. Alle Funktionen, die im Auto-Execute-Thread aufgerufen werden, können auch Einfluss auf die Standardeinstellungen haben. Da Direktiven und Funktions-, Hotkey-, Hotstring- und Klassendefinitionen bei der Ausführung übersprungen werden, ist es möglich, Code für die Startphase in jeder Datei zu platzieren. Zum Beispiel könnte man eine globale Variable, die von einer Gruppe von Hotkeys verwendet wird, oberhalb (oder sogar unterhalb) dieser Hotkeys initialisieren, anstatt sie am Anfang des Skripts zu platzieren.</p>

<h2 id="continuation">Eine lange Zeile in mehrere kurze Zeilen aufteilen</h2>
<p>Lange Zeilen können in mehrere kurze Zeilen aufgeteilt werden, um die Lesbarkeit und Wartbarkeit des Skripts zu verbessern. Dies hat keinen negativen Einfluss auf die Ausführungsgeschwindigkeit des Skripts, da solche Zeilen bereits beim Start des Skripts im Speicher zusammengeführt werden.</p>
<p>Es gibt drei Methoden, die in der Regel kombiniert eingesetzt werden können:</p>
<ul>
  <li><a href="#continuation-line">Fortsetzungsoperator</a>: Beginnen oder enden Sie eine Zeile mit einem Ausdrucksoperator, um sie mit der vorherigen bzw. nächsten Zeile zu verbinden.</li>
  <li><a href="#continuation-expr">Fortsetzung durch Umschließen</a>: Ein Teilausdruck, der mit (), [] oder {} umschlossen ist, kann in den meisten Fällen automatisch mehrere Zeilen umspannen.</li>
  <li><a href="#continuation-section">Fortsetzungsbereich</a>: Markieren Sie eine Gruppe von Zeilen, die zusammengeführt werden sollen, inklusive Optionen, wie z.B. welcher Text (oder Code) zwischen den Zeilen eingefügt werden soll.</li>
</ul>
<p id="continuation-line"><strong>Fortsetzungsoperator:</strong> Eine Zeile, die mit einem Komma oder mit einem beliebigen <a href="Variables.htm#Operators">Ausdrucksoperator</a> (außer ++ und --) beginnt, wird automatisch mit der darüber liegenden Zeile zusammengeführt. Analog dazu wird eine Zeile, die mit einem Ausdrucksoperator endet, automatisch mit der darunter liegenden Zeile zusammengeführt. Im folgenden Beispiel wird die zweite Zeile an die erste angefügt, da sie mit einem Komma beginnt:</p>
<pre>FileAppend "Das ist der Text, der angefügt wird.`n"   <em>; Kommentar hier möglich.</em>
    <strong>,</strong> A_ProgramFiles "\BeliebigeAnwendung\Log-Datei.txt"  <em>; Kommentar.</em></pre>
<p>Ebenso werden die Zeilen im nächsten Beispiel zu einer einzelnen Zeile zusammengeführt, da die letzten beiden mit "and" oder "or" beginnen:</p>
<pre>if Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau"   <em>; Kommentar.</em>
    <strong>or</strong> Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß"   <em>; Kommentar.</em>
    <strong>and</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
<p>Der <a href="Variables.htm#ternary">ternäre Operator</a> ist ebenfalls ein guter Kandidat:</p>
<pre>ProduktIstVerfügbar := (Farbe = "Rot")
    <strong>?</strong> false  <em>; Rote Produkte sind nicht verfügbar, daher ist der folgende Funktionsaufruf irrelevant.</em>
    <strong>:</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Die folgenden Beispiele sind äquivalent zu den oben genannten:</p>
<pre>FileAppend "Das ist der Text, der angefügt wird.`n"<strong>,</strong>   <em>; Kommentar hier möglich.</em>
    A_ProgramFiles "\BeliebigeAnwendung\Log-Datei.txt"  <em>; Kommentar.</em>

if Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau" <strong>or</strong>   <em>; Kommentar.</em>
    Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß") <strong>and</strong>   <em>; Kommentar.</em>
    ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em>

ProduktIstVerfügbar := (Farbe = "Rot") <strong>?</strong>
    false <strong>:</strong> <em>; Rote Produkte sind nicht verfügbar, daher ist der folgende Funktionsaufruf irrelevant.</em>
    ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Obwohl die Einrückungen in den obigen Beispielen optional sind, können sie die Lesbarkeit verbessern, da sie die Zusammengehörigkeit der Zeilen verdeutlichen. In den Beispielen oben können leere Zeilen oder <a href="Language.htm#comments">Kommentare</a> zwischen oder am Ende jeder Zeile eingefügt werden.</p>
<p>Ein Fortsetzungsoperator kann nicht mit einem automatisch-ersetzenden Hotstring oder einer Direktive außer <a href="lib/_HotIf.htm">#HotIf</a> verwendet werden.</p>
<p id="continuation-expr"><strong>Fortsetzung durch Umschließen:</strong> Enthält eine Zeile einen Ausdruck oder eine Funktions-/Eigenschaftsdefinition mit einer nicht geschlossenen Klammer <code>(</code>/<code>[</code>/<code>{</code>, wird sie mit nachfolgenden Zeilen verbunden, bis sich die Anzahl der Start- und Endklammern ausgleicht. Das heißt, dass ein Teilausdruck, der mit runden, eckigen oder geschweiften Klammern umschlossen ist, in den meisten Fällen automatisch mehrere Zeilen umspannen kann. Zum Beispiel:</p>
<pre>
meinArray := [
  "Element 1",
  "Element 2",
]
MsgBox(
    "Der Wert von Element 2 ist " meinArray[2],
    "Titel",
    "ok iconi"
    )
</pre>
<p>Fortsetzungsausdrücke können beide Arten von <a href="Language.htm#comments">Kommentaren</a> enthalten.</p>
<p>Fortsetzungsausdrücke können normale <a href="#continuation-section">Fortsetzungsbereiche</a> enthalten. Wenn also, wie bei jeder Zeile mit einem Ausdruck, eine Zeile mit einer runden Startklammer (<code>(</code>) beginnt, die nicht mit einem Escapezeichen versehen ist, wird sie als Anfang eines Fortsetzungsbereichs betrachtet, sofern auf derselben Zeile keine runde Endklammer (<code>)</code>) erfolgt.</p>
<p>Mit dieser Methode allein ist es nicht möglich, in Anführungszeichen gesetzte Zeichenketten auf mehrere Zeilen zu strecken. Allerdings siehe oben.</p>
<p>Fortsetzung durch Umschließen kann mit einem Fortsetzungsoperator kombiniert werden. Zum Beispiel:</p>
<pre>meinArray :=  <em>; Der Zuweisungsoperator bewirkt eine Fortsetzung.</em>
[  <em>; Klammern umschließen die folgenden zwei Zeilen.</em>
  "Element 1",
  "Element 2",
]</pre>
<p>Eine geschweifte Klammer (<code>{</code>) am Ende einer Zeile bewirkt keine Fortsetzung, wenn das Programm feststellt, dass sie als Anfang eines Blocks (<a href="lib/Block.htm#otb">OTB-Style</a>) und nicht als Anfang eines <a href="Language.htm#object-literal">direkt geschriebenen Objekts</a> interpretiert werden soll. Im Einzelnen (in absteigender Prioritätsreihenfolge):</p>
<ul>
  <li>Eine geschweifte Klammer wird niemals als Anfang eines Blocks interpretiert, wenn sie eine nicht geschlossene Klammer <code>(</code>/<code>[</code>/<code>{</code> davor hat, da dies zu einem ungültigen Ausdruck führen würde. Zum Beispiel wäre die geschweifte Klammer in <code>If ({</code> der Beginn eines direkt geschriebenen Objekts.</li>
  <li>Es ist nicht erlaubt, nach den Klammern <code>)</code> oder <code>]</code> ein direkt geschriebenes Objekt zu beginnen. Wenn also die geschweifte Klammer nach diesen Symbolen erfolgt (ohne Leerraumzeichen), wird sie als Anfang eines Blocks interpretiert (z.B. für eine Funktions- oder Eigenschaftsdefinition).</li>
  <li>Bei <a href="Language.htm#control-flow">Kontrollanweisungen</a>, die einen Körper benötigen (und daher OTB unterstützen), kann die geschweifte Klammer nur dann der Anfang eines direkt geschriebenen Objekts sein, wenn sie ein Operator davor hat, wie z.B. <code>:= {</code> oder <code>for x <strong>in</strong> {</code>. Das heißt im Endeffekt, dass die geschweifte Klammer in <code>Loop {</code> immer einen Block beginnen würde und <code>If {</code> und <code>While {</code> immer falsch wären.</li>
</ul>
<p>Eine geschweifte Klammer kann ohne Probleme verwendet werden, um Funktionsaufrufe, Ausdrücke oder Kontrollanweisungen, die keinen Körper benötigen, auf der nächsten Zeile fortzusetzen. Zum Beispiel:</p>
<pre>meineFn() {
    return {
        key: "wert"
    }
}</pre>
<p id="continuation-section"><strong>Fortsetzungsbereich:</strong> Diese Methode sollte verwendet werden, wenn sehr viele Zeilen zusammengeführt werden müssen oder wenn die Zeilen nicht für die anderen Methoden geeignet sind. Diese Methode kann sowohl bei <a href="Hotstrings.htm">automatisch-ersetzenden Hotstrings</a> als auch bei beliebigen <a href="Variables.htm#Expressions">Ausdrücken</a> angewendet werden. Zum Beispiel:</p>
<pre><em>; BEISPIEL #1:</em>
Var := "
(
Eine Textzeile.
Standardmäßig wird das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile gespeichert.
	Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch gespeichert.
Zusätzlich werden "Anführungszeichen" bei Bedarf <a href="#continuation_quotes">automatisch mit einem Escapezeichen versehen</a>.
)"

<em>; BEISPIEL #2:</em>
FileAppend "
(
Zeile 1 des Textes.
Zeile 2 des Textes. Standardmäßig ist ein LF-Zeichen (`n) zwischen den Zeilen.
)", A_Desktop "\Meine Datei.txt"</pre>
<p>In den obigen Beispielen sind mehrere Zeilen in runde Klammern eingeschlossen. Dies nennt sich <em>Fortsetzungsbereich</em>. Beachten Sie, dass jeglicher Code nach der runden Endklammer auch mit den anderen Zeilen verbunden ist (ohne Trennzeichen), allerdings sind die Start- und Endklammern nicht enthalten.</p>
<p>Wenn die Zeile über dem Fortsetzungsbereich mit einem <a href="Concepts.htm#names">Namenszeichen</a> endet und der Bereich nicht innerhalb eines Anführungszeichens beginnt, wird automatisch ein einzelnes Leerzeichen eingefügt, um den Namen vom Inhalt des Fortsetzungsbereichs zu trennen.</p>
<p id="continuation_quotes">Anführungszeichen werden automatisch mit einem Escapezeichen versehen (also als direkt geschriebene Zeichen interpretiert), wenn der Fortsetzungsbereich innerhalb einer in Anführungszeichen gesetzte Zeichenkette beginnt, wie in den Beispielen oben. Andernfalls verhalten sich Anführungszeichen wie gewohnt, d.h. Fortsetzungsbereiche können Ausdrücke mit in Anführungszeichen gesetzte Zeichenketten enthalten.</p>
<p id="continuation_defaults">Standardmäßig werden Leer- und Tabulatorzeichen am Anfang weggelassen, abhängig von der Einrückung der ersten Zeile innerhalb des Fortsetzungsbereiches. Enthält die erste Zeile eine Mischung aus Leer- und Tabulatorzeichen, wird nur der erste Zeichentyp als Einrückung behandelt. Wenn jede Zeile weniger eingerückt ist als die erste Zeile oder mit den falschen Zeichen eingerückt ist, werden alle Leerraumzeichen am Anfang auf dieser Zeile beibehalten. </p>
<p>Das Standardverhalten eines Fortsetzungsbereichs kann überschrieben werden, indem eine oder mehrere der folgenden Optionen rechts von der runden Startklammer eingefügt werden. Mehrere Optionen müssen mit Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>( LTrim Join|</code>.</p>
<p id="Join"><strong>Join</strong><em>Zkette</em>: Gibt an, wie die Zeilen verbunden werden sollen. Wenn diese Option nicht verwendet wird, endet jede Zeile außer der letzten mit einem LF-Zeichen (`n). Wenn <em>Zkette</em> weggelassen wird, werden die Zeilen direkt miteinander verbunden, ohne Zeichen dazwischen. Andernfalls geben Sie für <em>Zkette</em> eine Zeichenkette von bis zu 15 Zeichen an. Zum Beispiel bewirkt <code>Join`s</code>, dass nach jeder Zeile außer der letzten ein Leerzeichen eingefügt wird. Weitere Beispiele sind <code>Join`r`n</code>, das ein CR-LF-Paar zwischen den Zeilen einfügt, und <code>Join|</code>, das einen Vertikalstrich zwischen den Zeilen einfügt. Um die letzte Zeile des Fortsetzungsbereichs ebenfalls mit <em>Zkette</em> enden zu lassen, fügen Sie direkt über der runden Endklammer des Bereichs eine Leerzeile ein.</p>
<p id="LTrim"><strong>LTrim:</strong> Entfernt alle Leer- und Tabulatorzeichen am Anfang jeder Zeile. Dies ist normalerweise aufgrund des <a href="#continuation_defaults">"intelligenten" Standardverhaltens</a> nicht notwendig.</p>
<p id="LTrim0"><strong>LTrim0</strong> (LTrim und eine 0): Verhindert, dass Leer- und Tabulatorzeichen am Anfang jeder Zeile automatisch entfernt werden.</p>
<p id="RTrim0"><strong>RTrim0</strong> (RTrim gefolgt von 0): Verhindert das automatische Entfernen von Leer- und Tabulatorzeichen am Ende jeder Zeile.</p>
<p id="CommentOption"><strong>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>): Ermöglicht <a href="Language.htm#comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht <code>/*..*/</code>). Solche Kommentare (sowie links stehende Leer- und Tabulatorzeichen) werden im zusammengefügten Ergebnis entfernt, anstatt als direkt geschriebener Text behandelt zu werden. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile stehen.</p>
<p id="accent"><strong>`</strong> (Akzent/umgekehrtes Häkchen): Behandelt jedes umgekehrte Häkchen als direkt geschriebenen Text, nicht als <a href="misc/EscapeChar.htm">Escapezeichen</a>. Dies verhindert auch die Übersetzung von explizit angegebenen Escapesequenzen wie <code>`r</code> und <code>`t</code>.</p>
<p id="non-continuation"><strong>(</strong> oder <strong>)</strong>: Eine runde Start- oder Endklammer auf der rechten Seite der initialen runden Startklammer (außer als Parameter der <a href="#Join">Join</a>-Option) bewirkt, dass die Zeile nicht als Beginn eines Fortsetzungsbereichs, sondern als Ausdruck interpretiert wird. Dadurch können Ausdrücke wie <code>(x.y)[z]()</code> am Anfang einer Zeile verwendet werden und <a href="#continuation-expr">mehrzeilige Ausdrücke</a> mit einer Zeile wie <code>((</code> oder <code>(MeineFunk(</code> beginnen.</p>

<h3 id="continuation-remarks">Bemerkungen</h3>
<p><a href="misc/EscapeChar.htm">Escapesequenzen</a> wie `n (LF) und `t (Tabulator) werden innerhalb des Fortsetzungsbereichs unterstützt, es sei denn, die <a href="#accent">Akzent-Option (`)</a> wird verwendet.</p>
<p>Wenn die <a href="#CommentOption">Comment-Option</a> fehlt, werden Semikolon- und /*..*/-Kommentare innerhalb eines Fortsetzungsbereichs nicht unterstützt, da diese als direkt geschriebener Text gesehen werden. Allerdings können Kommentare auf der untersten und obersten Zeile des Bereichs eingefügt werden. Zum Beispiel:</p>
<pre>FileAppend "   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
    &nbsp;; Dies ist <strong>kein</strong> Kommentar; es ist direkt geschriebener Text. Fügen Sie das Wort <i>Comments</i> in die Zeile darüber ein, um es zu einem Kommentar zu machen.
)", "C:\Datei.txt"   <em>; Kommentar.</em></pre>
<p>Infolgedessen müssen Semikolons innerhalb eines Fortsetzungsbereichs nie mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden.</p>
<p>Da eine runde Endklammer das Ende eines Fortsetzungsbereichs markiert, muss eine direkt geschriebene runde Endklammer am Zeilenanfang mit einem Escapezeichen (Akzent/umgekehrtes Häkchen) versehen werden: <code>`)</code>. Dies kann jedoch nicht mit der <a href="#accent">Akzent-Option (`)</a> kombiniert werden.</p>
<p>Unmittelbar nach einem Fortsetzungsbereich kann eine Zeile angegeben werden, die die runde Startklammer eines weiteren Fortsetzungsbereichs enthält. Auf diese Weise können verschiedene Optionen beim Zusammenbau einer einzelnen Zeile angewendet werden.</p>
<p>Die stückweise Konstruktion eines Fortsetzungsbereichs via <a href="lib/_Include.htm">#Include</a> wird nicht unterstützt.</p>

<h2 id="lib">Skriptbibliotheksordner</h2>
<p>Die Bibliotheksordner sind vordefinierte Standorte für gemeinsam verwendete Skripte, die von anderen Skripten mit Hilfe von <a href="lib/_Include.htm">#Include</a> verwendet werden können. Ein Bibliotheksskript enthält typischerweise eine Funktion oder Klasse, die für die Verwendung und Wiederverwendung konzipiert ist. Das Platzieren von Bibliotheksskripten an einen dieser Standorte erleichtert das Schreiben von Skripten, die mit anderen gemeinsam verwendet werden können und über mehrere Konfigurationen hinweg funktionieren. Die Standorte für Bibliotheken sind:</p>
<pre><a href="Variables.htm#ScriptDir">A_ScriptDir</a> "\Lib\"  <em>; Lokale Bibliothek.</em>
<a href="Variables.htm#MyDocuments">A_MyDocuments</a> "\AutoHotkey\Lib\"  <em>; Benutzerbibliothek.</em>
"Verzeichnis-der-aktuell-laufenden-AutoHotkey.exe\Lib\"  <em>; Standardbibliothek.</em></pre>
<p>Die Bibliotheksordner werden in der oben gezeigten Reihenfolge durchsucht.</p>
<p>Wenn ein Skript beispielsweise die Zeile <code>#Include &lt;MeineBibl&gt;</code> enthält, sucht das Programm nach einer Datei namens "MeineBibl.ahk" in der lokalen Bibliothek. Wenn sie dort nicht ist, wird die Benutzerbibliothek und dann die Standardbibliothek durchsucht. Wenn sie dort auch nicht gefunden wurde und enthält der Name der Bibliothek einen Unterstrich (z.B. <code>MeinPräfix_MeineFunk</code>), wird das Programm die Suche wiederholen, aber nur mit dem Präfix (z.B. <code>MeinPräfix.ahk</code>).</p>
<p>Obwohl eine Bibliotheksdatei gemäß Konvention grundsätzlich nur eine einzelne Funktion oder Klasse mit demselben Namen wie die Datei enthält, kann sie auch private Funktionen enthalten, die nur von ihr aufgerufen werden. Allerdings sollten solche Funktionen eindeutige Namen haben, da sie sich im globalen Namensraum befinden, d.h. sie können von überall im Skript aufgerufen werden.</p>

<h2 id="ahk2exe">Ein Skript in eine EXE-Datei umwandeln (Ahk2Exe)</h2>
<p>Im Lieferumfang des Programms ist ein Skriptcompiler enthalten (von fincs bereitgestellt und von TAC109 um Features erweitert).</p>
<p>Ein kompiliertes Skript ist eine eigenständige EXE-Datei, d.h. das Skript kann ohne AutoHotkey.exe gestartet werden. Der Kompiliervorgang erstellt eine EXE-Datei und fügt ihr Folgendes hinzu: der AutoHotkey-Interpreter, das Skript, via <a href="lib/_Include.htm">#Include</a> definierte Dateien und via <a href="lib/FileInstall.htm">FileInstall</a> definierte Dateien. Zusätzliche Dateien können mittels <a href="misc/Ahk2ExeDirectives.htm">Compilerdirektiven</a> inkludiert werden.</p>
<p>Für v1.1- und v2-Skripte wird derselbe Compiler verwendet. Der Compiler unterscheidet Skriptversionen durch Überprüfung der Hauptversion der bereitgestellten Basisdatei.</p>
<h3 id="ahk2exe-toc">Compilerthemen</h3>
<ul>
  <li><a href="#ahk2exe-run">Compiler ausführen</a></li>
  <li><a href="#ahk2exe-base">Ausführbare Basisdatei</a></li>
  <li><a href="#CompilerDirectives">Skriptcompilerdirektiven</a></li>
  <li><a href="#mpress">Kompilierte Skripte komprimieren</a></li>
  <li><a href="#information">Hintergrundinformationen</a></li>
</ul>
<h3 id="ahk2exe-run">Compiler ausführen</h3>
<p>Ahk2Exe kann auf folgende Arten verwendet werden:</p>
<ul>
  <li>
    <p><strong>GUI-Schnittstelle:</strong> Starten Sie die Verknüpfung "Convert .ahk to .exe" im Startmenü. (Nach dem Aufruf der GUI kann es zu einer Verzögerung kommen, bis das Fenster angezeigt wird; weitere Details finden Sie unter <a href="#information">Hintergrundinformationen</a>.)</p>
  </li>
  <li>
    <p><strong>Rechtsklick:</strong> Rechtsklicken Sie in einem Explorer-Fenster auf eine .ahk-Datei und wählen Sie "Compile Script" aus (nur verfügbar, wenn die Option "Script Compiler" bei der Installation von AutoHotkey ausgewählt wurde). Nach einer kurzen Zeit wird im Verzeichnis des Skripts eine gleichnamige EXE-Datei erstellt. Hinweis: Die Erstellung der EXE-Datei erfolgt mit den Einstellungen (Symbol, .bin-Datei, <a href="#mpress">Komprimierung</a>), die zuletzt in Methode #1 oben gespeichert wurden, oder wie im Skript per <a href="misc/Ahk2ExeDirectives.htm">Compilerdirektive</a> angegeben.</p>
  </li>
  <li id="ahk2exeCmd">
    <p><strong>Befehlszeile:</strong> Der Compiler kann über die Befehlszeile mit den unten aufgeführten Parametern gestartet werden. Jeder Befehlszeilenparameter außer <code class="no-highlight">/gui</code> bewirkt, dass das Skript sofort kompiliert wird. Alle Parameter sind optional, außer <code class="no-highlight">/gui</code> und <code class="no-highlight">/in</code>.</p>
    <style>
      #param_pairs td:not(:last-child) {
        white-space: nowrap;
      }
    </style>
    <table class="info" id="param_pairs">
      <tr>
        <th abbr="Param">Parameterpaar</th>
        <th>Bedeutung</th>
      </tr>
      <tr id="SlashIn">
        <td>/in <i>Skriptname</i></td>
        <td>Der Pfad und Name des Skripts, das kompiliert werden soll. Dies muss angegeben werden, sobald mindestens einer der anderen Parameter verwendet wird, es sei denn, es wird <code class="no-highlight">/gui</code> verwendet.</td>
      </tr>
      <tr id="SlashOut">
        <td>/out <i>EXE_Name</i></td>
        <td>Der Pfad\Name der EXE-Datei, die erstellt werden soll. Standardmäßig wird das Verzeichnis und der Basisname der Eingabedatei, plus ".exe" als Dateiendung, oder eine entsprechende <a href="misc/Ahk2ExeDirectives.htm">Compilerdirektive</a> im Skript verwendet.</td>
      </tr>
      <tr id="slashIcon">
        <td>/icon <i>Symbolname</i></td>
        <td>Die zu verwendende Symboldatei. Standardmäßig wird das zuletzt in der GUI-Oberfläche gespeicherte Symbol oder eine <a href="misc/Ahk2ExeDirectives.htm#SetMainIcon">SetMainIcon</a>-Compilerdirektive im Skript verwendet.</td>
      </tr>
      <tr id="SlashBase">
        <td>/base <i>Dateiname</i></td>
        <td>Die zu verwendende Basisdatei (eine BIN- oder EXE-Datei). Die Hauptversion der verwendeten Basisdatei muss mit der Version des zu kompilierenden Skripts übereinstimmen. Standardmäßig wird der zuletzt in der GUI-Oberfläche gespeicherte Basisdateiname oder eine im Skript vorkommende <a href="misc/Ahk2ExeDirectives.htm#Bin">Base</a>-Compilerdirektive verwendet.</td>
      </tr>
      <tr id="SlashResourceID">
        <td>/resourceid <i>Name</i></td>
        <td>Weist eine untypische Ressourcen-ID zu, die für das Hauptskript bei Kompilierungen verwendet wird, die eine <a href="#SlashBase">EXE-Basisdatei</a> verwenden (siehe <a href="Program.htm#embedded-scripts">Eingebettete Skripte</a>). Numerische Ressourcen-IDs müssen aus einem Rautezeichen (#) gefolgt von einer Dezimalzahl bestehen. Standardmäßig wird #1 oder eine im Skript vorkommende <a href="misc/Ahk2ExeDirectives.htm#ResourceID">ResourceID</a>-Compilerdirektive verwendet.</td>
      </tr>
      <tr id="SlashCp">
        <td>/cp <i>Codepage</i></td>
        <td>Überschreibt die Standardcodepage, mit der die Skriptdateien gelesen werden. Eine Liste möglicher Werte finden Sie unter <a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>. Beachten Sie, dass Unicode-Skripte mit einer Byte-Order-Markierung (BOM) beginnen sollten, was die Verwendung dieses Parameters überflüssig macht.</td>
      </tr>
      <tr id="SlashCompress">
        <td>/compress <i>n</i></td>
        <td>Soll die EXE-Datei <a href="#mpress">komprimiert</a> werden? 0 = nein, 1 = MPRESS verwenden (falls vorhanden), 2 = UPX verwenden (falls vorhanden). Standardmäßig wird die zuletzt in der GUI-Oberfläche gespeicherte Einstellung verwendet.</td>
      </tr>
      <tr id="SlashGui">
        <td>/gui</td>
        <td>Zeigt die GUI anstelle einer sofortigen Kompilierung an. Die anderen Parameter können verwendet werden, um die zuletzt in der GUI gespeicherten Einstellungen zu überschreiben. <code>/in</code> ist in diesem Fall optional.</td>
      </tr>
      <tr id="SlashGuiSilent">
        <td>/silent [verbose]</td>
        <td>Deaktiviert alle Mitteilungsfenster und gibt stattdessen die Fehler in die Standardfehlerausgabe (stderr) aus; oder in die Standardausgabe (stdout), wenn stderr fehlschlägt. Sonstige Meldungen werden ebenfalls in stdout ausgegeben. Geben Sie optional das Wort <code>verbose</code> an, um zusätzlich noch Statusmeldungen in stdout auszugeben.</td>
      </tr>
      <tr id="SlashAhk">
        <td class="warning"><strong>Veraltet:</strong><br>/ahk <i>Dateiname</i></td>
        <td class="warning">Der Pfad\Name der AutoHotkey.exe-Datei, die zum Kompilieren des Skripts verwendet werden soll.</td>
      </tr>
      <tr id="SlashMpress">
        <td class="warning"><strong>Veraltet:</strong><br>/mpress <i>0oder1</i></td>
        <td class="warning">Soll die EXE-Datei mit MPRESS <a href="#mpress">komprimiert</a> werden? 0 = nein, 1 = ja. Standardmäßig wird die zuletzt in der GUI-Oberfläche verwendete Einstellung verwendet.</td>
      </tr>
      <tr id="SlashBin">
        <td class="warning"><strong>Veraltet:</strong><br>/bin <i>Dateiname</i></td>
        <td class="warning">Die zu verwendende BIN-Datei. Standardmäßig wird der zuletzt in der GUI-Oberfläche gespeicherte BIN-Dateiname verwendet.</td>
      </tr>
    </table>
    <p>Zum Beispiel:</p>
    <pre class="no-highlight">Ahk2exe.exe /in "Skript.ahk" /icon "Symbol.ico"</pre>
  </li>
</ul>
<p>Hinweise:</p>
<ul>
  <li>Parameter, die Leerzeichen enthalten, müssen in doppelte Anführungszeichen gesetzt werden.</li>
  <li>Die Performanz des Skripts kann in der Regel nicht durch das Kompilieren verbessert werden.</li>
  <li><a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a> und <a href="Variables.htm#AllowMainWindow">A_AllowMainWindow</a> beeinflussen das Verhalten von kompilierten Skripts.</li>
  <li>Die interne Variable <a href="Variables.htm#IsCompiled">A_IsCompiled</a> enthält 1, wenn das Skript in kompilierter Form ausgeführt wird, andernfalls 0.</li>
  <li>Wenn Parameter an Ahk2Exe übergeben wurden, wird eine Meldung in die Standardausgabe (stdout) geschrieben, ob der Kompiliervorgang erfolgreich war oder nicht. Obwohl die Meldung nicht in der Eingabeaufforderung angezeigt wird, kann sie mit Mitteln wie dem Weiterleiten der Ausgabe an eine Datei "abgefangen" werden. </li>
  <li>Im Falle eines Fehlers gibt Ahk2Exe einen Exitcode zurück, der die Art des Fehlers spezifiziert. Solche Fehlercodes finden Sie auf <a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>.</li>
</ul>
<p>Den Quellcode sowie neuere Versionen des Compilers finden Sie auf <a href="https://github.com/AutoHotkey/Ahk2Exe">GitHub</a>.</p>

<h3 id="ahk2exe-base">Ausführbare Basisdatei</h3>
<p>Jede EXE-Datei eines kompilierten Skripts basiert auf einer ausführbaren Datei, die den Interpreter implementiert. Die Basisdateien im Compiler-Verzeichnis haben die Endung ".bin"; diese Dateien sind Versionen des Interpreters, die nicht die Möglichkeit bieten, externe Skriptdateien zu laden. Stattdessen wird das Programm nach einer Win32-Ressource (RCDATA) namens "&gt;AUTOHOTKEY SCRIPT&lt;" suchen und diese laden, oder fehlschlagen, wenn sie nicht gefunden wird.</p>
<p>Die Standard-AutoHotkey-EXE-Datei können auch als Basis für ein kompiliertes Skript verwendet werden, indem eine Win32-Ressource (RCDATA) mit der ID 1 eingebettet wird. (Weitere Skripte können mit der <a href="misc/Ahk2ExeDirectives.htm#AddResource">AddResource</a>-Compilerdirektive hinzugefügt werden.) Dadurch kann die EXE-Datei eines kompilierten Skripts zusammen mit der Befehlszeilenoption <a href="#SlashScript">/script</a> verwenden werden, um anstelle des eingebetteten Hauptskripts andere Skripte auszuführen. Weitere Informationen finden Sie unter <a href="Program.htm#embedded-scripts">Eingebettete Skripte</a>.</p>

<h3 id="CompilerDirectives">Skriptcompilerdirektiven</h3>
<p>Skriptcompilerdirektiven ermöglichen es dem Benutzer, genau anzugeben, wie ein Skript kompiliert werden soll. Einige der Features sind:</p>
<ul>
  <li>Versionsinformationen ändern (z.B. Name, Beschreibung, Version...)</li>
  <li>Ressourcen zum kompilierten Skript hinzufügen</li>
  <li>Verschiedene Aspekte der Kompilierung verfeinern</li>
  <li>Codeabschnitte aus dem kompilierten Skript entfernen und umgekehrt</li>
</ul>
<p>Weitere Informationen finden Sie unter <a href="misc/Ahk2ExeDirectives.htm">Skriptcompilerdirektiven</a>.</p>

<h3 id="mpress">Kompilierte Skripte komprimieren</h3>
<p>Ahk2Exe kann optional MPRESS- oder UPX-Freeware verwenden, um kompilierte Skripte zu komprimieren. Wenn <strong>MPRESS.exe</strong> und/oder <strong>UPX.exe</strong> in den Compiler-Unterordner von AutoHotkey kopiert wurde, kann die EXE-Datei via <code>/compress</code>-Parameter oder GUI-Einstellung komprimiert werden. </p>
<p><strong>MPRESS</strong> - offizielle Webseite (Downloads und Informationen): <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a><br>MPRESS Mirror: <a href="https://www.autohotkey.com/mpress/">https://www.autohotkey.com/mpress/</a></p>
<p><strong>UPX</strong> - offizielle Webseite (Downloads und Informationen): <a href="https://upx.github.io/">https://upx.github.io/</a></p>
<p><strong>Hinweis:</strong> Die Komprimierung einer EXE-Datei verhindert, dass der Quellcode des Skripts einfach mit einem Texteditor wie Notepad oder PE-Resource-Editor eingesehen werden kann, aber sie verhindert nicht, dass der Quellcode mit speziell dafür entwickelten Tools extrahiert werden kann.</p>

<h3 id="information">Hintergrundinformationen</h3>
 <p>Die folgende Ordnerstruktur wird unterstützt, wobei sich die aktuell ausgeführte Version von <code>Ahk2Exe.exe</code> im ersten, unten gezeigten \Compiler-Verzeichnis befindet:</p>
<pre class="no-highlight">\AutoHotkey 
   AutoHotkeyA32.exe 
   AutoHotkeyU32.exe
   AutoHotkeyU64.exe
   \Compiler
      Ahk2Exe.exe  <em>; die standardmäßig verwendete Version von Ahk2Exe</em>
      ANSI 32-bit.bin
      Unicode 32-bit.bin
      Unicode 64-bit.bin
   \AutoHotkey v2.0-a135
      AutoHotkey32.exe
      AutoHotkey64.exe
      \Compiler
   \v2.0-beta.1
      AutoHotkey32.exe
      AutoHotkey64.exe</pre>
<p>Der Suchalgorithmus zum Finden der Basisdatei wird beim Start von Ahk2Exe kurz ausgeführt und funktioniert wie folgt:</p>
<p>Der Algorithmus sucht nach qualifizierten AutoHotkey-EXE-Dateien und allen BIN-Dateien im Verzeichnis des Compilers, im Elternverzeichnis des Compilers und in allen Geschwisterverzeichnissen des Compilers, deren Namen mit <code>AutoHotkey</code> oder <code>V</code>, aber nicht mit <code>AutoHotkey_H</code> beginnen. Die ausgewählten Verzeichnisse werden rekursiv durchsucht. Alle gefundenen AutoHotkey.exe-Dateien werden ausgeschlossen - übrig bleiben Dateien wie AutoHotkeyA32.exe, AutoHotkey64.exe usw. sowie alle gefundenen BIN-Dateien. Alle enthaltenen EXE-Dateien müssen einen Namen haben, der mit <code>AutoHotkey</code> beginnt, und eine Dateibeschreibung, die das Wort <code>AutoHotkey</code> enthält, sowie die Version <code class="no-highlight">1.1.34+</code> oder <code class="no-highlight">2.0-a135+</code>.</p>
<p>Für eine erfolgreiche Kompilierung wird außerdem eine Version des AutoHotkey-Interpreters (als Hilfsmittel) benötigt, die nach einem ähnlichen Algorithmus ausgewählt wird. In den meisten Fällen wird die Version des verwendeten Interpreters mit der Version der Basisdatei übereinstimmen, die der Benutzer für die Kompilierung ausgewählt hat.</p>


<h2 id="cmd">Befehlszeilenparameter an ein Skript übergeben</h2>
<p>Skripte unterstützen Befehlszeilenparameter. Das Format ist:</p>
<pre>AutoHotkey.exe [<i>Optionen</i>] [<i>Skriptdateiname</i>] [<i>Skriptparameter</i>]</pre>
<p>Für kompilierte Skripte lautet das Format:</p>
<pre>KompiliertesSkript.exe [<i>Optionen</i>] [<i>Skriptparameter</i>]</pre>
<p><strong>Optionen:</strong> Folgende Optionen können angegeben werden:</p>
<table class="info">
  <tr><th>Option</th><th>Bedeutung</th><th class="wrap" abbr="Kompiliert?">Kompiliert?</th></tr>
  <tr id="SlashF">
    <td>/force</td>
    <td>Skript bedingungslos starten und Warndialogfenster überspringen. Diese Option hat denselben Effekt wie <a href="lib/_SingleInstance.htm">#SingleInstance Off</a>.</td>
    <td>Ja</td>
  </tr>
  <tr id="SlashR">
    <td>/restart</td>
    <td>Gibt an, dass das Skript neu gestartet werden soll und dass eine ältere Instanz des Skripts, sofern möglich, geschlossen werden soll (diese Option wird auch intern von der <a href="lib/Reload.htm">Reload</a>-Funktion verwendet).</td>
    <td>Ja</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut<br><br>/ErrorStdOut=<em>Kodierung</em></td>
    <td>
      <p>Sendet alle Syntaxfehler, die den Start eines Skripts verhindern, an die Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen. Einzelheiten finden Sie unter <a href="lib/_ErrorStdOut.htm">#ErrorStdOut</a>.</p>
      <p>Es kann optional eine <a href="lib/FileEncoding.htm">Kodierung</a> angegeben werden. <code>/ErrorStdOut=UTF-8</code> beispielsweise kodiert Meldungen als UTF-8, bevor sie in die Standardfehlerausgabe geschrieben werden.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td>Stellt eine Verbindung zu einem Debugger-Client her. Weitere Informationen finden Sie unter <a href="#idebug">Interaktives Debuggen</a>.</td>
    <td>Nein</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>
      <p>Überschreibt die Standardcodepage, mit der die Skriptdateien gelesen werden. Weitere Informationen finden Sie unter <a href="#cp">Skriptdateicodepage</a>.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="validate">
    <td>/Validate</td>
    <td>
      <p>AutoHotkey lädt das Skript und beendet es dann, bevor es ausgeführt wird.</p>
      <p>Standardmäßig werden Ladezeitfehler und Warnungen wie üblich angezeigt. Mit der <a href="#ErrorStdOut">/ErrorStdOut</a>-Option können jegliche Fehlermeldungen unterdrückt oder abgefangen werden.</p>
      <p>Der Prozess-Exitcode ist 0, wenn das Skript erfolgreich geladen wurde, oder ungleich 0, wenn ein Fehler auftrat.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr>
    <td>/iLib <em>"AusgabeDatei"</em></td>
    <td>
      <p><strong>Veraltet:</strong> Verwenden Sie stattdessen <a href="#validate">/validate</a>.</p>
      <p>AutoHotkey lädt das Skript, ohne es auszuführen. In früheren Versionen von AutoHotkey wurden Dateinamen von automatisch eingebundenen Dateien in die mit <em>AusgabeDatei</em> angegebene Datei geschrieben, formatiert als #Include-Direktiven.</p>
      <p>Wenn die Ausgabedatei bereits existiert, wird sie überschrieben. <em>AusgabeDatei</em> kann <code>*</code> sein, um die Ausgabe in die Standardausgabe (stdout) zu schreiben.</p>
      <p>Wenn das Skript Syntaxfehler enthält, kann die Ausgabedatei leer sein. Der Exitcode des Prozesses kann verwendet werden, um diesen Zustand zu erkennen; im Falle eines Syntaxfehlers ist der Exitcode 2. Mit der /ErrorStdOut-Option kann die Fehlermeldung unterdrückt oder abgefangen werden.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashInclude">
    <td>/include <em>"IncDatei"</em></td>
    <td>
      <p><a href="lib/_Include.htm">Inkludiert</a> eine Datei vor dem Hauptskript. Mit dieser Methode kann nur eine einzelne Datei inkludiert werden. Wenn das Skript <a href="lib/Reload.htm">neu geladen</a> wird, wird diese Befehlszeilenoption automatisch an die neue Instanz übergeben.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashScript">
    <td>/script</td>
    <td>
      <p>Wenn diese Option mit einem kompilierten Skript verwendet wird, das auf einer EXE-Datei basiert, bewirkt sie, dass das Programm das eingebettete Hauptskript ignoriert. Dadurch kann die EXE-Datei eines kompilierten Skripts externe Skriptdateien oder eingebettete Skripte anstelle des Hauptskripts ausführen. Andere Optionen, die normalerweise von kompilierten Skripten nicht unterstützt werden, können ebenfalls verwendet werden, müssen aber rechts von dieser Option angegeben werden. Zum Beispiel:</p>
      <pre class="no-highlight">KompiliertesSkript.exe /script /ErrorStdOut MeinSkript.ahk "Skript-Arg 1"</pre>
      <p>Diese Option kann auch angegeben werden, wenn die aktuelle EXE-Datei kein eingebettetes Skript hat, aber dann ist sie wirkungslos.</p>
      <p>Diese Option wird von kompilierten Skripten, die auf einer BIN-Datei basieren, nicht unterstützt.</p>
      <p>Siehe auch: <a href="#ahk2exe-base">Ausführbare Basisdatei (Ahk2Exe)</a></p>
    </td>
    <td>N/A</td>
  </tr>
</table>

<p id="defaultfile"><strong>Skriptdateiname:</strong> Dies kann weggelassen werden, wenn keine <em>Skriptparameter</em> vorhanden sind. Wenn weggelassen, wird standardmäßig der Pfad und Name der <a href="Variables.htm#AhkPath">AutoHotkey-EXE-Datei</a> verwendet, wobei ".exe" mit ".ahk" ersetzt wird. Wenn Sie beispielsweise AutoHotkey.exe in MeinSkript.exe umbenennen, versucht das Programm, MeinSkript.ahk zu laden. Starten Sie AutoHotkey32.exe ohne Parameter, versucht das Programm, AutoHotkey32.ahk zu laden.</p>
<p id="stdin">Geben Sie ein Sternchen (*) als Dateinamen an, um den Text des Skripts aus der Standardeingabe (stdin) zu lesen. Dies hat folgende Auswirkungen:</p>
<ul>
  <li>Das <a href="Variables.htm#InitialWorkingDir">anfängliche Arbeitsverzeichnis</a> wird als <a href="Variables.htm#ScriptDir">A_ScriptDir</a> verwendet und dient dazu, den <a href="#lib">lokalen Lib-Ordner</a> zu lokalisieren.</li>
  <li><a href="Variables.htm#ScriptName">A_ScriptName</a> und <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a> enthalten beide "*".</li>
  <li><a href="lib/_SingleInstance.htm">#SingleInstance</a> ist standardmäßig ausgeschaltet.</li>
</ul>
<p>Ein Beispiel dazu finden Sie unter <a href="lib/Run.htm#ExecScript">ExecScript()</a>.</p>
<p>Wenn die aktuelle EXE-Datei <a href="Program.htm#embedded-scripts">eingebettete Skripte</a> enthält, kann für diesen Parameter ein Sternchen gefolgt vom Ressourcennamen oder der ID eines eingebetteten Skripts angegeben werden. Bei kompilierten Skripten (also wenn ein eingebettetes Skript mit der ID #1 existiert) muss diesem Parameter die Befehlszeilenoption <code>/script</code> vorangestellt werden.</p>
<p><strong>Skriptparameter:</strong> Eine oder mehrere Zeichenketten, die an das Skript übergeben werden sollen, jeweils durch mindestens ein Leerzeichen voneinander getrennt. Jeder Parameter, der Leerzeichen enthält, muss in Anführungszeichen gesetzt werden. Wenn Sie eine leere Zeichenkette als Parameter übergeben wollen, geben Sie zwei aufeinanderfolgende Anführungszeichen an. Um ein direkt geschriebenes Anführungszeichen zu übergeben, stellen Sie diesem einen umgekehrten Schrägstrich voran (\"). Folglich wird jeder Schrägstrich am Ende in einem in Anführungszeichen gesetzten Parameter (z.B. "C:\Meine Dokumente<span class="red">\"</span>) wie ein direkt geschriebenes Anführungszeichen behandelt (d.h. das Skript erkennt die Zeichenkette C:\Meine Dokumente<span class="red">"</span>). Mit <code>A_Args[1] := <a href="lib/StrReplace.htm">StrReplace</a>(A_Args[1], '"')</code> können solche Anführungszeichen entfernt werden.</p>
<p id="cmd_args">Eingehende Parameter, sofern vorhanden, werden als Array in die interne Variable <strong>A_Args</strong> gespeichert, und können mithilfe der <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> abgerufen werden. <code>A_Args[1]</code> enthält den ersten Parameter. Das folgende Beispiel beendet das Skript, wenn zu wenig Parameter übergeben wurden:</p>
<pre>if A_Args.Length &lt; 3
{
    MsgBox "Das Skript benötigt mindestens 3 eingehende Parameter, aber es sind nur " A_Args.Length " angekommen."
    ExitApp
}</pre>
<p>Wenn die Anzahl der Parameter, die an das Skript übergeben werden, variiert (z.B. wenn der Benutzer mit dem Mauszeiger mehrere Dateien auf ein Skript zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>for n, param in A_Args  <em>; Für jeden Parameter:</em>
{
    MsgBox "Parameter Nr. " n " ist " param "."
}
</pre>
<p>Wenn die Parameter Dateinamen sind, kann das folgende Beispiel verwendet werden, um sie in lange Namen mit korrekter Groß-/Kleinschreibung (wie im Dateisystem gespeichert) und vollständigem/absolutem Pfad umzuwandeln:</p>
<pre>for n, EingabePfad in A_Args  <em>; Für jeden Parameter (oder für jede auf ein Skript gezogene Datei):</em>
{
    Loop Files, EingabePfad, "FD"  <em>; Dateien und Verzeichnisse einbeziehen.</em>
        LangerPfad := A_LoopFileFullPath
    MsgBox "Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei`n" EingabePfad "`nist:`n" LangerPfad
}</pre>

<h2 id="cp">Skriptdateicodepage</h2>
<p>Damit ASCII-fremde Zeichen korrekt aus einer Datei gelesen werden, muss die Kodierung, die zum Speichern der Datei verwendet wurde (meist via Texteditor), mit der Kodierung übereinstimmen, die AutoHotkey zum Lesen der Datei verwendet. Ist dies nicht der Fall, werden die Zeichen falsch dekodiert. AutoHotkey entscheidet nach folgenden Regeln, welche Kodierung verwendet wird:</p>
<ul>
  <li>Wenn die Datei mit einer UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) beginnt, wird die entsprechende Codepage verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
  <li>Wenn die <a href="#CPn">/CP<i>n</i></a>-Option über die Befehlszeile übergeben wurde, wird Codepage <i>n</i> verwendet. Eine Liste möglicher Werte finden Sie unter <a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>.</li>
  <li>In allen anderen Fällen wird UTF-8 verwendet (dieses Standardverhalten unterscheidet sich von AutoHotkey v1).</li>
</ul>
<p>Beachten Sie, dass dies nur für Skriptdateien gelten, die von AutoHotkey geladen wurden, nicht für die Datei-Eingabe/Ausgabe im Skript selbst. <a href="lib/FileEncoding.htm">FileEncoding</a> bestimmt die Standardkodierung für Dateien, die vom Skript gelesen oder geschrieben werden, während <a href="lib/IniRead.htm">IniRead</a> und <a href="lib/IniWrite.htm">IniWrite</a> immer in UTF-16 oder ANSI arbeiten.</p>
<p>Da der gesamte Text (wo nötig) in das <a href="Compat.htm#Format">native Zeichenkettenformat</a> umgewandelt wird, werden Zeichen, die ungültig sind oder in der nativen Codepage nicht existieren, mit einem Platzhalter ersetzt: '�'. Das passiert nur, wenn in der Skriptdatei Kodierungsfehler auftreten oder wenn die Codepages, die zum Speichern oder Laden der Datei verwendet werden, nicht übereinstimmen.</p>
<p>Mit <a href="lib/RegWrite.htm">RegWrite</a> kann die Standardkodierung für Skripte festgelegt werden, die aus dem Explorer heraus gestartet werden (z.B. durch Doppelklick auf eine Datei):</p>
<pre><em>; Entkommentieren Sie die entsprechende Zeile unten oder lassen Sie sie alle
; kommentiert, um den Standard des aktuellen Builds wiederherzustellen:
; Codepage := 0        ; Standard-ANSI-Codepage des Systems
; Codepage := 65001    ; UTF-8
; Codepage := 1200     ; UTF-16
; Codepage := 1252     ; ANSI-Latin-1; Westeuropäisch (Windows)</em>
if (Codepage != "")
    Codepage := " /CP" . Codepage
Befehl := Format('"{1}"{2} "%1" %*', A_AhkPath, Codepage)
Schlüssel := "AutoHotkeyScript\Shell\Open\Command"
if A_IsAdmin    <em>; Für alle Benutzer setzen.</em>
    RegWrite Befehl, "REG_SZ", "HKCR\" Schlüssel
else            <em>; Nur für den aktuellen Benutzer setzen.</em>
    RegWrite Befehl, "REG_SZ", "HKCU\Software\Classes\" Schlüssel</pre>
<p>Dies setzt natürlich voraus, dass AutoHotkey bereits installiert ist. Andernfalls wäre das Ergebnis alles andere als zufriedenstellend.</p>

<h2 id="debug">Ein Skript debuggen</h2>
<p>Interne Funktionen wie <a href="lib/ListVars.htm">ListVars</a> und <a href="lib/Pause.htm">Pause</a> können Ihnen dabei helfen, ein Skript zu debuggen (Fehler zu finden und zu beseitigen). Zum Beispiel erstellen die folgenden zwei Zeilen, wenn sie richtig platziert sind, sogenannte "Haltepunkte":</p>
<pre>ListVars
Pause</pre>
<p>Sobald das Skript diese zwei Zeilen erreicht, zeigt es den aktuellen Inhalt aller Variablen zur Überprüfung an. Wenn Sie bereit sind fortzufahren, entpausieren Sie das Skript via Datei- oder Tray-Menü. Das Skript wird dann bis zum nächsten "Haltepunkt" (falls vorhanden) fortgesetzt.</p>
<p>Generell empfiehlt es sich, diese "Haltepunkte" an Stellen einzufügen, wo das aktive Fenster für das Skript irrelevant ist, wie z.B. unmittelbar vor einer WinActivate-Funktion. Auf diese Weise kann das Skript seine Ausführung ordnungsgemäß fortsetzen, sobald Sie es entpausieren.</p>
<p>Die folgenden Funktionen sind auch für das Debuggen geeignet: <a href="lib/ListLines.htm">ListLines</a>, <a href="lib/KeyHistory.htm">KeyHistory</a> und <a href="lib/OutputDebug.htm">OutputDebug</a>.</p>
<p>Häufig auftretende Fehler wie Tippfehler und fehlende "globale" Deklarationen können durch das <a href="lib/_Warn.htm">Einschalten von Warnungen</a> erkannt werden.</p>
<h3 id="idebug">Interaktives Debuggen</h3>
<p>Interaktives Debuggen ist mit einem unterstützten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> möglich. Üblicherweise sind folgende Aktionen möglich:</p>
<ul>
  <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausführung pausieren, wenn ein <a href="https://en.wikipedia.org/wiki/Breakpoint">Haltepunkt</a> erreicht ist.</li>
  <li>Den Code zeilenweise durchgehen - Funktionen betreten, überspringen oder verlassen.</li>
  <li>Alle oder eine bestimmte Variable überwachen.</li>
  <li>Den Stapel von laufenden Threads und Funktionen anzeigen.</li>
</ul>
<p>Beachten Sie, dass diese Funktionalität für kompilierte Skripte, <a href="#ahk2exe-base">die auf einer BIN-Datei basieren</a>, deaktiviert ist. Für kompilierte Skripte, die auf einer EXE-Datei basieren, muss /debug nach <a href="#SlashScript">/script</a> angegeben werden.</p>
<p>Um interaktives Debuggen zu aktivieren, starten Sie zuerst einen unterstützten Debugger-Client und dann das Skript mit der <b>/Debug</b>-Befehlszeilenoption.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> und <i>PORT</i> können weggelassen werden. Zum Beispiel sind die folgenden Zeilen funktionsgleich:</p>
<pre class="no-highlight">AutoHotkey /Debug "MeinSkript.ahk"
AutoHotkey /Debug=localhost:9000 "MeinSkript.ahk"</pre>
<p id="debug_attach">Um den Debugger nachträglich mit einem Skript zu verbinden, senden Sie ihm eine Meldung wie folgt:</p>
<pre>SkriptPfad := "" <em>; HIER DEN VOLLSTÄNDIGEN PFAD DES SKRIPTS SETZEN</em>
A_DetectHiddenWindows := true
if WinExist(SkriptPfad " ahk_class AutoHotkey")
    <em>; Optionale Parameter:
    ;   wParam  = IPv4-Adresse des Debugger-Clients als 32-Bit-Integer.
    ;   lParam  = Port, der vom Debugger-Client abgehört werden soll.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>Sobald der Debugger-Client verbunden ist, kann die Verbindung durch Senden des DBGp-Befehls "detach" getrennt werden, ohne das Skript zu terminieren.</p>

<h2 id="Script_Showcase">Skriptbeispiele</h2>
<p>Auf <a href="scripts/">dieser Seite</a> finden Sie einige nützliche Skripte.</p>
</body>
</html>

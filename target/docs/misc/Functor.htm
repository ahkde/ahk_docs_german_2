<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Funktionsobjekte - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Funktionsobjekte sind entweder Referenzen zu Func-Objekten, die tatsächliche Funktionen repräsentieren, oder Objekte, die wie Funktionen aufgerufen werden können." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Funktionsobjekte</h1>

<p>"Funktionsobjekt" bedeutet in der Regel folgendes:</p>
<ul>
  <li>Ein <a href="../lib/Func.htm">Func</a>- oder <a href="../Functions.htm">Closure</a>-Objekt, das eine tatsächliche <a href="../Functions.htm#closures">Funktion</a> repräsentiert; entweder eine interne oder im Skript definierte Funktion.</li>
  <li>Ein benutzerdefiniertes Objekt, das wie eine Funktion aufgerufen werden kann. Dies bezeichnet man manchmal auch als "Funktor".</li>
  <li>Jedes andere Objekt, das wie eine Funktion aufgerufen werden kann, wie z. B. ein <a href="#BoundFunc">BoundFunc-Objekt</a> oder ein JavaScript-Funktionsobjekt, zurückgegeben von einer COM-Methode.</li>
</ul>
<p>Funktionsobjekte können in Verbindung mit folgenden Dingen verwendet werden:</p>
<ul>
  <li><a href="../lib/CallbackCreate.htm">CallbackCreate</a></li>
  <li><a href="../lib/GuiOnEvent.htm">Gui-Ereignisse</a></li>
  <li><a href="../lib/For.htm">For ... in</a></li>
  <li><a href="../lib/HotIf.htm">HotIf</a></li>
  <li><a href="../lib/Hotkey.htm">Hotkey</a></li>
  <li><a href="../lib/Hotstring.htm">Hotstring</a></li>
  <li><a href="../lib/InputHook.htm">InputHook</a> (OnEnd, OnChar, OnKeyDown, OnKeyUp)</li>
  <li><a href="../lib/Menu.htm#Add">Menu.Add</a></li>
  <li><a href="../lib/OnClipboardChange.htm">OnClipboardChange</a></li>
  <li><a href="../lib/OnError.htm">OnError</a></li>
  <li><a href="../lib/OnExit.htm">OnExit</a></li>
  <li><a href="../lib/OnMessage.htm">OnMessage</a></li>
  <li><a href="RegExCallout.htm">RegEx-Callouts</a></li>
  <li><a href="../lib/SetTimer.htm">SetTimer</a></li>
  <li><a href="../lib/Sort.htm">Sort</a></li>
</ul>
<p id="HasCall">Um zu ermitteln, ob ein Objekt aufrufbar zu sein scheint, verwenden Sie eine der folgenden Vorgehensweisen:</p>
<ul>
  <li><code>Wert.HasMethod()</code> funktioniert standardmäßig mit allen AutoHotkey-Werten und -Objekten, und lässt zu, dass HasMethod bei einigen Objekten oder Klassen überschrieben werden kann. Bei COM-Objekten wird diese Vorgehensweise in der Regel fehlschlagen (eine Ausnahme auslösen oder das falsche Ergebnis erzeugen), es sei denn, das COM-Objekt ist tatsächlich ein AutoHotkey-Objekt aus einem anderen Prozess.</li>
  <li><code>HasMethod(Wert)</code> funktioniert mit allen AutoHotkey-Werten und -Objekten und kann nicht überschrieben werden, gibt aber False zurück, wenn die Existenz einer <em>Call</em>-Methode nicht bestimmt werden kann. Es wird eine Ausnahme ausgelöst, wenn <em>Wert</em> ein <a href="../lib/ComObject.htm">ComObject</a> ist.</li>
</ul>

<h2 id="User-Defined">Benutzerdefiniert</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>Benutzerdefinierte Funktionsobjekte müssen eine <em>Call</em>-Methode definieren, die die Implementierung von der "Funktion" enthält.</p>
<pre>class MeineKlasseName {
    Call(a, b) {  <em>; Deklariere Parameter je nach Bedarf, oder ein <a href="../Functions.htm#Variadic">Array*</a>.</em>
        <em>;...</em>
        return c
    }
    <em>;...</em>
}
</pre>
<p>Dies gilt für <em>Instanzen</em> von <em>MeineKlasseName</em>, wie z. B. das von <code>MeineKlasseName()</code> zurückgegebene Objekt. Das Ersetzen von <code>Call</code> mit <code>static Call</code> würde stattdessen das überschreiben, was passiert, wenn <em>MeineKlasseName</em> selbst aufgerufen wird.</p>
<h3 id="User-Defined-Examples">Beispiele</h3>
<p>Das folgende Beispiel definiert ein Funktions-Array, das aufgerufen werden kann; wenn man das Array aufruft, wird es jedes seiner Elemente nacheinander aufrufen.</p>
<pre>class FunkArrayTyp extends Array {
    Call(params*) {
        <em>; Ruft eine Liste von Funktionen auf.</em>
        for fn in this
            fn(params*)
    }
}

<em>; Erstellt ein Array mit Funktionen.</em>
FunkArray := FunkArrayTyp()
<em>; Fügt einige Funktionen in das Array ein (kann jederzeit gemacht werden).</em>
FunkArray.Push(Eins)
FunkArray.Push(Zwei)
<em>; Erstellt ein Objekt, das das Array als Methode benutzt.</em>
obj := {Methode: FunkArray}
<em>; Methode aufrufen (und folglich sowohl Eins als auch Zwei).</em>
obj.Methode("2.")
<em>; Als Funktion aufrufen.</em>
(obj.Methode)("1.", "2.")

Eins(param1, param2) {
    ListVars
    MsgBox
}
Zwei(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">BoundFunc-Objekt</h2>
<p>Verhält sich wie eine Funktion, aber übergibt nur vordefinierte Parameter an eine andere Funktion.</p>
<p>Es gibt zwei Möglichkeiten, wie BoundFunc-Objekte erstellt werden können:</p>
<ul>
  <li>Durch Aufrufen der <a href="../lib/Func.htm#Bind">Func.Bind</a>-Methode, die Parameterwerte an eine Funktion bindet.</li>
  <li>Durch Aufrufen der <a href="../lib/ObjBindMethod.htm">ObjBindMethod</a>-Funktion, die Parameterwerte und Methodennamen an ein Zielobjekt bindet.</li>
</ul>
<p>Im unteren Beispiel wird gezeigt, wie BoundFunc-Objekte aufgerufen werden können. Wenn das BoundFunc-Objekt aufgerufen wird, ruft es die Funktion oder Methode auf, an der es gebunden wurde, und übergibt eine Kombination aus gebundenen Parametern und Parametern des Aufrufers. Ungebundene Parameterpositionen werden Positionen aus der Parameterliste des Aufrufers zugewiesen, von links nach rechts. Zum Beispiel:</p>
<pre>fn := EchteFn.Bind(1)  <em>; Nur mit ersten Parameter verbinden</em>
fn(2)      <em>; Zeigt "1, 2"</em>
fn.Call(3) <em>; Zeigt "1, 3"</em>

fn := EchteFn.Bind( , 1)  <em>; Nur mit zweiten Parameter verbinden</em>
fn(2)      <em>; Zeigt "2, 1"</em>
fn.Call(3) <em>; Zeigt "3, 1"</em>
fn(, 4)    <em>; Fehler: 'a' wurde weggelassen</em>

EchteFn(a, b, c:="c") {
    MsgBox a ", " b
}</pre>
<p><a href="../lib/ObjBindMethod.htm">ObjBindMethod</a> kann genutzt werden, um eine Methode mit einem Objekt zu verbinden, wenn es nicht möglich ist, eine Referenz zu der Methode selbst abzurufen. Zum Beispiel:</p>
<pre>Shell := ComObject("Shell.Application")
RunBox := ObjBindMethod(Shell, "FileRun")
<em>; Ausführen-Dialogfenster öffnen.</em>
RunBox</pre>
<p>Ein komplexeres Beispiel finden Sie bei <a href="../lib/SetTimer.htm#ExampleClass">SetTimer</a>.</p>
<p>Andere Eigenschaften und Methoden werden von <a href="../lib/Func.htm">Func</a> geerbt, allerdings spiegeln sie nicht die Eigenschaften der Zielfunktion oder -methode wider (die nicht als Funktion implementiert sein muss). Das BoundFunc-Objekt fungiert als anonyme variadische Funktion ohne weitere Formalparameter, ähnlich der <a href="../Variables.htm#fat-arrow">Fat-Arrow-Funktion</a> unten:</p>
<pre>Func_Bind(fn, bound_args*) {
    return (args*) =&gt; (args.InsertAt(1, bound_args*), fn(args*))
}</pre>

</body>
</html>

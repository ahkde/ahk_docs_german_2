<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Tastendrücke oder Mausklicks via Joystick senden | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie, wie man mit Joystick-Tasten oder anderen Joystick-Bedienelementen Tastendrücke oder Mausklicks sendet." />
<meta name="keywords" content="tastatur,tasten,taste,tastendrücke,klicks,maus,joystick,hotkeys,hotkey,makro">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Tastendrücke oder Mausklicks via Joystick senden</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#imp">Wichtige Hinweise</a></li>
  <li><a href="#button">Tastendrücke oder Mausklicks via Joystick-Tasten senden</a>
  <ul>
      <li><a href="#different-approaches">Unterschiedliche Ansätze</a></li>
      <li><a href="#auto-repeating-joystick-buttons">Tastendrücke wiederholt senden</a></li>
      <li><a href="#context-sensitive-joystick-buttons">Kontextabhängige Joystick-Tasten</a></li>
      <li><a href="#using-a-joystick-as-a-mouse">Joystick als Maus verwenden</a></li>
  </ul></li>
  <li><a href="#axis">Tastendrücke oder Mausklicks via Bedienelemente senden</a>
  <ul>
      <li><a href="#joystick-axes">Joystick-Achsen</a></li>
      <li><a href="#joystick-pov-hat">Joystick-Rundblickschalter</a></li>
      <li><a href="#auto-repeating-other">Tastendrücke wiederholt senden</a></li>
  </ul></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#related">Siehe auch</a></li>
</ul>

<h2 id="imp">Wichtige Hinweise</h2>
<ul>
  <li>Eine Joystick-Taste oder -Achse kann zu einer Taste oder Maustaste neubelegt werden, aber nicht zu einer anderen Joystick-Taste oder -Achse. Das wäre nur mithilfe eines Joystick-Emulators wie <a href="https://sourceforge.net/projects/vjoystick/">vJoy</a> möglich.</li>
  <li>AutoHotkey identifiziert jede Taste auf einem Joystick mit einer eindeutigen Nummer zwischen 1 und 32. Mit dem <a href="../scripts/index.htm#JoystickTest">Joystick-Testskript</a> können diese Nummern ermittelt werden.</li>
</ul>

<h2 id="button">Tastendrücke oder Mausklicks via Joystick-Tasten senden</h2>

<h3 id="different-approaches">Unterschiedliche Ansätze</h3>
<p>Nachfolgend werden drei Methoden beschrieben, in der Reihenfolge von einfach bis komplex. Die komplexeste Methode eignet sich für die meisten Situationen (z. B. wenn in einem Videospiel eine Tastatur- oder Maustaste gedrückt gehalten werden muss).</p>

<h4 id="Method_1">Methode #1</h4>
<p>Diese Methode sendet einfache Tastendrücke und Mausklicks. Zum Beispiel:</p>
<pre>Joy1::<a href="../lib/Send.htm">Send</a> "{Left}"  <em>; Mit Taste #1 einen NACH-LINKS-Tastendruck senden.</em>
Joy2::<a href="../lib/Click.htm">Click</a>  <em>; Mit Taste #2 einen Linksklick senden.</em>
Joy3::Send "a{Esc}{Space}{Enter}"  <em>; Mit Taste #3 den Buchstaben "a", gefolgt von Escape, Leerzeichen und Enter, senden.</em>
Joy4::Send "Mit freundlichen Grüßen,{Enter}Max Mustermann"  <em>; Mit Taste #4 eine zweizeilige Signatur senden.</em></pre>
<p>Um mit einer Taste mehr als eine Funktion zu senden, setzen Sie die erste Funktion <em>unterhalb</em> des Tastennamens und machen Sie die letzte Zeile zu einem <a href="../lib/Return.htm">Return</a>. Zum Beispiel:</p>
<pre>Joy5::
{
    Run "notepad"
    WinWait "Unbenannt - Editor"
    WinActivate
    Send "Dieser Text wird im Texteditor erscheinen.{Enter}"
}</pre>
<p>In der <a href="../KeyList.htm">Tastenliste</a> finden Sie alle Tastatur-, Maus- und Joystick-Tasten.</p>

<h4 id="Method_2">Methode #2</h4>
<p>Diese Methode ist notwendig, wenn eine Tastatur- oder Maustaste während der gesamten Zeit, in der Sie eine Joystick-Taste gedrückt halten, gedrückt gehalten werden muss. Das folgende Beispiel sorgt dafür, dass sich die zweite Taste des Joysticks wie die linke Pfeiltaste verhält:</p>
<pre>Joy2::
{
    Send "{Left down}"  <em>; Hält die linke Pfeiltaste gedrückt.</em>
    <a href="../lib/KeyWait.htm">KeyWait</a> "Joy2"  <em>; Wartet, bis der Benutzer die Joystick-Taste loslässt.</em>
    Send "{Left up}"  <em>; Lässt die linke Pfeiltaste los.</em>
}</pre>

<h4 id="Method_3">Methode #3</h4>
<p>Diese Methode ist notwendig, wenn Sie mehr als einen Joystick-Hotkey wie den von Methode #2 haben und Sie diese Hotkeys manchmal gleichzeitig drücken und loslassen. Das folgende Beispiel sorgt dafür, dass sich die dritte Taste des Joysticks wie die linke Maustaste verhält:</p>
<pre>Joy3::
{
    Send "{LButton down}"   <em>; Hält die linke Maustaste gedrückt.</em>
    SetTimer AufDritteTasteWarten, 10
}

AufDritteTasteWarten()
{
    if <a href="../lib/GetKeyState.htm">GetKeyState</a>("Joy3")  <em>; Die Taste ist noch unten, also weiter warten.</em>
        return
    <em>; Ansonsten wurde die Taste losgelassen.</em>
    Send "{LButton up}"  <em>; Lässt die linke Maustaste los.</em>
    SetTimer , 0
}
</pre>

<h3 id="auto-repeating-joystick-buttons">Tastendrücke wiederholt senden</h3>
<p>Bei einigen Programmen oder Videospielen kann es erforderlich sein, dass eine Taste wiederholt gesendet werden muss (als würden Sie die Taste auf der Tastatur gedrückt halten). Das folgende Beispiel macht das möglich, indem es wiederholt Leertastendrücke sendet, während Sie die zweite Taste des Joysticks gedrückt halten:</p>
<pre>Joy2::
{
    Send "{Space down}"   <em>; Drückt die Leertaste nach unten.</em>
    SetTimer AufJoy2Warten, <strong>30</strong>  <em>; Verringern Sie die Zahl <strong>30</strong> auf 20 oder 10, um Tasten schneller zu senden. Erhöhen Sie sie, um Tasten langsamer zu senden.</em>
}

AufJoy2Warten()
{
    if not GetKeyState("Joy2")  <em>; Die Taste wurde losgelassen.</em>
    {
        Send "{Space up}"  <em>; Lässt die Leertaste los.</em>
        SetTimer , 0  <em>; Stoppt die Überwachung der Taste.</em>
        return
    }
    <em>; Da oben kein "Return" erfolgt ist, wird die Taste weiter gedrückt gehalten.</em>
    Send "{Space down}"  <em>; Sendet einen weiteren Leertastendruck.</em>
}</pre>

<h3 id="context-sensitive-joystick-buttons">Kontextabhängige Joystick-Tasten</h3>
<p>Die <a href="../lib/_HotIf.htm">#HotIf</a>-Direktive kann genutzt werden, um bestimmte Joystick-Tasten je nach Bedingung (z. B. Typ des aktiven Fensters) unterschiedliche (oder gar keine) Aktionen durchzuführen zu lassen.</p>

<h3 id="using-a-joystick-as-a-mouse">Joystick als Maus verwenden</h3>
<p>Das <a href="../scripts/index.htm#JoystickMouse">Joystick-zu-Maus-Skript</a> wandelt einen Joystick durch Neubelegung der Tasten und Achsen-Steuerung in eine Maus um.</p>

<h2 id="axis">Tastendrücke oder Mausklicks via Bedienelemente senden</h2>
<p>Um ein Skript auf die Bewegung einer Joystick-Achse oder des Rundblickschalters reagieren zu lassen, verwenden Sie <a href="../lib/SetTimer.htm">SetTimer</a> in Verbindung mit <a href="../lib/GetKeyState.htm">GetKeyState</a>.</p>

<h3 id="joystick-axes">Joystick-Achsen</h3>
<p>Das folgende Beispiel sorgt dafür, dass sich die X- und Y-Achsen des Joysticks wie die Pfeiltasten auf der Tastatur verhalten:</p>
<pre><a href="../lib/SetTimer.htm">SetTimer</a> Achsenüberwachung, 5

Achsenüberwachung()
{
    JoyX := <a href="../lib/GetKeyState.htm">GetKeyState</a>("JoyX")  <em>; Ermittelt die Position der X-Achse.</em>
    JoyY := GetKeyState("JoyY")  <em>; Ermittelt die Position der Y-Achse.</em>
    VorherGedrückteTaste := GedrückteTaste  <em>; VorherGedrückteTaste enthält nun die Taste, die vorher unten war (falls vorhanden).</em>

    if JoyX &gt; 70
        GedrückteTaste := "Right"
    else if JoyX &lt; 30
        GedrückteTaste := "Left"
    else if JoyY &gt; 70
        GedrückteTaste := "Down"
    else if JoyY &lt; 30
        GedrückteTaste := "Up"
    else
        GedrückteTaste := ""

    if GedrückteTaste = VorherGedrückteTaste  <em>; Die korrekte Taste ist bereits unten (oder keine Taste notwendig).</em>
        return  <em>; Nichts tun.</em>

    <em>; Ansonsten vorherige Taste loslassen und neue Taste drücken:</em>
    SetKeyDelay -1  <em>; Verhindert Verzögerungen zwischen den Tastendrücken.</em>
    if VorherGedrückteTaste   <em>; Es gibt eine vorherige Taste zum Loslassen.</em>
        Send "{" VorherGedrückteTaste " up}"  <em>; Lässt sie los.</em>
    if GedrückteTaste   <em>; Es gibt eine Taste zum Nach-Unten-Drücken.</em>
        Send "{" GedrückteTaste " down}"  <em>; Drückt sie nach unten.</em>
}</pre>

<h3 id="joystick-pov-hat">Joystick-Rundblickschalter</h3>
<p>Das folgende Beispiel sorgt dafür, dass sich der Rundblickschalter des Joysticks wie die Pfeiltasten auf der Tastatur verhält:</p>
<pre>SetTimer POVÜberwachung, 5

POVÜberwachung()
{
    static GedrückteTaste := ""
    POV := GetKeyState("JoyPOV")  <em>; Ermittelt die Position des Rundblickschalters.</em>
    VorherGedrückteTaste := GedrückteTaste  <em>; VorherGedrückteTaste enthält nun die Taste, die vorher unten war (falls vorhanden).</em>

    <em>; Einige Joysticks haben eventuell einen Rundblickschalter, der keine vordefinierten Richtungen aufweist.
    ; In diesem Fall können Bereiche verwendet werden:</em>
    if POV &lt; 0   <em>; Kein Winkel zu melden</em>
        GedrückteTaste := ""
    else if POV &gt; 31500                <em>; 315 bis 360 Grad: Nach vorne gerichtet</em>
        GedrückteTaste := "Up"
    else if POV &gt;= 0 and POV &lt;= 4500      <em>; 0 bis 45 Grad: Nach vorne gerichtet</em>
        GedrückteTaste := "Up"
    else if POV &gt;= 4501 and POV &lt;= 13500  <em>; 45 bis 135 Grad: Nach rechts gerichtet</em>
        GedrückteTaste := "Right"
    else if POV &gt;= 13501 and POV &lt;= 22500 <em>; 135 bis 225 Grad: Nach hinten gerichtet</em>
        GedrückteTaste := "Down"
    else                                  <em>; 225 bis 315 Grad: Nach links gerichtet</em>
        GedrückteTaste := "Left"

    if GedrückteTaste = VorherGedrückteTaste  <em>; Die korrekte Taste ist bereits unten (oder keine Taste notwendig).</em>
        return  <em>; Nichts tun.</em>

    <em>; Ansonsten vorherige Taste loslassen und neue Taste drücken:</em>
    SetKeyDelay -1  <em>; Verhindert Verzögerungen zwischen den Tastendrücken.</em>
    if VorherGedrückteTaste   <em>; Es gibt eine vorherige Taste zum Loslassen.</em>
        Send "{" VorherGedrückteTaste " up}"  <em>; Lässt sie los.</em>
    if GedrückteTaste   <em>; Es gibt eine Taste zum Nach-Unten-Drücken.</em>
        Send "{" GedrückteTaste " down}"  <em>; Drückt sie nach unten.</em>
}</pre>

<h3 id="auto-repeating-other">Tastendrücke wiederholt senden</h3>
<p>Beide Beispiele oben können so modifiziert werden, dass sie die Taste wiederholt senden, anstatt sie nur gedrückt zu halten, oder anders gesagt, um das physische Gedrückthalten einer Tastaturtaste zu imitieren. Ersetzen Sie dazu die folgende Zeile:</p>
<pre>return  <em>; Nichts tun.</em></pre>
<p>Mit Folgendem:</p>
<pre>{
    if GedrückteTaste
        Send "{" GedrückteTaste " down}"  <em>; Tastendrücke wiederholt senden.</em>
    return
}</pre>
<h2 id="Remarks">Bemerkungen</h2>
<p>Um anstelle des ersten Joysticks einen anderen Joystick zu verwenden, schreiben Sie vor dem Tasten- oder Achsennamen die Nummer des Joysticks. Zum Beispiel wäre <code>2Joy1</code> die erste Taste des zweiten Joysticks.</p>
<p>Im <a href="https://www.autohotkey.com/forum/">AutoHotkey-Forum</a> können Sie weitere nützliche Joystick-Skripte finden. Geben Sie Schlüsselwörter wie <em>Joystick and GetKeyState and Send</em> an, um relevante Themen zu finden.</p>
<h2 id="related">Siehe auch</h2>
<ul>
    <li><a href="../scripts/index.htm#JoystickMouse">Joystick-zu-Maus-Skript (Joystick als Maus verwenden)</a></li>
    <li><a href="../KeyList.htm#Joystick">Liste mit Joystick-Tasten, -Achsen und -Bedienelementen</a></li>
    <li><a href="../lib/GetKeyState.htm">GetKeyState</a></li>
    <li><a href="Remap.htm">Neubelegung von Tastatur und Maus</a></li>
</ul>

</body>
</html>

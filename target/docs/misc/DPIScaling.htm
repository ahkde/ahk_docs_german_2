<!DOCTYPE HTML>
<html lang="de">
<head>
<title>DPI-Skalierung | AutoHotkey v2</title>
<meta name="description" content="Beschreibt Themen im Zusammenhang mit der DPI-Skalierung." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>DPI-Skalierung</h1>

<p>Bei der DPI-Skalierung handelt es sich um eine Funktion, die entweder vom Betriebssystem oder von der Applikation ausgeführt wird, um die visuelle Größe des Inhalts proportional zur DPI-Einstellung des Bildschirms zu vergrößern (DPI ist die Abkürzung für "dots per inch", englisch für "Punkte pro Zoll"). Grundsätzlich ermöglicht diese Funktion, dass Inhalte auf Systemen mit verschiedenen Bildschirmauflösungen in der gleichen physischen Größe dargestellt werden oder zumindest auf sehr hochauflösenden Bildschirmen nutzbar sind. Manchmal erhöht ein Benutzer die DPI-Einstellung, um Inhalte größer zu machen und besser lesen zu können.</p>
<p><a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> gibt die DPI-Einstellung des primären Bildschirms zurück.</p>
<p>Es gibt zwei verschiedene DPI-Skalierungen, die etwas mit AutoHotkey zu tun haben: Gui-DPI-Skalierung und OS-DPI-Skalierung.</p>

<h2>Gui-DPI-Skalierung</h2>
<p>Standardmäßig führen die Gui- und GuiControl-Methoden/Eigenschaften eine automatische Skalierung durch, so dass GUI-Skripte mit hartcodierten Positionen, Größen und Abständen auf Bildschirmen mit hohem DPI-Wert angemessen skaliert werden. Wenn sich das negativ auf das Skript auswirkt oder wenn das Skript die Skalierung selbst vornimmt, kann die automatische Skalierung deaktiviert werden. Weitere Einzelheiten finden Sie unter der Option <a href="../lib/Gui.htm#DPIScale">-DPIScale</a>.</p>

<h2>OS-DPI-Skalierung</h2>
<p>Bei Applikationen, die nicht DPI-sensitiv sind, führt das Betriebssystem automatisch eine Skalierung für Koordinaten durch, die an bestimmte Systemfunktionen übergeben und von diesen zurückgegeben werden. Diese Art der Skalierung wirkt sich unter AutoHotkey nur auf Systemen mit mehreren Bildschirmen aus, die unterschiedliche DPI-Einstellungen haben.</p>

<h3>Pro-Anzeigegerät-DPI-Sensitivität</h3>
<p>In Windows 8.1 und höher können sekundäre Bildschirme unterschiedliche DPI-Einstellungen haben. Von "pro-Anzeigegerät-DPI-sensitiven" Applikationen wird erwartet, dass sie ihre Fenster entsprechend dem DPI-Wert des Bildschirms skalieren, auf dem sie sich gerade befinden, und sich dynamisch anpassen, wenn das Fenster zwischen den Bildschirmen hin- und hergeschoben wird.</p>
<p>Bei Applikationen, die nicht pro-Anzeigegerät-DPI-sensitiv sind, wird das System eine Bitmap-Skalierung durchführen, damit die Fenster ihre Größe ändern können, wenn sie zwischen den Bildschirmen hin- und hergeschoben werden, und dies vor der Applikation verbergen, indem die Koordinaten und Größen auf die globale DPI-Einstellung, die die Applikation erwartet, skaliert werden. Auf einem 11-Zoll-4K-Bildschirm beispielsweise wäre eine GUI, die zur Darstellung auf 96 dpi (100 %) ausgelegt ist, fast unmöglich zu verwenden, wogegen eine Hochskalierung um 200 % sie nutzbar machen würde.</p>
<p>AutoHotkey ist nicht zur Durchführung einer Pro-Anzeigegerät-Skalierung ausgelegt und wurde daher nicht als pro-Anzeigegerät-DPI-sensitiv gekennzeichnet. Dies ist z. B. von Vorteil, wenn ein GUI-Fenster zwischen einem großen externen Bildschirm mit 100 % DPI und einem kleineren Bildschirm mit 200 % DPI hin- und hergeschoben wird. Die automatische Skalierung hat jedoch auch negative Auswirkungen.</p>
<p>Damit die automatische Skalierung des Systems funktioniert, werden Koordinaten, die von Systemfunktionen wie <a href="https://learn.microsoft.com/de-de/windows/win32/api/winuser/nf-winuser-movewindow">MoveWindow</a> und <a href="https://learn.microsoft.com/de-de/windows/win32/api/winuser/nf-winuser-getwindowrect">GetWindowRect</a> akzeptiert oder zurückgegeben werden, automatisch skaliert. Wenn AutoHotkey diese Funktionen verwendet, um mit externen Fenstern zu arbeiten, führt das oft zu unerwarteten Ergebnissen, wenn sich die Koordinaten nicht auf dem primären Bildschirm befinden. Erschwerend kommt hinzu, dass einige Funktionen die Koordinaten auf Basis des Bildschirms skalieren, auf dem das zuletzt aktive Fenster des Skripts angezeigt wurde.</p>

<h2>Workarounds</h2>
<p>In Windows 10 Version 1607 und höher kann die <a href="https://learn.microsoft.com/de-de/windows/win32/api/winuser/nf-winuser-setthreaddpiawarenesscontext">SetThreadDpiAwarenessContext</a>-Systemfunktion verwendet werden, um die DPI-Sensitivität-Einstellung des Programms zu ändern, während es läuft. Wenn Sie z. B. die Pro-Anzeigegerät-DPI-Sensitivität aktivieren, wird die vom System durchgeführte Skalierung deaktiviert, so dass interne Funktionen wie <a href="../lib/WinMove.htm">WinMove</a> und <a href="../lib/WinGetPos.htm">WinGetPos</a> Koordinaten (in Pixeln), unverändert von einer DPI-Skalierung, akzeptieren oder zurückgeben können. Wenn die Größe einer GUI jedoch für einen Bildschirm mit 100 % DPI ausgelegt ist und dann auf einen Bildschirm mit 200 % DPI verschoben wird, passt sie sich nicht automatisch an und könnte unbrauchbar werden.</p>
<p>Um die Pro-Anzeigegerät-DPI-Sensitivität zu aktivieren, rufen Sie die folgende Funktion auf, bevor Sie Funktionen verwenden, die normalerweise von der DPI-Skalierung betroffen sind:</p>
<pre>DllCall("SetThreadDpiAwarenessContext", "ptr", -3, "ptr")</pre>
<p>In Windows 10 Version 1703 und höher kann -3 mit -4 ersetzt werden, um den Modus "Per Monitor v2" zu aktivieren. Dies ermöglicht die Skalierung von Dialogfenstern, Menüs, Tooltips und einigen anderen Dingen. Allerdings wird dadurch auch der Nicht-Clientbereich (Titelleiste) skaliert, was wiederum dazu führen kann, dass der Clientbereich des Fensters zu klein wird, es sei denn, das Skript ist so konzipiert, dass es sich daran anpasst (z. B. durch Reaktion auf die <a href="https://learn.microsoft.com/de-de/windows/win32/hidpi/wm-dpichanged">WM_DPICHANGED-Meldung</a>). Das lässt sich vermeiden, indem man den Kontext vor dem Erstellen der GUI auf -3 setzt und vor dem Erstellen von Tooltips, Menüs oder Dialogfenstern auf -4 setzt.</p>
<p>Die DPI-Sensitivität des Threads kann sich temporär ändern, während der Benutzer ein Fenster des Skripts verschiebt oder während das Skript ein Dialogfenster anzeigt. Daher ist es am sichersten, die DPI-Sensitivität unmittelbar vor der Nutzung der Funktionen, die darauf angewiesen sind, zu setzen.</p>

<h3>Kompilierte Skripte</h3>
<p>Pro-Anzeigegerät-DPI-Sensitivität kann prozessübergreifend aktiviert werden, indem der Inhalt des <code>&lt;dpiAware&gt;</code>-Eintrags der Manifestressource des kompilierten Skripts von <code>true</code> (standardmäßig gesetzt in der AutoHotkey-EXE-Datei) auf <code>true/pm</code> geändert wird.</p>

</body>
</html>

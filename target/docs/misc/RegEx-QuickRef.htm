<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Reguläre Ausdrücke (RegEx) - Kurzübersicht | AutoHotkey v2</title>
<meta name="description" content="Diese Seite enthält Optionen, häufig verwendete Symbole und Syntax, die innerhalb eines regulären Ausdrucks verwendet werden können." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>Reguläre Ausdrücke (RegEx) - Kurzübersicht</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#fundamentals">Grundlagen</a></li>
  <li><a href="#Options">Optionen (Groß-/Kleinschreibung-sensitiv)</a></li>
  <li><a href="#Common">Häufig verwendete Symbole und Syntax</a></li>
</ul>

<h2 id="fundamentals">Grundlagen</h2>
<p><strong>Übereinstimmung überall finden</strong>: Standardmäßig wird ein regulärer Ausdruck eine Übereinstimmung, sofern vorhanden, an einer <em>beliebigen</em> Stelle innerhalb einer Zeichenkette finden. Zum Beispiel wird der reguläre Ausdruck <span class="regex">abc</span> in <span class="subj">abc</span>123, 123<span class="subj">abc</span> und 123<span class="subj">abc</span>xyz gefunden. Wenn eine Übereinstimmung nur am Anfang oder Ende einer Zeichenkette gefunden werden soll, verwenden Sie einen <a href="#anchor">Anker</a>.</p>
<p><strong>Escapezeichenversehene Zeichen</strong>: Die meisten Zeichen wie abc123 haben keine spezielle Funktion und können normal in einem regulären Ausdruck verwendet werden. Die Zeichen <strong>\.*?+[{|()^$</strong> hingegen haben eine spezielle Funktion und müssen demzufolge mit einem umgekehrten Schrägstrich versehen werden, wenn ihre Funktion außer Kraft gesetzt werden soll. Zum Beispiel wird <span class="regex">\.</span> als normaler Punkt und <span class="regex">\\</span> als normaler umgekehrter Schrägstrich interpretiert. Um nicht nur ein Zeichen, sondern eine ganze Reihe von Zeichen als normale Zeichen zu behandeln, verwenden Sie \Q...\E. Zum Beispiel: <span class="regex">\QNormaler Text\E</span>.</p>
<p><strong>Groß-/Kleinschreibung-sensitiv</strong>: Standardmäßig sind reguläre Ausdrücke Groß-/Kleinschreibung-sensitiv (das heißt, dass die Groß-/Kleinschreibung berücksichtigt wird). Mit der "i"-Option kann das geändert werden. Das Suchmuster <span class="regex">i)abc</span> würde beispielsweise nach "abc" suchen, ohne die Groß-/Kleinschreibung zu berücksichtigen. Weitere Optionen finden Sie in der unteren Tabelle.</p>

<h2 id="Options">Optionen (Groß-/Kleinschreibung-sensitiv)</h2>
<p>Geben Sie ganz am Anfang eines regulären Ausdrucks null oder mehr der folgenden Optionen an, gefolgt von einer schließenden runden Klammer. Das Suchmuster <span class="regex"><span class="red">im)</span>abc</span> beispielsweise sucht mit den Optionen "nicht-Groß-/Kleinschreibung-sensitiv" und "mehrzeilig" nach "abc" (die runde Klammer kann weggelassen werden, wenn keine Optionen vorhanden sind). Diese Art der Optionsangabe hat gegenüber den herkömmlichen Methoden den Vorteil, dass keine speziellen Begrenzungszeichen (wie z. B. Schrägstrich) erforderlich sind, und demzufolge diese innerhalb des Suchmusters nicht mit einem Escapezeichen versehen werden müssen. Darüber hinaus können die Optionen auf diese Weise einfacher geparst werden, was sich positiv auf die Leistung auswirkt.</p>
<table class="info">
  <tr>
    <th class="center">Option</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="opt_i">
    <td class="center bold">i</td>
    <td>Nicht-Groß-/Kleinschreibung-sensitive Übereinstimmung. Diese Option bewirkt, dass die Buchstaben A bis Z und die entsprechenden Kleinbuchstaben gleichwertig behandelt werden.</td>
  </tr>
  <tr id="Multiline">
    <td class="center bold">m</td>
    <td><p>Multiline-Modus. <em>Heuhaufen</em> wird nicht als durchgehende Zeile, sondern als eine Sammlung einzelner Zeilen angesehen (sofern Zeilenumbrüche enthalten sind). Folgende Änderungen treten dabei in Kraft:</p>
      <p>1) Zirkumflex (^) findet eine Übereinstimmung nach jedem Zeilenumbruch, sowie am Anfang von <em>Heuhaufen</em> (aber nicht nach einem Zeilenumbruch <em>ganz am Ende</em> von <em>Heuhaufen</em>).</p>
      <p>2) Dollar-Zeichen ($) findet eine Übereinstimmung vor jedem Zeilenumbruch (sowie ganz am Ende von <em>Heuhaufen</em>).</p>
      <p>Das Suchmuster <span class="regex"><span class="red">m)</span>^abc$</span> beispielsweise wird in xyz`r`n<span class="subj">abc</span> gefunden. Ohne die "m"-Option wäre dies nicht der Fall.</p>
      <p>Die "D"-Option wird ignoriert, wenn die "m"-Option vorhanden ist.</p></td>
  </tr>
  <tr id="opt_s">
    <td class="center bold">s</td>
    <td>DotAll-Modus. Bewirkt, dass ein Punkt (.) alle Arten von Zeichen findet, inklusive Zeilenumbrüche (normalerweise findet der Punkt keine Zeilenumbrüche). Es sind jedoch zwei Punkte erforderlich, um eine CRLF-Zeilenumbruchssequenz (`r`n) zu finden. Diese Option hat keinen Einfluss auf negative Klassen wie z. B. <span class="regex">[^a]</span> - diese Art von Klassen finden immer Zeilenumbrüche.</td>
  </tr>
  <tr id="opt_x">
    <td class="center bold">x</td>
    <td>Bewirkt, dass jegliche Leerraumzeichen im Suchmuster ignoriert werden, es sei denn, sie sind mit einem Escapezeichen versehen oder befinden sich in einer Zeichenklasse. Die Zeichen `n und `t werden auch ignoriert, weil sie, sobald sie PCRE erreichen, bereits rohe/normale Leerraumzeichen sind (\n und \t hingegen werden nicht ignoriert, weil sie PCRE-Escapesequenzen sind). Die "x"-Option ignoriert zudem eine Zeichenkette, die mit einer nicht-escapezeichenversehenen Raute (#) außerhalb einer Zeichenklasse beginnt und mit einem Zeilenumbruch endet. Dies macht es möglich, Kommentare in ein kompliziertes Suchmuster einzufügen. Beachten Sie aber, dass dies nur für Datenzeichen gilt; spezielle Zeichensequenzen, wie z. B. (?(, das ein bedingtes Teilsuchmuster einleitet, dürfen keine Leerraumzeichen enthalten.</td>
  </tr>
  <tr id="opt_A">
    <td class="center bold">A</td>
    <td>Erzwingt eine Verankerung des Suchmusters; das heißt, dass das Suchmuster nur am Anfang von <em>Heuhaufen</em> gefunden werden kann. Diese Option ist prinzipiell das gleiche wie, als würde man das Suchmuster explizit mit "^" verankern.</td>
  </tr>
  <tr id="opt_D">
    <td class="center bold">D</td>
    <td>Zwingt das Dollar-Zeichen ($), eine Übereinstimmung ganz am Ende von <em>Heuhaufen</em> zu finden, selbst wenn das letzte Element von <em>Heuhaufen</em> ein Zeilenumbruch ist. Wenn diese Option nicht vorhanden ist, findet $ eine Übereinstimmung direkt vor dem letzten Zeilenumbruch (falls vorhanden). Hinweis: Diese Option wird ignoriert, wenn die "m"-Option vorhanden ist.</td>
  </tr>
  <tr id="opt_J">
    <td class="center bold">J</td>
    <td>Erlaubt mehrere <a href="../lib/RegExMatch.htm#NamedSubPat">benannte Teilsuchmuster</a> mit demselben Namen. Diese Option kann für Suchmuster nützlich sein, in denen nur eines aus einer Sammlung von gleichnamigen Teilsuchmustern übereinstimmen kann. Hinweis: Wenn mehr als eine Instanz eines bestimmten Namens mit etwas übereinstimmt, wird nur die ganz links gespeichert. Außerdem sind Variablennamen nicht Groß-/Kleinschreibung-sensitiv.</td>
  </tr>
  <tr id="opt_U">
    <td class="center bold">U</td>
    <td>Ungreedy-Modus. Bringt die Quantoren <strong>*</strong>, <strong>?</strong>, <strong>+</strong> und <strong>{min,max}</strong> dazu, so wenig Zeichen wie möglich zu verbrauchen, um eine Übereinstimmung zu erzeugen, und überlässt die verbleibenden Zeichen dem nächsten Teil des Suchmusters. Wenn die "U"-Option nicht aktiv ist, kann ein einzelner Quantor ungreedy gemacht werden, indem ihm ein Fragezeichen nachgestellt wird. Bei <em>aktivierter</em> "U"-Option bewirkt das Fragezeichen genau das Gegenteil - es macht einen einzelnen Quantor greedy.</td>
  </tr>
  <tr id="opt_extra">
    <td class="center bold">X</td>
    <td>PCRE_EXTRA. Aktiviert PCRE-Features, die mit Perl inkompatibel sind. Aktuell gibt es nur ein einziges Feature dieser Art - es bewirkt, dass jeder umgekehrter Schrägstrich, gefolgt von einem Buchstaben ohne spezielle Funktion, dazu führt, dass eine Ausnahme ausgelöst wird. Diese Option hilft dabei, ungenutzte PCRE-Escapesequenzen für die zukünftige Verwendung zu reservieren. Lässt man diese Option weg, wird der umgekehrte Schrägstrich vor einem Buchstaben ohne spezielle Funktion einfach ignoriert (z. B. wird sowohl \g als auch g als normales g erkannt). Der umgekehrte Schrägstrich vor einem nicht-alphabetischen Zeichen ohne spezielle Funktion wird immer ignoriert, unabhängig von dieser Option (z. B. wird sowohl \/ als auch / als normaler Schrägstrich erkannt).</td>
  </tr>
  <tr id="Study">
    <td class="center bold">S</td>
    <td>Analysiert das Suchmuster, um zu versuchen, dessen Leistung zu verbessern. Dies ist nützlich, wenn ein bestimmtes Suchmuster (insbesondere ein komplexes) viele Male ausgeführt werden soll. Wenn PCRE einen Weg gefunden hat, die Leistung zu verbessern, wird PCRE diese Entdeckung zusammen mit dem Suchmuster in den Cache speichern, um sie später auf nachfolgende Suchmuster gleicher Art anzuwenden (diese Suchmuster sollten ebenfalls die S-Option enthalten, weil sie nur im Cache gefunden werden können, wenn die Optionsbuchstaben vorhanden und in gleicher Reihenfolge sind).</td>
  </tr>
  <tr id="opt_Callout">
    <td class="center bold">C</td>
    <td>Aktiviert den Auto-Callout-Modus. Weitere Informationen finden Sie unter <a href="RegExCallout.htm#auto">Callouts in regulären Ausdrücken</a>.</td>
  </tr>
  <tr id="NEWLINE_ANY">
    <td class="center bold">`a</td>
    <td><p>Aktiviert die Erkennung von zusätzlichen Zeilenumbruchsmarkierungen. Standardmäßig werden nur `r`n, `n und `r erkannt. Wenn diese Option aktiviert ist, werden zusätzlich `v/VT/vertical tab/chr(0xB), `f/FF/formfeed/chr(0xC), NEL/next-line/chr(0x85), LS/line separator/chr(0x2028) und PS/paragraph separator/chr(0x2029) erkannt.</p>
      <p>Die Optionen `a, `n und `r beeinflussen das Verhalten von <a href="RegEx-QuickRef.htm#anchor">Ankern (^ und $)</a> und <a href="RegEx-QuickRef.htm#dot">Punkt-Platzhaltern</a>.</p>
      <p>`a aktiviert zudem (*BSR_UNICODE), was dazu führt, dass \R beliebige Arten von Zeilenumbrüchen findet. \R wird standardmäßig `n, `r und `r`n finden; dieses Verhalten kann durch Kombinieren folgender Optionen wiederhergestellt werden: `a)(*BSR_ANYCRLF)</p>
    </td>
  </tr>
  <tr id="opt_esc_n">
    <td class="center bold">`n</td>
    <td>Bewirkt, dass ein LF-Zeichen (`n) die einzige anerkannte Zeilenumbruchsmarkierung ist (siehe oben).</td>
  </tr>
  <tr id="opt_esc_r">
    <td class="center bold">`r</td>
    <td>Bewirkt, dass ein CR-Zeichen (`r) die einzige anerkannte Zeilenumbruchsmarkierung ist (siehe oben).</td>
  </tr>
</table>
<p class="note"><strong>Hinweis</strong>: Optional können Leer- und Tabulatorzeichen verwendet werden, um die Optionen voneinander zu trennen.</p>

<h2 id="Common">Häufig verwendete Symbole und Syntax</h2>
<table class="info">
  <tr>
    <th class="center">Element</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
	<tr id="dot">
		<td class="center bold">.</td>
		<td>Standardmäßig der Platzhalter für ein beliebiges einzelnes Zeichen, außer `r (CR-Zeichen) oder `n (LF-Zeichen), was aber mit den Optionen <a href="#opt_s">DotAll (s)</a>, <a href="#opt_esc_n">LF (`n)</a>, <a href="#opt_esc_r">CR (`r)</a> oder <a href="#NEWLINE_ANY">`a</a> geändert werden kann. <span class="regex">ab.</span> beispielsweise wird in <span class="subj">abc</span>, <span class="subj">abz</span> und <span class="subj">ab_</span> gefunden.</td>
	</tr>
	<tr>
		<td class="center bold">*</td>
		<td><p>Der Platzhalter für 0 oder mehr Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). <span class="regex">a*</span> beispielsweise wird in <span class="subj">a</span>b und <span class="subj">aaa</span>b gefunden, aber auch in einer Zeichenkette, die überhaupt kein "a" enthält.</p>
	      <p><strong>Punkt-Stern-Platzhalter:</strong> <span class="regex">.*</span> ist einer der tolerantesten Platzhalter - er findet 0 oder mehr Vorkommen eines <em>beliebigen</em> Zeichens (außer Zeilenumbruch: `r und `n). <span class="regex">abc.*123</span> beispielsweise wird sowohl in <span class="subj">abcIrgendwas123</span> als auch in <span class="subj">abc123</span> gefunden.</p>		  </td>
	</tr>
	<tr>
	  <td class="center bold">?</td>
	  <td>Der Platzhalter für 0 oder 1 Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). Oder auch: "Das voranstehende Element ist optional". <span class="regex">colou?r</span> beispielsweise wird sowohl in <span class="subj">color</span> als auch in <span class="subj">colour</span> gefunden, weil das "u" optional ist.</td>
  </tr>
	<tr>
	  <td class="center bold">+</td>
	  <td>Der Platzhalter für 1 oder mehr Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). <span class="regex">a+</span> beispielsweise wird in <span class="subj">a</span>b und <span class="subj">aaa</span>b gefunden. Im Gegensatz zu <span class="regex">a*</span> und <span class="regex">a?</span> wird <span class="regex">a+</span> nicht in einer Zeichenkette gefunden, die überhaupt kein "a" enthält.</td>
  </tr>
	<tr>
	  <td class="center bold">{min,max}</td>
	  <td><p>Der Platzhalter für <em>min</em> bis <em>max</em> Vorkommen des vorherigen Elements (Zeichen, <a href="#class">Klasse</a> oder <a href="#subpat">Teilsuchmuster</a>). <span class="regex">a{1,2}</span> beispielsweise wird in <span class="subj">a</span>b und <span class="subj">aa</span>ab gefunden.</p>
        <p>{3} hingegen bedeutet, dass genau 3 Vorkommen gefunden werden, und {3<strong>,</strong>} bedeutet, dass 3 oder mehr Vorkommen gefunden werden. Hinweis: Die angegebenen Zahlen müssen kleiner als 65536 sein, außerdem darf die erste Zahl nicht größer als die zweite Zahl sein.</p></td>
  </tr>
	<tr id="class">
	  <td class="center bold">[...]</td>
	  <td><p><strong>Zeichenklassen:</strong> Der Platzhalter für ein Zeichen, das in den eckigen Klammern direkt oder via Zeichenbereich definiert ist. <span class="regex">[abc]</span> beispielsweise bedeutet: "ein Zeichen, das entweder a, b oder c ist". Mithilfe eines Bindestrichs kann ein Bereich definiert werden; <span class="regex">[a-z]</span> beispielsweise bedeutet: "ein Zeichen von a bis z". Zeichenlisten und -bereiche können kombiniert werden; <span class="regex">[a-zA-Z0-9_]</span> beispielsweise bedeutet: "ein Zeichen, das alphanumerisch oder ein Unterstrich ist".</p>
	    <p>Nach einer Zeichenklasse kann <strong>*</strong>, <strong>?</strong>, <strong>+</strong> oder <strong>{min,max}</strong> erfolgen. <span class="regex">[0-9]+</span> beispielsweise findet 1 oder mehr Vorkommen einer beliebigen Ziffer; wie z. B. in xyz<span class="subj">123</span>, aber nicht in abcxyz.</p>
        <p>Des Weiteren kann man vordefinierte Zeichenbereiche (POSIX) in Form von <strong>[[:xxx:]]</strong> angeben; xxx ist dabei eines der folgenden Wörter: alnum, alpha, ascii (0-127), blank (Leerzeichen oder Tabulator), cntrl (Steuerzeichen), digit (0-9), xdigit (hexadezimale Ziffern), print, graph (print ohne space), punct, lower, upper, space (Leerraumzeichen), word (das gleiche wie <a href="#word">\w</a>).</p>
        <p>In einer Zeichenklasse müssen nur Zeichen mit einem Escapezeichen versehen werden, die innerhalb einer Klasse eine spezielle Funktion haben; z. B. <span class="regex">[\^a]</span>, <span class="regex">[a\-b]</span>, <span class="regex">[a\]]</span> und <span class="regex">[\\a]</span>.</p></td>
  </tr>
	<tr>
	  <td class="center bold">[^...]</td>
	  <td>Der Platzhalter für ein Zeichen, das <strong>nicht</strong> in den eckigen Klammern direkt oder via Zeichenbereich definiert ist. <span class="regex">[^/]*</span> beispielsweise findet 0 oder mehr Vorkommen eines beliebigen Zeichens, das <em>kein</em> Schrägstrich ist, wie z. B. <span class="subj">http:</span>//. <span class="regex">[^0-9xyz]</span> beispielsweise findet ein Zeichen, das weder eine Ziffer noch der Buchstabe x, y oder z ist.</td>
  </tr>
	<tr>
	  <td class="center bold">\d</td>
	  <td>Der Platzhalter für eine Ziffer (entspricht der Klasse <span class="regex">[0-9]</span>). Großes <strong>\D</strong> hingegen ist der Platzhalter für ein Zeichen, das <em>keine</em> Ziffer ist. Dieser und die beiden unteren Platzhalter können innerhalb einer <a href="#class">Klasse</a> verwendet werden; <span class="regex">[\d.-]</span> beispielsweise bedeutet: "eine Ziffer, ein Punkt oder ein Minuszeichen".</td>
  </tr>
	<tr>
	  <td class="center bold">\s</td>
	  <td>Der Platzhalter für ein Leerraumzeichen, sprich Leerzeichen, Tabulatorzeichen, CR-Zeichen (`r) und LF-Zeichen (`n). Großes <strong>\S</strong> hingegen ist der Platzhalter für ein Zeichen, das <em>kein</em> Leerraumzeichen ist.</td>
  </tr>
	<tr id="word">
	  <td class="center bold">\w</td>
	  <td>Der Platzhalter für ein Zeichen, das alphanumerisch oder ein Unterstrich ist. Entspricht der Klasse <span class="regex">[a-zA-Z0-9_]</span>. Großes <strong>\W</strong> hingegen ist der Platzhalter für ein Zeichen, das <em>kein</em> alphanumerisches Zeichen oder Unterstrich ist.</td>
  </tr>
	<tr id="anchor">
	  <td class="center bold">^<br>$</td>
	  <td><p>Zirkumflex (^) und Dollar-Zeichen ($) werden <em>Anker</em> genannt und verbrauchen keine Zeichen; stattdessen verankern sie das Suchmuster am Anfang oder Ende des zu durchsuchenden Textes.</p>
	    <p><strong>^</strong> wird in der Regel am Anfang eines Suchmusters angegeben, um zu erreichen, dass die Übereinstimmung ganz am Anfang einer Zeile stattfindet. <span class="regex">^abc</span> beispielsweise wird in <span class="subj">abc</span>123 gefunden, aber nicht in 123abc.</p>
	    <p><strong>$</strong> wird in der Regel am Ende eines Suchmusters angegeben, um zu erreichen, dass die Übereinstimmung ganz am Ende einer Zeile stattfindet. <span class="regex">abc$</span> beispielsweise wird in 123<span class="subj">abc</span> gefunden, aber nicht in abc123.</p>
      <p>Beide Anker können kombiniert werden. <span class="regex">^abc$</span> beispielsweise wird nur in <span class="subj">abc</span> gefunden, aber nicht in 123abc oder abc123.</p>
      <p>Wenn der zu durchsuchende Text mehrere Zeilen enthält, können Sie mit der <a href="#Multiline">"m"-Option</a> dafür sorgen, dass die Anker nicht für den gesamten Text, sondern für jede Zeile gelten. <span class="regex">m)^abc$</span> beispielsweise wird in 123`r`n<span class="subj">abc</span>`r`n789 gefunden. Ohne die "m"-Option wäre dies nicht der Fall.</p></td>
  </tr>
	<tr>
	  <td class="center bold">\b</td>
	  <td><strong>\b</strong> bedeutet "word boundary" (auf Deutsch: Wortgrenze) und fungiert wie ein Anker, weil es keine Zeichen verbraucht. Es setzt voraus, dass der Status des aktuellen Zeichens als <a href="#word">Wortzeichen (\w)</a> das Gegenteil des Status des vorherigen Zeichens ist. Es wird in der Regel verwendet, um zu verhindern, dass das gesuchte Wort innerhalb eines anderen Wortes gefunden wird. <span class="regex">\bcat\b</span> beispielsweise wird nicht in catfish gefunden, aber es wird in <span class="subj">cat</span> gefunden, unabhängig davon, welches Satz- oder Leerraumzeichen es umgibt. Großes <strong>\B</strong> bewirkt genau das Gegenteil: Es setzt voraus, dass sich das aktuelle Zeichen <em>nicht</em> an einer Wortgrenze befindet.</td>
  </tr>
	<tr>
	  <td class="center bold">|</td>
	  <td>Der senkrechte Strich trennt zwei oder mehr Alternativen. Es erfolgt eine Übereinstimmung, wenn <em>eine</em> der Alternativen zutrifft. <span class="regex">gray|grey</span> beispielsweise wird sowohl in <span class="subj">gray</span> als auch in <span class="subj">grey</span> gefunden. <span class="regex">gr(a|e)y</span> bewirkt das gleiche, allerdings muss man dafür die unten beschriebenen runden Klammern verwenden.</td>
  </tr>
	<tr id="subpat">
	  <td class="center bold">(...)</td>
	  <td><p>Eingeklammerte Elemente werden häufig verwendet, um Folgendes zu bewirken:</p>
	    <ul>
	      <li>Die Reihenfolge der Auswertung bestimmen. Zum Beispiel findet <span class="regex">(Sun|Mon|Tues|Wednes|Thurs|Fri|Satur)day</span> den englischen Namen jeden Tages.</li>
	      <li><strong>*</strong>, <strong>?</strong>, <strong>+</strong> oder <strong>{min,max}</strong> auf <em>mehrere</em> Zeichen anwenden. <span class="regex">(abc)+</span> beispielsweise findet 1 oder mehr Vorkommen der Zeichenkette "abc"; wie z. B. in <span class="subj">abcabc</span>123, aber nicht in ab123 oder bc123.</li>
          <li id="capture">Ein Teilsuchmuster erfassen, wie den Punkt-Stern-Platzhalter in <span class="regex">abc<span class="red">(.*)</span>xyz</span>. Die <a href="../lib/RegExMatch.htm">RegExMatch-Funktion</a> speichert in diesem Fall die Teilzeichenkette, die von jedem Teilsuchmuster gefunden wird, in das <a href="../lib/RegExMatch.htm#MatchObject">Ausgabe-Array</a>. Die <a href="../lib/RegExReplace.htm">RegExReplace-Funktion</a> hingegen kann mittels <a href="../lib/RegExReplace.htm#BackRef">Rückreferenzen</a> wie $1 die Teilzeichenkette, die von jedem Teilsuchmuster gefunden wird, wieder in das Ergebnis einfügen. Um die Klammern ohne den Nebeneffekt der Erfassung eines Teilsuchmusters zu verwenden, geben Sie für die ersten beiden Zeichen innerhalb der Klammern <strong>?:</strong> an; zum Beispiel: <span class="regex">(<span class="red">?:</span>.*)</span></li>
	      <li><a href="#Options">Optionen</a> spontan ändern. <span class="regex">(?im)</span> beispielsweise schaltet die Optionen "nicht-Groß-/Kleinschreibung-sensitiv" und "mehrzeilig" für den restlichen Teil des Suchmusters (oder Teilsuchmusters) ein. <span class="regex">(?-im)</span> hingegen würde beide Optionen ausschalten. Es werden alle Optionen außer DPS`r`n`a unterstützt.</li>
	    </ul></td>
  </tr>
	<tr>
	  <td class="center bold">\t<br>\r<br>usw.</td>
	  <td><p>Diese Escapesequenzen repräsentieren Sonderzeichen. Die gebräuchlichsten sind <strong>\t</strong> (Tabulator), <strong>\r</strong> (CR-Zeichen) und <strong>\n</strong> (LF-Zeichen). In AutoHotkey kann in solchen Fällen anstelle des umgekehrten Schrägstrichs optional ein Akzent (`) verwendet werden. Escapesequenzen in Form von <strong>\xhh</strong> werden ebenfalls unterstützt - <em>hh</em> ist hierbei der hexadezimale Code eines beliebigen ANSI-Zeichens zwischen 00 und FF.</p>
      <p><strong>\R</strong> findet <code>`r`n</code>, <code>`n</code> und <code>`r</code> (innerhalb einer <a href="#class">Zeichenklasse</a> wird \R lediglich als normales "R" behandelt).</p></td>
  </tr>
  <tr id="slashP">
    <td class="center bold">\p{xx}<br>\P{xx}<br>\X</td>
    <td><p>Unicode-Eigenschaften. <strong>\p{xx}</strong> findet ein Zeichen mit der xx-Eigenschaft, während <strong>\P{xx}</strong> ein beliebiges Zeichen <i>ohne</i> die xx-Eigenschaft findet. Zum Beispiel findet <span class="regex">\pL</span> einen beliebigen Buchstaben und <span class="regex">\p{Lu}</span> einen beliebigen Großbuchstaben. <strong>\X</strong> findet eine beliebige Anzahl von Zeichen, die eine erweiterte Unicode-Sequenz bilden.</p>
    <p>Eine vollständige Liste aller unterstützten Eigenschaftsnamen und weitere Einzelheiten finden Sie unter <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a> mit Suchbegriffen wie "\p{xx}".</p></td>
  </tr>
  <tr id="UCP">
    <td class="center bold">(*UCP)</td>
    <td><p>Aus Leistungsgründen erkennen \d, \D, \s, \S, \w, \W, \b und \B standardmäßig nur ASCII-Zeichen. Wenn das Suchmuster mit <strong>(*UCP)</strong> beginnt, werden Unicode-Eigenschaften zum Finden von Zeichen verwendet. So zum Beispiel wäre \w dann äquivalent zu <span class="regex">[\p{L}\p{N}_]</span> und \d äquivalent zu <span class="regex">\p{Nd}</span>.</p>
    </td>
  </tr>
</table>
<p><strong>Greed (Gier)</strong>: Standardmäßig versuchen die Quantoren <strong>*</strong>, <strong>?</strong>, <strong>+</strong>, und <strong>{min,max}</strong>, <em>so viele Zeichen wie möglich</em> einzubeziehen, um eine Übereinstimmung zu finden. Um dieses Verhalten auf <em>so wenig Zeichen wie möglich</em> zu begrenzen, fügen Sie nach den Quantoren ein Fragezeichen an. Zum Beispiel bedeutet das Suchmuster <span class="regex">&lt;.+&gt;</span> (das kein Fragezeichen enthält): "Suche nach einem &lt;, gefolgt von 1 oder mehr Zeichen, gefolgt von einem &gt;". Um zu verhindern, dass das Suchmuster die <em>komplette</em> Zeichenkette <span class="subj"><span class="red"><strong>&lt;</strong></span>em&gt;text&lt;/em<span class="red"><strong>&gt;</strong></span></span> findet, fügen Sie nach dem Pluszeichen ein Fragezeichen an: <span class="regex">&lt;.+<span class="red">?</span>&gt;</span>. Dies führt dazu, dass die Übereinstimmung bereits beim ersten '&gt;' endet und dementsprechend nur der erste HTML-Tag <span class="subj"><span class="red"><strong>&lt;</strong></span>em<span class="red"><strong>&gt;</strong></span></span> gefunden wird.</p>
<p><strong>Vorausschauende und zurückschauende Behauptungen</strong>: Die Gruppen <span class="regex">(?=...)</span>, <span class="regex">(?!...)</span>, <span class="regex">(?&lt;=...)</span> und <span class="regex">(?&lt;!...)</span> werden <em>Behauptungen</em> genannt und verlangen, dass eine Bedingung erfüllt sein muss. Sie verbrauchen keine Zeichen. Zum Beispiel ist <span class="regex">abc(?=.*xyz)</span> eine vorausschauende Behauptung, die verlangt, dass die Zeichenkette xyz irgendwo rechts neben der Zeichenkette abc vorkommen muss (wenn sie dort nicht ist, gilt das gesamte Suchmuster als keine Übereinstimmung). <span class="regex">(?=...)</span> ist eine <em>positive</em> vorausschauende Behauptung, weil sie verlangt, dass ein bestimmtes Suchmuster existieren muss. <span class="regex">(?!...)</span> hingegen ist eine <em>negative</em> vorausschauende Behauptung, weil sie verlangt, dass ein bestimmtes Suchmuster <em>fehlen</em> muss. <span class="regex">(?&lt;=...)</span> und <span class="regex">(?&lt;!...)</span> sind positive bzw. negative <em>zurückschauende</em> Behauptungen, weil sie nach <em>links</em> und nicht nach rechts von der aktuellen Position schauen. Zurückschauende Behauptungen unterliegen mehr Einschränkungen als vorausschauende Behauptungen, weil sie keine Quantoren mit variierbarer Größe unterstützen, wie z. B. <strong>*</strong>, <strong>?</strong> und <strong>+</strong>. Die Escapesequenz <strong>\K</strong> ist mit einer zurückschauenden Behauptung vergleichbar, da sie bewirkt, dass alle zuvor gefundenen Zeichen in der endgültigen gefundenen Zeichenkette weggelassen werden. <span class="regex">foo\Kbar</span> beispielsweise wird "foobar" finden, aber melden, dass es "bar" gefunden hat.</p>
<p><strong>Siehe auch</strong>: <a href="../lib/RegExMatch.htm">RegExMatch</a>, <a href="../lib/RegExReplace.htm">RegExReplace</a> und <a href="../lib/SetTitleMatchMode.htm">SetTitleMatchMode RegEx</a>.</p>
<p class="note"><strong>Abschließende Bemerkung</strong>: Beachten Sie, dass diese Seite nur RegEx-Features umfasst, die häufig zum Einsatz kommen. Andere Features wie z. B. bedingte Teilsuchmuster fehlen gänzlich. Die komplette PCRE-Bedienungsanleitung finden Sie unter <a href="http://www.pcre.org/pcre.txt">www.pcre.org/pcre.txt</a> (englisch).</p>

</body>
</html>

<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Scripts - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Erfahren Sie mehr über Skripte im Allgemeinen, das Aufteilen langer Zeilen, das Kompilieren eines Skripts, das Übergeben von Befehlszeilenparametern, den Zeichensatz und das Debuggen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Skripte</h1>
<p>Verwandte Themen:</p>
<ul>
  <li><a href="Program.htm">Verwendung des Programms</a>: Wie man AutoHotkey grundsätzlich nutzt.</li>
  <li><a href="Concepts.htm">Konzepte und Konventionen</a>: Allgemeine Erklärung zu verschiedenen Konzepten, auf die AutoHotkey basiert.</li>
  <li><a href="Language.htm">Skriptsprache</a>: Spezifische Details zur Syntax (wie man Skripte schreibt).</li>
</ul>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#intro">Einführung</a></li>
  <li><a href="#auto">Startphase des Skripts (der Auto-Execute-Thread)</a>: Unmittelbar nach dem Start des Skripts Aktionen durchführen und Standardeinstellungen ändern.</li>
  <li><a href="#continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</a>: Zur Erhöhung der Übersichtlichkeit und Wartbarkeit des Skripts.</li>
  <li><a href="#lib">Skriptbibliotheksordner</a></li>
  <li><a href="#ahk2exe">Ein Skript in eine EXE-Datei umwandeln (Ahk2Exe)</a>: Ein .ahk-Skript in eine .exe-Datei umwandeln, die auf jedem PC ausgeführt werden kann.</li>
  <li><a href="#cmd">Befehlszeilenparameter an ein Skript übergeben</a>: Die Variable A_Args enthält die eingehenden Parameter.</li>
  <li><a href="#cp">Zeichensatz einer Skript-Datei</a>: ASCII-fremde Zeichen sicher in Skripten verwenden.</li>
  <li><a href="#debug">Ein Skript debuggen</a>: Wie die Fehler eines Skripts, das sich falsch verhält, gefunden werden können.</li>
</ul>
<h2 id="intro">Einführung</h2>
<p>Jedes Skript ist eine reine Textdatei mit mehreren Zeilen, die das Programm (AutoHotkey.exe) ausführen soll. Solche Skripte können <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> enthalten oder sogar nur aus diesen bestehen. Falls keine Hotkeys und Hotstrings vorhanden sind, wird ein Skript, sobald es gestartet wird, seine Funktionen von oben nach unten und der Reihe nach ausführen.</p>
<p>Das Programm lädt das Skript zeilenweise in den Speicher. Während des Ladevorgangs wird das Skript <a href="misc/Performance.htm">optimiert</a> und überprüft, ob es gültig ist. Wenn das Programm auf einen Syntaxfehler stößt, wird er angezeigt. Solche Fehler müssen korrigiert werden, bevor das Skript ausgeführt werden kann.</p>

<h2 id="auto">Startphase des Skripts (der Auto-Execute-Thread)</h2>
<p>Nach dem Laden des Skripts wird der <em>Auto-Execute-Thread</em> die Ausführung bei der Zeile ganz oben im Skript beginnen und diese fortsetzen, bis ihm befohlen wird, zu stoppen, z. B. via <a href="commands/Return.htm">Return</a>, <a href="commands/ExitApp.htm">ExitApp</a> oder <a href="commands/Exit.htm">Exit</a>. Das physische Ende des Skripts fungiert auch als <a href="commands/Exit.htm">Exit</a>.</p>
<p id="persistent">Das Skript wird nach Abschluss der Startphase automatisch terminiert, wenn es keine <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, sichtbare <a href="objects/Gui.htm">GUIs</a>, aktive <a href="commands/SetTimer.htm">Timer</a>, <a href="commands/OnClipboardChange.htm">Überwachungen der Zwischenablage</a> und <a href="commands/InputHook.htm">InputHooks</a> hat und die <a href="commands/Persistent.htm">Persistent</a>-Funktion nicht aufgerufen hat. Ansonsten läuft das Skript im Leerlauf weiter, wo es nur noch auf Ereignisse wie Hotkeys, Hotstrings, <a href="objects/GuiOnEvent.htm">GUI-Ereignisse</a>, <a href="objects/Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="commands/SetTimer.htm">Timer</a> reagieren kann. Ändern sich diese Bedingungen nach Abschluss der Startphase des Skripts (zum Beispiel beim Deaktivieren des letzten Timers), könnte sich das Skript schließen, sobald der letzte laufende Thread endet oder das letzte GUI-Fenster geschlossen wird.</p>
<p>Jedes Mal, wenn ein neuer <a href="misc/Threads.htm">Thread</a> gestartet wird (sei es via <a href="Hotkeys.htm">Hotkey</a>, <a href="Hotstrings.htm">Hotstring</a>, <a href="commands/SetTimer.htm">Timer</a> oder aufgrund eines anderen Ereignisses), werden die folgenden Einstellungen aus dem Auto-Execute-Thread kopiert. Wenn diese nicht via Auto-Execute-Thread gesetzt sind, werden die vordefinierten Standardwerte verwendet (welche das sind, finden Sie auf den folgenden Seiten): <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/Critical.htm">Critical</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>, <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/FileEncoding.htm">FileEncoding</a>, <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/SendLevel.htm">SendLevel</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>, <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetRegView.htm">SetRegView</a>, <a href="commands/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>, <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SetWinDelay.htm">SetWinDelay</a>, und <a href="commands/Thread.htm">Thread</a>.</p>
<p>Jedem <a href="misc/Threads.htm">Thread</a> ist eine eigene Sammlung von den oben genannten Einstellungen zugewiesen; das Ändern dieser Einstellungen hat keinen Einfluss auf andere Threads.</p>
<p>Die "Standardeinstellung" für eine der oben genannten Funktionen bezieht sich in der Regel auf die aktuelle Einstellung des Auto-Execute-Threads, die vorerst mit der programmdefinierten Standardeinstellung übereinstimmt.</p>
<p>Traditionell wird der Anfang des Skripts als <em>automatischer Ausführungsbereich</em> bezeichnet. Der Auto-Execute-Thread ist hingegen nicht nur auf den Anfang des Skripts beschränkt. Alle Funktionen, die im Auto-Execute-Thread aufgerufen werden, können auch Einfluss auf die Standardeinstellungen haben. Da Direktiven und Funktions-, Hotkey-, Hotstring- und Klassendefinitionen bei der Ausführung übersprungen werden, ist es möglich, Code für die Startphase in jeder Datei zu platzieren. Zum Beispiel könnte man eine globale Variable, die von einer Gruppe von Hotkeys verwendet wird, oberhalb (oder sogar unterhalb) dieser Hotkeys initialisieren, anstatt sie am Anfang des Skripts zu platzieren.</p>

<h2 id="continuation">Eine lange Zeile in mehreren kurzen Zeilen aufteilen</h2>
<p>Lange Zeilen können in mehreren kurzen Zeilen aufgeteilt werden, um die Übersichtlichkeit und Wartbarkeit des Skripts zu erhöhen. Die Ausführungsgeschwindigkeit des Skripts wird dabei nicht reduziert, weil solche Zeilen bereits beim Starten des Skripts im Speicher zusammengeführt werden.</p>
<p>Es gibt drei Methoden, die in der Regel kombiniert eingesetzt werden können:</p>
<ul>
  <li><a href="#continuation-line">Fortsetzungsoperator</a>: Beginnen oder enden Sie eine Zeile mit einem Ausdrucksoperator, um sie mit der vorherigen bzw. nächsten Zeile zu verbinden.</li>
  <li><a href="#continuation-expr">Fortsetzung durch Umschließen</a>: Ein Teilausdruck, der mit (), [] oder {} umschlossen ist, kann in den meisten Fällen automatisch mehrere Zeilen umfassen.</li>
  <li><a href="#continuation-section">Fortsetzungsbereich</a>: Markieren Sie eine Gruppe von Zeilen, die zusammengeführt werden sollen, inklusive Optionen, wie z. B. welcher Text (oder Code) zwischen den Zeilen eingefügt werden soll.</li>
</ul>
<p id="continuation-line"><strong>Fortsetzungsoperator</strong>: Eine Zeile, die mit einem Komma oder mit einem beliebigen <a href="Variables.htm#Operators">Ausdrucksoperator</a> (außer ++ und --) beginnt, wird automatisch mit der darüberliegenden Zeile zusammengeführt. Analog dazu wird eine Zeile, die mit einem Ausdrucksoperator endet, automatisch mit der darunterliegenden Zeile zusammengeführt. Im folgenden Beispiel wird die zweite Zeile an die erste Zeile angefügt, weil sie mit einem Komma beginnt:</p>
<pre>FileAppend "Das ist der Text, der angefügt wird.`n"   <em>; Kommentar hier möglich.</em>
    <strong>,</strong> A_ProgramFiles "\BeliebigeAnwendung\Log-Datei.txt"  <em>; Kommentar.</em></pre>
<p>Die Zeilen im nächsten Beispiel werden zu einer einzelnen Zeile zusammengeführt, weil die letzten beiden Zeilen mit "and" oder "or" beginnen:</p>
<pre>if Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau"   <em>; Kommentar.</em>
    <strong>or</strong> Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß"   <em>; Kommentar.</em>
    <strong>and</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em></pre>
<p>Der <a href="Variables.htm#ternary">ternäre Operator</a> ist auch ein guter Kandidat:</p>
<pre>ProduktIstVerfügbar := (Farbe = "Rot")
    <strong>?</strong> false  <em>; Rote Produkte sind nicht verfügbar, daher ist der folgende Funktionsaufruf irrelevant.</em>
    <strong>:</strong> ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Die folgenden Beispiele sind äquivalent zu den oben genannten:</p>
<pre>FileAppend "Das ist der Text, der angefügt wird.`n"<strong>,</strong>   <em>; Kommentar hier möglich.</em>
    A_ProgramFiles "\BeliebigeAnwendung\Log-Datei.txt"  <em>; Kommentar.</em>

if Farbe = "Rot" or Farbe = "Grün" or Farbe = "Blau" <strong>or</strong>   <em>; Kommentar.</em>
    Farbe = "Schwarz" or Farbe = "Grau" or Farbe = "Weiß") <strong>and</strong>   <em>; Kommentar.</em>
    ProduktIstInFarbeVerfügbar(Produkt, Farbe)   <em>; Kommentar.</em>

ProduktIstVerfügbar := (Farbe = "Rot") <strong>?</strong>
    false <strong>:</strong> <em>; Rote Produkte sind nicht verfügbar, daher ist der folgende Funktionsaufruf irrelevant.</em>
    ProduktIstInFarbeVerfügbar(Produkt, Farbe)</pre>
<p>Obwohl die Einrückungen in den oberen Beispielen optional sind, machen sie eventuell deutlich, welche Zeilen zusammengehören. In den Beispielen oben können leere Zeilen oder <a href="Language.htm#comments">Kommentare</a> zwischen oder am Ende jeder Zeile eingefügt werden.</p>
<p>Ein Fortsetzungsoperator kann nicht mit einem automatisch-ersetzenden Hotstring oder einer Direktive außer <a href="commands/_HotIf.htm">#HotIf</a> verwendet werden.</p>
<p id="continuation-expr"><strong>Fortsetzung durch Umschließen</strong>: Enthält eine Zeile einen Ausdruck oder eine Funktions-/Eigenschaftsdefinition mit einer nicht geschlossenen Klammer <code>(</code>/<code>[</code>/<code>{</code>, wird sie mit nachfolgenden Zeilen verbunden, bis sich die Anzahl der Start- und Endklammern ausgleicht. Das heißt, dass ein Teilausdruck, der mit runden, eckigen oder geschweiften Klammern umschlossen ist, in den meisten Fällen automatisch mehrere Zeilen umspannen kann. Zum Beispiel:</p>
<pre>
meinArray := [
  "Element 1",
  "Element 2",
]
MsgBox(
    "Der Wert von Element 2 ist " meinArray[2],
    "Titel",
    "ok iconi"
    )
</pre>
<p>Fortsetzungsausdrücke können beide Arten von <a href="Language.htm#comments">Kommentaren</a> enthalten.</p>
<p>Fortsetzungsausdrücke können normale <a href="#continuation-section">Fortsetzungsbereiche</a> enthalten. Wenn also, wie bei jeder Zeile mit einem Ausdruck, eine Zeile mit einer runden Startklammer (<code>(</code>) beginnt, die nicht mit einem Escapezeichen versehen ist, wird sie als Anfang eines Fortsetzungsbereichs betrachtet, sofern auf derselben Zeile keine runde Endklammer (<code>)</code>) erfolgt.</p>
<p>Mit dieser Methode allein ist es nicht möglich, in Anführungszeichen gesetzte Zeichenketten auf mehrere Zeilen zu strecken. Allerdings siehe oben.</p>
<p>Fortsetzung durch Umschließen kann mit einem Fortsetzungsoperator kombiniert werden. Zum Beispiel:</p>
<pre>meinArray :=  <em>; Der Zuweisungsoperator bewirkt eine Fortsetzung.</em>
[  <em>; Klammern umschließen die folgenden zwei Zeilen.</em>
  "Element 1",
  "Element 2",
]</pre>
<p>Eine geschweifte Klammer (<code>{</code>) am Ende einer Zeile bewirkt keine Fortsetzung, wenn das Programm feststellt, dass sie als Anfang eines Blocks (<a href="commands/Block.htm#otb">OTB-Style</a>) und nicht als Anfang einer <a href="Language.htm#object-literal">direkten Objekt-Schreibweise</a> interpretiert werden soll. Im Einzelnen (in absteigender Prioritätsreihenfolge):</p>
<ul>
  <li>Eine geschweifte Klammer wird niemals als Anfang eines Blocks interpretiert, wenn sie eine nicht geschlossene Klammer <code>(</code>/<code>[</code>/<code>{</code> davor hat, da dies zu einem ungültigen Ausdruck führen würde. Zum Beispiel wäre die geschweifte Klammer in <code>If ({</code> der Beginn einer direkten Objekt-Schreibweise.</li>
  <li>Es ist nicht erlaubt, nach den Klammern <code>)</code> oder <code>]</code> eine direkte Objekt-Schreibweise zu beginnen. Wenn also die geschweifte Klammer nach diesen Symbolen erfolgt (ohne Leerraumzeichen), wird sie als Anfang eines Blocks interpretiert (z. B. für eine Funktions- oder Eigenschaftsdefinition).</li>
  <li>Bei <a href="Language.htm#control-flow">Kontrollanweisungen</a>, die einen Körper benötigen (und daher OTB unterstützen), kann die geschweifte Klammer nur dann der Anfang einer direkten Objekt-Schreibweise sein, wenn sie ein Operator davor hat, wie z. B. <code>:= {</code> oder <code>for x <strong>in</strong> {</code>. Das heißt im Endeffekt, dass die geschweifte Klammer in <code>Loop {</code> immer einen Block beginnen würde und <code>If {</code> und <code>While {</code> immer falsch wären.</li>
</ul>
<p>Eine geschweifte Klammer kann ohne Probleme genutzt werden, um Funktionsaufrufe, Ausdrücke oder Kontrollanweisungen, die keinen Körper benötigen, auf der nächsten Zeile fortzusetzen. Zum Beispiel:</p>
<pre>meineFn() {
    return {
        key: "wert"
    }
}</pre>
<p id="continuation-section"><strong>Fortsetzungsbereich</strong>: Diese Methode sollte verwendet werden, wenn sehr viele Zeilen zusammengeführt werden müssen oder wenn die Zeilen nicht für die anderen Methoden geeignet sind. Diese Methode kann sowohl bei <a href="Hotstrings.htm">automatisch-ersetzenden Hotstrings</a> als auch bei beliebigen <a href="Variables.htm#Expressions">Ausdrücken</a> angewendet werden. Zum Beispiel:</p>
<pre><em>; BEISPIEL #1:</em>
Var := "
(
Eine Textzeile.
Standardmäßig wird das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile gespeichert.
	Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch gespeichert.
Zusätzlich werden "Anführungszeichen" bei Bedarf <a href="#continuation_quotes">automatisch mit einem Escapezeichen versehen</a>.
)"

<em>; BEISPIEL #2:</em>
FileAppend "
(
Zeile 1 vom Text.
Zeile 2 vom Text. Standardmäßig befindet sich ein Zeilenumbruchszeichen (`n) zwischen den Zeilen.
)", A_Desktop "\Meine Datei.txt"</pre>
<p>In den oberen Beispielen sieht man oben und unten runde Klammern, die mehrere Zeilen eingrenzen. Auch <em>Fortsetzungsbereich</em> genannt. Beachten Sie, dass jeglicher Code nach der runden Endklammer auch mit den anderen Zeilen verbunden ist (ohne Trennzeichen), allerdings sind die Start- und Endklammern nicht enthalten.</p>
<p>Wenn die Zeile über dem Fortsetzungsbereich mit einem <a href="Concepts.htm#names">Namenszeichen</a> endet und der Bereich nicht innerhalb eines Anführungszeichens beginnt, wird automatisch ein einzelnes Leerzeichen eingefügt, um den Namen vom Inhalt des Fortsetzungsbereichs zu trennen.</p>
<p id="continuation_quotes">Anführungszeichen werden automatisch mit einem Escapezeichen versehen (also als direkt geschriebene Zeichen interpretiert), wenn der Fortsetzungsbereich innerhalb einer in Anführungszeichen gesetzte Zeichenkette beginnt, wie in den Beispielen oben. Ansonsten verhalten sich Anführungszeichen wie gewohnt; das heißt, dass Fortsetzungsbereiche Ausdrücke mit in Anführungszeichen gesetzte Zeichenketten enthalten können.</p>
<p id="continuation_defaults">Standardmäßig werden Leer- und Tabulatorzeichen am Anfang weggelassen, abhängig von der Einrückung der ersten Zeile innerhalb des Fortsetzungsbereiches. Enthält die erste Zeile eine Mischung aus Leer- und Tabulatorzeichen, wird nur der erste Zeichentyp als Einrückung behandelt. Wenn jede Zeile weniger eingerückt ist als die erste Zeile oder mit den falschen Zeichen eingerückt ist, werden alle Leerraumzeichen am Anfang auf dieser Zeile beibehalten. </p>
<p>Das Standardverhalten eines Fortsetzungsbereichs kann überschrieben werden, indem man eine oder mehrere der folgenden Optionen auf der rechten Seite der runden Startklammer einfügt. Mehrere Optionen müssen mit Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>( LTrim Join|</code>.</p>
<p id="Join"><strong>Join</strong>: Gibt an, wie die Zeilen verbunden werden sollen. Lässt man diese Option weg, wird jeder Zeile, außer die letzte, mit einem Zeilenumbruchszeichen (`n) enden. Wenn nur das Wort <em>Join</em> angegeben ist, werden die Zeilen ohne Zeichen miteinander verbunden. Ansonsten können unmittelbar nach dem Wort <em>Join</em> bis zu 15 Zeichen erfolgen. Zum Beispiel würde <code>Join`s</code> bewirken, dass nach jeder Zeile, außer der letzten, ein Leerzeichen erfolgt. <code>Join`r`n</code> würde hingegen CR+LF zwischen den Zeilen einfügen, während <code>Join|</code> einen Vertikalstrich zwischen den Zeilen einfügen würde. Damit die letzte Zeile auch mit einem Trennungszeichen endet, ist es erforderlich, direkt über der runden Endklammer des Bereichs eine leere Zeile einzufügen.</p>
<p id="LTrim"><strong>LTrim</strong>: Entfernt alle Leer- und Tabulatorzeichen am Anfang jeder Zeile. Dies ist normalerweise aufgrund des <a href="#continuation_defaults">"intelligenten" Standardverhaltens</a> nicht notwendig.</p>
<p id="LTrim0"><strong>LTrim0</strong> (LTrim und eine 0): Verhindert, dass Leer- und Tabulatorzeichen am Anfang jeder Zeile automatisch entfernt werden.</p>
<p id="RTrim0"><strong>RTrim0</strong> (RTrim gefolgt von einer 0): Verhindert, dass Leer- und Tabulatorzeichen am Ende jeder Zeile automatisch entfernt werden.</p>
<p id="CommentOption"><strong>Comments</strong> (oder <strong>Comment</strong> oder <strong>Com</strong> oder <strong>C</strong>): Ermöglicht <a href="Language.htm#comments">Semikolon-Kommentare</a> innerhalb des Fortsetzungsbereichs (aber nicht <code>/*..*/</code>). Solche Kommentare (sowie alle links vorkommenden Leer- und Tabulatorzeichen) werden im Endergebnis entfernt, anstatt als direkt geschriebener Text behandelt zu werden. Jeder Kommentar kann auf der rechten Seite einer Zeile oder auf einer neuen Zeile vorkommen.</p>
<p id="accent"><strong>`</strong> (umgekehrtes Häkchen): Behandelt umgekehrte Häkchen nicht als <a href="misc/EscapeChar.htm">Escapezeichen</a>, sondern als direkt geschriebene Zeichen. Dies verhindert auch die Übersetzung von explizit angegebenen Escapesequenzen wie <code>`r</code> und <code>`t</code>.</p>
<p id="non-continuation"><strong>(</strong> oder <strong>)</strong>: Eine runde Start- oder Endklammer auf der rechten Seite der initialen runden Startklammer (außer als Parameter der <a href="#Join">Join</a>-Option) bewirkt, dass die Zeile nicht als Beginn eines Fortsetzungsbereichs, sondern als Ausdruck interpretiert wird. Dadurch können Ausdrücke wie <code>(x.y)[z]()</code> am Anfang einer Zeile verwendet werden und <a href="#continuation-expr">mehrzeilige Ausdrücke</a> mit einer Zeile wie <code>((</code> oder <code>(MeineFunk(</code> beginnen.</p>
<p><a href="misc/EscapeChar.htm">Escapesequenzen</a> wie `n (Zeilenumbruch) und `t (Tabulator) werden innerhalb des Fortsetzungsbereichs unterstützt, solange die <a href="#accent">Akzent-Option (`)</a> nicht vorhanden ist.</p>
<p>Wenn die <a href="#CommentOption">Comment-Option</a> fehlt, werden Semikolon- und /*..*/-Kommentare innerhalb eines Fortsetzungsbereichs als direkt geschriebener Text angesehen. Allerdings können Kommentare am untersten oder obersten Ende des Bereichs eingefügt werden. Zum Beispiel:</p>
<pre>FileAppend "   <em>; Kommentar.
; Kommentar.</em>
( LTrim Join    <em>; Kommentar.</em>
    &nbsp;; Das ist <strong>kein</strong> Kommentar; es ist direkt geschrieben. Fügen Sie das Wort <i>Comments</i> in die Zeile darüber ein, um es zu einem Kommentar zu machen.
)", "C:\Datei.txt"   <em>; Kommentar.</em></pre>
<p>Der oben genannte Punkt ist der Grund, warum Semikolons innerhalb eines Fortsetzungsbereichs nie mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden müssen.</p>
<p>Aufgrund der Tatsache, dass eine runde Endklammer das Ende eines Fortsetzungsbereichs kennzeichnet, muss eine direkt geschriebene runde Endklammer mit einem Escapezeichen (Akzent/umgekehrtes Häkchen) versehen werden: <code>`)</code>. Dies kann jedoch nicht mit der <a href="#accent">Akzent-Option (`)</a> kombiniert werden.</p>
<p>Unmittelbar nach einem Fortsetzungsbereich kann eine Zeile angegeben werden, die die runde Startklammer eines weiteren Fortsetzungsbereichs enthält. Auf diese Weise können unterschiedliche Optionen beim Konstruieren einer einzelnen Zeile angewendet werden.</p>
<p>Die stückweise Konstruktion eines Fortsetzungsbereichs via <a href="commands/_Include.htm">#Include</a> wird nicht unterstützt.</p>

<h2 id="lib">Skriptbibliotheksordner</h2>
<p>Die Bibliotheksordner sind vordefinierte Standorte für gemeinsam genutzte Skripte, die von anderen Skripten mit Hilfe von <a href="commands/_Include.htm">#Include</a> genutzt werden können. Ein Bibliotheksskript enthält typischerweise eine Funktion oder Klasse, die für die Verwendung und Wiederverwendung konzipiert ist. Das Platzieren von Bibliotheksskripten an einen dieser Standorte erleichtert das Schreiben von Skripten, die mit anderen gemeinsam genutzt werden können und über mehrere Konfigurationen hinweg funktionieren. Die Standorte für Bibliotheken sind:</p>
<pre><a href="Variables.htm#ScriptDir">A_ScriptDir</a> "\Lib\"  <em>; Lokale Bibliothek.</em>
<a href="Variables.htm#MyDocuments">A_MyDocuments</a> "\AutoHotkey\Lib\"  <em>; Benutzerbibliothek.</em>
"Verzeichnis-der-aktuell-laufenden-AutoHotkey.exe\Lib\"  <em>; Standardbibliothek.</em></pre>
<p>Die Bibliotheksordner werden in der oben gezeigten Reihenfolge durchsucht.</p>
<p>Wenn ein Skript beispielsweise die Zeile <code>#Include &lt;MeineBibl&gt;</code> enthält, sucht das Programm nach einer Datei namens "MeineBibl.ahk" in der Benutzerbibliothek. Wenn sie dort nicht ist, wird die Standardbibliothek durchsucht. Wenn sie dort auch nicht gefunden wurde und enthält der Funktionsname einen Unterstrich (z. B. <code>MeinPräfix_MeineFunk</code>), durchsucht das Programm beide Bibliotheken nach einer Datei namens <code>MeinPräfix.ahk</code> und lädt sie, falls sie existiert. Wenn <code>MeinPräfix.ahk</code> geladen wurde, sind sowohl die Funktion <code>MeinPräfix_MeineFunk</code> als auch andere verwandte Funktionen, deren Namen mit <code>MeinPräfix_</code> beginnen, zugänglich.</p>
<p>Obwohl eine Bibliotheksdatei gemäß Konvention grundsätzlich nur eine einzelne Funktion oder Klasse mit demselben Namen wie die Datei enthält, kann sie auch private Funktionen enthalten, die nur von ihr aufgerufen werden. Allerdings sollten solche Funktionen eindeutige Namen haben, weil sie im globalen Namensraum sind; das heißt, dass sie von überall im Skript aufgerufen werden können.</p>

<h2 id="ahk2exe">Ein Skript in eine EXE-Datei umwandeln (Ahk2Exe)</h2>
<p>Es ist ein Skript-Compiler im Lieferumfang des Programms enthalten (von fincs bereitgestellt und von TAC109 um Features erweitert).</p>
<p>Ein kompiliertes Skript ist eine eigenständige ausführbare Datei; das heißt, dass das Skript ohne AutoHotkey.exe gestartet werden kann. Der Kompilierungsvorgang bestückt die ausführbare Datei mit folgenden Dingen: der AutoHotkey-Interpreter, das Skript, via <a href="commands/_Include.htm">#Include</a> definierte Dateien und via <a href="commands/FileInstall.htm">FileInstall</a> definierte Dateien. Zusätzliche Dateien können mittels <a href="misc/Ahk2ExeDirectives.htm">Compiler-Direktiven</a> eingebunden werden.</p>
<h3 id="toc">Compiler-Themen</h3>
<ul>
  <li><a href="#ahk2exe-run">Compiler ausführen</a></li>
  <li><a href="#ahk2exe-base">Ausführbare Basisdatei</a></li>
  <li><a href="#CompilerDirectives">Skript-Compiler-Direktiven</a></li>
  <li><a href="#mpress">Kompilierte Skripte komprimieren</a></li>
  <li><a href="#information">Hintergrundinformationen</a></li>
</ul>
<h3 id="ahk2exe-run">Compiler ausführen</h3>
<p>Ahk2Exe kann auf folgenden Arten verwendet werden:</p>
<ul>
  <li>
    <p><strong>GUI-Schnittstelle</strong>: Starten Sie die Verknüpfung "Convert .ahk to .exe" im Startmenü. (Nach dem Aufruf der GUI kann es zu einer Verzögerung kommen, bevor das Fenster angezeigt wird; Einzelheiten finden Sie unter <a href="#information">Hintergrundinformationen</a>.)</p>
  </li>
  <li>
    <p><strong>Rechtsklick</strong>: Rechtsklicken Sie in einem Explorer-Fenster auf eine .ahk-Datei und wählen Sie "Compile Script" aus (nur verfügbar, wenn die Option "Script Compiler" in der Installation von AutoHotkey ausgewählt wurde). Nach einer kurzen Zeit wird im Verzeichnis des Skripts eine gleichnamige EXE-Datei erstellt. Hinweis: Das Erstellen der EXE-Datei erfolgt mit den Einstellungen (Symbol, .bin-Datei, <a href="#mpress">Komprimierung</a>), die zuletzt in Methode #1 oben gespeichert wurden, oder wie im Skript per <a href="misc/Ahk2ExeDirectives.htm">Compiler-Direktive</a> angegeben.</p>
  </li>
  <li id="ahk2exeCmd">
    <p><strong>Befehlszeile</strong>: Der Compiler kann von der Befehlszeile aus mit den unten gezeigten Parametern gestartet werden. Jeder Befehlszeilenparameter, außer <code class="no-highlight">/gui</code>, führt dazu, dass das Skript sofort kompiliert wird. Alle Parameter sind optional, außer dass ein <code class="no-highlight">/gui</code>- oder <code class="no-highlight">/in</code>-Parameter vorhanden sein muss.</p>
    <style>
      #param_pairs td:not(:last-child) {
        white-space: nowrap;
      }
    </style>
    <table class="info" id="param_pairs">
      <tr>
        <th abbr="Param">Parameterpaar</th>
        <th>Bedeutung</th>
      </tr>
      <tr id="SlashIn">
        <td>/in <i>Skriptname</i></td>
        <td>Der Pfad und Name des Skripts, das kompiliert werden soll. Dies muss angegeben werden, sobald mindestens einer der anderen Parameter verwendet wird, es sei denn, es wird <code class="no-highlight">/gui</code> verwendet.</td>
      </tr>
      <tr id="SlashOut">
        <td>/out <i>EXE_Name</i></td>
        <td>Der Pfad\Name der EXE-Datei, die erstellt werden soll. Standardmäßig wird das Verzeichnis und der Basisname der Eingabedatei, plus ".exe" als Dateiendung, oder eine entsprechende <a href="misc/Ahk2ExeDirectives.htm">Compiler-Direktive</a> im Skript verwendet.</td>
      </tr>
      <tr id="slashIcon">
        <td>/icon <i>Symbolname</i></td>
        <td>Die zu verwendende Symboldatei. Standardmäßig wird das zuletzt in der GUI-Oberfläche gespeicherte Symbol oder eine <a href="misc/Ahk2ExeDirectives.htm#SetMainIcon">SetMainIcon</a>-Compiler-Direktive im Skript verwendet.</td>
      </tr>
      <tr id="SlashBase">
        <td>/base <i>Dateiname</i></td>
        <td>Die zu verwendende Basisdatei (eine BIN- oder EXE-Datei). Standardmäßig wird der zuletzt in der GUI-Oberfläche gespeicherte Basisdateiname oder eine im Skript vorkommende <a href="misc/Ahk2ExeDirectives.htm#Bin">Base</a>-Compiler-Direktive verwendet.</td>
      </tr>
      <tr id="SlashResourceID">
        <td>/resourceid <i>Name</i></td>
        <td>Weist eine untypische Ressourcen-ID zu, die für das Hauptskript bei Kompilierungen verwendet wird, die eine <a href="#SlashBase">EXE-Basisdatei</a> verwenden (siehe <a href="Program.htm#embedded-scripts">Eingebettete Skripte</a>). Numerische Ressourcen-IDs müssen aus einem Rautezeichen (#), gefolgt von einer Dezimalzahl, bestehen. Standardmäßig wird #1 oder eine im Skript vorkommende <a href="misc/Ahk2ExeDirectives.htm#ResourceID">ResourceID</a>-Compiler-Direktive verwendet.</td>
      </tr>
      <tr id="SlashCp">
        <td>/cp <i>Zeichensatz</i></td>
        <td>Überschreibt den Standard-Zeichensatz, mit dem die Skript-Dateien gelesen werden. Eine Liste möglicher Werte finden Sie unter <a href="https://docs.microsoft.com/de-de/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>. Beachten Sie, dass Unicode-Skripte mit einer Byte-Order-Markierung (BOM) beginnen sollten, was die Verwendung dieses Parameters überflüssig macht.</td>
      </tr>
      <tr id="SlashCompress">
        <td>/compress <i>n</i></td>
        <td>Soll die EXE-Datei <a href="#mpress">komprimiert</a> werden? 0 = nein, 1 = MPRESS verwenden (falls vorhanden), 2 = UPX verwenden (falls vorhanden). Standardmäßig wird die zuletzt in der GUI-Oberfläche gespeicherte Einstellung verwendet.</td>
      </tr>
      <tr id="SlashGui">
        <td>/gui</td>
        <td>Zeigt die GUI, anstatt sofort zu kompilieren. Die anderen Parameter können verwendet werden, um die zuletzt in der GUI gespeicherten Einstellungen zu überschreiben. <code>/in</code> ist in diesem Fall optional.</td>
      </tr>
      <tr id="SlashGuiSilent">
        <td>/silent [verbose]</td>
        <td>Deaktiviert alle Mitteilungsfenster und gibt Fehler stattdessen in der Standardfehlerausgabe (stderr) aus; oder in der Standardausgabe (stdout), wenn stderr fehlschlägt. Sonstige Meldungen werden ebenfalls in stdout ausgegeben. Geben Sie optional das Wort <code>verbose</code> an, um zusätzlich noch Statusmeldungen in stdout auszugeben.</td>
      </tr>
      <tr id="SlashAhk">
        <td class="warning"><strong>Veraltet:</strong><br>/ahk <i>Dateiname</i></td>
        <td class="warning">Der Pfad\Name der AutoHotkey.exe-Datei, die als Hilfsprogramm zum Kompilieren des Skripts verwendet werden soll.</td>
      </tr>
      <tr id="SlashMpress">
        <td class="warning"><strong>Veraltet:</strong><br>/mpress <i>0oder1</i></td>
        <td class="warning">Soll die EXE-Datei mit MPRESS <a href="#mpress">komprimiert</a> werden? 0 = nein, 1 = ja. Standardmäßig wird die zuletzt in der GUI-Oberfläche verwendete Einstellung verwendet.</td>
      </tr>
      <tr id="SlashBin">
        <td class="warning"><strong>Veraltet:</strong><br>/bin <i>Dateiname</i></td>
        <td class="warning">Die zu verwendende BIN-Datei. Standardmäßig wird der zuletzt in der GUI-Oberfläche gespeicherte BIN-Dateiname verwendet.</td>
      </tr>
    </table>
    <p>Zum Beispiel:</p>
    <pre class="no-highlight">Ahk2exe.exe /in "Skript.ahk" /icon "Symbol.ico"</pre>
  </li>
</ul>
<p>Hinweise:</p>
<ul>
  <li>Parameter, die Leerzeichen enthalten, müssen in Anführungszeichen gesetzt werden.</li>
  <li>Die Leistung des Skripts kann in der Regel nicht durch das Kompilieren verbessert werden.</li>
  <li><a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> und <a href="Variables.htm#AllowMainWindow">A_AllowMainWindow</a> beeinflussen das Verhalten von kompilierten Skripts.</li>
  <li>Die interne Variable <a href="Variables.htm#IsCompiled">A_IsCompiled</a> enthält eine 1, wenn das Skript in kompilierter Form ausgeführt wird. Ansonsten ist sie leer.</li>
  <li>Wenn Parameter an Ahk2Exe übergeben werden, wird eine Meldung über den Erfolg oder Misserfolg des Kompilierungsvorgangs in die Standardausgabe (stdout) geschrieben. Obwohl die Meldung nicht in der Eingabeaufforderung angezeigt wird, kann sie mit Mitteln wie z. B. durch Weiterleiten der Ausgabe an eine Datei "abgefangen" werden. </li>
  <li>Im Fall eines Fehlers kann Ahk2Exe eine Vielzahl von Exitcodes zurückgeben, die den Typ des Fehlers kennzeichnen. Solche Fehlercodes finden Sie auf <a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>.</li>
</ul>
<p>Den Quellcode sowie neuere Versionen des Compilers finden Sie auf <a href="https://github.com/AutoHotkey/Ahk2Exe">GitHub</a>.</p>

<h3 id="ahk2exe-base">Ausführbare Basisdatei</h3>
<p>Jede EXE-Datei eines kompilierten Skripts basiert auf einer ausführbaren Datei, die den Interpreter implementiert. Die im Compiler-Verzeichnis enthaltenen Basisdateien haben die Dateiendung ".bin"; diese Dateien sind Versionen des Interpreters, die nicht die Möglichkeit bieten, externe Skriptdateien zu laden. Stattdessen wird das Programm nach einer Win32-Ressource (RCDATA) namens "&gt;AUTOHOTKEY SCRIPT&lt;" suchen und diese laden, oder fehlschlagen, wenn sie nicht gefunden wird.</p>
<p>Die ausführbaren Standard-AutoHotkey-Dateien können auch als Basis für ein kompiliertes Skript verwendet werden, indem eine Win32-Ressource (RCDATA) mit der ID 1 eingebettet wird. (Weitere Skripte können mit der <a href="misc\Ahk2ExeDirectives.htm#AddResource">AddResource</a>-Compiler-Direktive hinzugefügt werden.) Dadurch kann die EXE-Datei eines kompilierten Skripts zusammen mit der Befehlszeilenoption <a href="#SlashScript">/script</a> verwenden werden, um anstelle des eingebetteten Hauptskripts andere Skripte auszuführen. Weitere Informationen finden Sie unter <a href="Program.htm#embedded-scripts">Eingebettete Skripte</a>.</p>

<h3 id="CompilerDirectives">Skript-Compiler-Direktiven</h3>
<p>Skript-Compiler-Direktiven ermöglichen es dem Benutzer, genaue Angaben darüber zu machen, wie ein Skript kompiliert werden soll. Einige der Features sind:</p>
<ul>
  <li>Möglichkeiten zum Ändern der Versionsinformationen (z. B. Name, Beschreibung, Version...).</li>
  <li>Möglichkeiten, um Ressourcen zum kompilierten Skript hinzuzufügen.</li>
  <li>Möglichkeiten, an verschiedenen Aspekten der Kompilierung zu feilen.</li>
  <li>Möglichkeiten, um Codeabschnitte aus dem kompilierten Skript zu entfernen, und umgekehrt.</li>
</ul>
<p>Weitere Informationen finden Sie unter <a href="misc/Ahk2ExeDirectives.htm">Skript-Compiler-Direktiven</a>.</p>

<h3 id="mpress">Kompilierte Skripte komprimieren</h3>
<p>Ahk2Exe kann optional MPRESS- oder UPX-Freeware verwenden, um kompilierte Skripte zu komprimieren. Wenn <strong>MPRESS.exe</strong> und/oder <strong>UPX.exe</strong> in den Compiler-Unterordner von AutoHotkey kopiert wurde, kann die EXE-Datei via <code>/compress</code>-Parameter oder GUI-Einstellung komprimiert werden. </p>
<p><strong>MPRESS</strong> - offizielle Webseite (Downloads und Information): <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a><br>MPRESS Mirror: <a href="https://www.autohotkey.com/mpress/">https://www.autohotkey.com/mpress/</a></p>
<p><strong>UPX</strong> - offizielle Webseite (Downloads und Information): <a href="https://upx.github.io/">https://upx.github.io/</a></p>
<p><strong>Hinweis:</strong> Eine auf diese Weise komprimierte EXE-Datei unterbindet eine einfache Einsicht in den Quellcode des Skripts mithilfe eines Texteditors wie z. B. Notepad oder PE-Resource-Editor. Allerdings kann es nicht verhindern, dass der Quellcode mit Tools extrahiert werden kann, die speziell dafür entwickelt worden sind.</p>

<h3 id="information">Hintergrundinformationen</h3>
 <p>Die folgende Ordnerstruktur wird unterstützt, wobei sich die aktuell ausgeführte Version von <code>Ahk2Exe.exe</code> im ersten, unten gezeigten \Compiler-Verzeichnis befindet:</p>
<pre class="no-highlight">\AutoHotkey 
   AutoHotkeyA32.exe 
   AutoHotkeyU32.exe
   AutoHotkeyU64.exe
   \Compiler
      Ahk2Exe.exe  <em>; die Hauptversion von Ahk2Exe</em>
      ANSI 32-bit.bin
      Unicode 32-bit.bin
      Unicode 64-bit.bin
   \AutoHotkey v2.0-a135
      AutoHotkey32.exe
      AutoHotkey64.exe
      \Compiler
   \v2.0-beta.1
      AutoHotkey32.exe
      AutoHotkey64.exe</pre>
<p>Der Suchalgorithmus zum Finden der Basisdatei wird beim Starten von Ahk2Exe kurz ausgeführt und funktioniert wie folgt:</p>
<p>Der Algorithmus sucht nach qualifizierten AutoHotkey-EXE-Dateien und allen BIN-Dateien im Verzeichnis des Compilers, im übergeordneten Verzeichnis des Compilers und in allen Nebenverzeichnissen des Compilers, deren Namen mit <code>AutoHotkey</code> oder <code>V</code> beginnen, aber nicht mit <code>AutoHotkey_H</code>. Die ausgewählten Verzeichnisse werden rekursiv durchsucht. Es werden alle gefundenen AutoHotkey.exe-Dateien ausgeschlossen - übrig bleiben Dateien wie AutoHotkeyA32.exe, AutoHotkey64.exe usw. sowie alle gefundenen BIN-Dateien. Alle enthaltenen EXE-Dateien müssen einen Namen haben, der mit <code>AutoHotkey</code> beginnt, und eine Dateibeschreibung, die das Wort <code>AutoHotkey</code> enthält, sowie die Version <code class="no-highlight">1.1.34+</code> oder <code class="no-highlight">2.0-a135+</code>.</p>
<p>Für eine erfolgreiche Kompilierung wird auch eine Version des AutoHotkey-Interpreters (als Hilfsprogramm) benötigt. Es wird einer nach einem ähnlichen Algorithmus ausgewählt. In den meisten Fällen wird die Version des genutzten Interpreters mit der Version der Basisdatei übereinstimmen, die der Benutzer für die Kompilierung ausgewählt hat.</p>


<h2 id="cmd">Befehlszeilenparameter an ein Skript übergeben</h2>
<p>Skripte unterstützen Befehlszeilenparameter. Das Format ist:</p>
<pre>AutoHotkey.exe [<i>Optionen</i>] [<i>Skript-Dateiname</i>] [<i>Skript-Parameter</i>]</pre>
<p>Bei kompilierten Skripten ist das Format:</p>
<pre>KompiliertesSkript.exe [<i>Optionen</i>] [<i>Skript-Parameter</i>]</pre>
<p><strong>Optionen:</strong> Folgende können angegeben werden:</p>
<table class="info">
  <tr><th>Option</th><th>Bedeutung</th><th class="wrap" abbr="Kompiliert?">Kompiliert?</th></tr>
  <tr id="SlashF">
    <td>/force</td>
    <td>Skript bedingungslos starten und Warndialogfenster überspringen. Diese Option hat den gleichen Effekt wie <a href="commands/_SingleInstance.htm">#SingleInstance Off</a>.</td>
    <td>Ja</td>
  </tr>
  <tr id="SlashR">
    <td>/restart</td>
    <td>Gibt an, dass das Skript neu gestartet werden soll und dass eine ältere Instanz des Skripts, sofern möglich, geschlossen werden soll (diese Option wird auch intern von der <a href="commands/Reload.htm">Reload</a>-Funktion verwendet).</td>
    <td>Ja</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut<br><br>/ErrorStdOut=<em>Codierung</em></td>
    <td>
      <p>Sendet alle Syntaxfehler, die den Start eines Skripts verhindern, zur Standardfehlerausgabe (stderr), anstatt ein Dialogfenster anzuzeigen. Siehe <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> für weitere Details.</p>
      <p>Es kann optional eine <a href="commands/FileEncoding.htm">Codierung</a> angegeben werden. <code>/ErrorStdOut=UTF-8</code> beispielsweise kodiert Meldungen als UTF-8, bevor sie in die Standardfehlerausgabe geschrieben werden.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td>Stellt eine Verbindung zu einem Debugger-Client her. Weitere Informationen finden Sie unter <a href="#idebug">Interaktives Debuggen</a>.</td>
    <td>Nein</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>
      <p>Überschreibt den Standard-Zeichensatz, mit dem die Skript-Dateien gelesen werden. Weitere Informationen finden Sie unter <a href="#cp">Zeichensatz einer Skript-Datei</a>.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="validate">
    <td>/Validate</td>
    <td>
      <p>AutoHotkey lädt das Skript und beendet es dann, bevor es ausgeführt wird.</p>
      <p>Standardmäßig werden Ladezeitfehler und Warnungen wie üblich angezeigt. Mit der <a href="#ErrorStdOut">/ErrorStdOut</a>-Option können jegliche Fehlermeldungen unterdrückt oder abgefangen werden.</p>
      <p>Der Prozess-Exitcode ist 0, wenn das Skript erfolgreich geladen wurde, oder ungleich 0, wenn ein Fehler auftrat.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr>
    <td>/iLib <em>"AusgabeDatei"</em></td>
    <td>
      <p><strong>Veraltet:</strong> Verwenden Sie stattdessen <a href="#validate">/validate</a>.</p>
      <p>AutoHotkey lädt das Skript, ohne es auszuführen. In früheren Versionen von AutoHotkey wurden Dateinamen von automatisch eingebundenen Dateien in die mit <em>AusgabeDatei</em> angegebene Datei geschrieben, formatiert als #Include-Direktiven.</p>
      <p>Wenn die Ausgabedatei bereits existiert, wird sie überschrieben. <em>AusgabeDatei</em> kann <code>*</code> sein, um die Ausgabe in die Standardausgabe (stdout) zu schreiben.</p>
      <p>Enthält das Skript Syntaxfehler, wird die Ausgabedatei eventuell leer sein. Der Exitcode des Prozesses kann verwendet werden, um diesen Zustand zu erkennen; bei einem Syntaxfehler ist der Exitcode eine 2. Mit der /ErrorStdOut-Option kann die Fehlermeldung unterdrückt oder abgefangen werden.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashInclude">
    <td>/include <em>"IncDatei"</em></td>
    <td>
      <p><a href="commands/_Include.htm">Inkludiert</a> eine Datei vor dem Hauptskript. Mit dieser Methode kann nur eine einzelne Datei inkludiert werden. Wenn das Skript <a href="commands/Reload.htm">neu geladen</a> wird, wird diese Befehlszeilenoption automatisch an die neue Instanz übergeben.</p>
    </td>
    <td>Nein</td>
  </tr>
  <tr id="SlashScript">
    <td>/script</td>
    <td>
      <p>Wenn diese Befehlszeilenoption mit einem kompilierten Skript basierend auf einer EXE-Datei verwendet wird, veranlasst sie das Programm, das eingebettete Hauptskript zu ignorieren. Dadurch kann die EXE-Datei eines kompilierten Skripts anstelle des Hauptskripts externe Skriptdateien oder eingebettete Skripte ausführen. Andere Befehlszeilenoptionen, die normalerweise von kompilierten Skripten nicht unterstützt werden, können ebenfalls verwendet werden, müssen aber rechts von dieser Befehlszeilenoption angegeben werden. Zum Beispiel:</p>
      <pre class="no-highlight">KompiliertesSkript.exe /script /ErrorStdOut MeinSkript.ahk "Skript-Arg 1"</pre>
      <p>Wenn die aktuelle ausführbare Datei kein eingebettetes Skript hat, ist diese Befehlszeilenoption erlaubt, aber wirkungslos.</p>
      <p>Diese Befehlszeilenoption wird von kompilierten Skripten, die auf einer BIN-Datei basieren, nicht unterstützt.</p>
      <p>Siehe auch: <a href="#ahk2exe-base">Ausführbare Basisdatei (Ahk2Exe)</a></p>
    </td>
    <td>N/A</td>
  </tr>
</table>

<p id="defaultfile"><strong>Skript-Dateiname</strong>: Dieser Parameter kann weggelassen werden, falls keine <em>Skript-Parameter</em> vorhanden sind. Wenn dieser Parameter nicht verwendet wird (z. B. wenn man AutoHotkey direkt über das Startmenü startet), wird das Programm in dieser Reihenfolge nach einer Skriptdatei namens <code><i>AutoHotkey</i>.ahk</code> an folgenden Standorten suchen:</p>
<ul>
  <li>Das Verzeichnis, das die <a href="Variables.htm#AhkPath">ausführbare AutoHotkey-Datei</a> enthält.</li>
  <li>Der Ordner "<a href="Variables.htm#MyDocuments">Dokumente</a>" des aktuellen Benutzers.</li>
</ul>
<p>Der Dateiname <code><i>AutoHotkey</i>.ahk</code> ist abhängig vom Namen der ausführbaren Datei, mit der das Skript gestartet wurde. Wenn Sie beispielsweise AutoHotkey.exe in MeinSkript.exe umbenennen, versucht das Programm <code>MeinSkript.ahk</code> zu finden. Starten Sie AutoHotkey32.exe ohne Parameter, sucht das Programm nach AutoHotkey32.ahk.</p>
<p id="stdin">Geben Sie als Dateiname ein Sternchen (*) an, um den Skript-Text aus der Standardeingabe (stdin) zu lesen. Dies hat folgende Auswirkungen:</p>
<ul>
  <li>Das <a href="Variables.htm#InitialWorkingDir">anfängliche Arbeitsverzeichnis</a> wird als <a href="Variables.htm#ScriptDir">A_ScriptDir</a> genutzt und dient dazu, den <a href="Scripts.htm#lib">lokalen Lib-Ordner</a> zu lokalisieren.</li>
  <li><a href="Variables.htm#ScriptName">A_ScriptName</a> und <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a> enthalten beide "*".</li>
  <li><a href="commands/_SingleInstance.htm">#SingleInstance</a> ist standardmäßig ausgeschaltet.</li>
</ul>
<p>Ein Beispiel dazu finden Sie unter <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p><strong>Skript-Parameter</strong>: Eine oder mehrere Zeichenketten, die an das Skript übergeben werden sollen, jeweils durch mindestens ein Leerzeichen voneinander getrennt. Jeder Parameter, der Leerzeichen enthält, muss in Anführungszeichen gesetzt werden. Wenn Sie eine leere Zeichenkette als Parameter übergeben wollen, geben Sie zwei aufeinanderfolgende Anführungszeichen an. Um ein direkt geschriebenes Anführungszeichen zu übergeben, muss ein umgekehrter Schrägstrich davorgesetzt werden (\"). Daraus folgt, dass jeder Schrägstrich am Ende innerhalb eines in Anführungszeichen gesetzten Parameters (z. B. "C:\Meine Dokumente<span class="red">\"</span>) als direkt geschriebenes Anführungszeichen behandelt wird (das heißt, dass das Skript die Zeichenkette C:\Meine Dokumente<span class="red">"</span> als Parameter erkennt). Mit <code>A_Args[1] := <a href="commands/StrReplace.htm">StrReplace</a>(A_Args[1], '"')</code> können solche Anführungszeichen entfernt werden.</p>
<p id="cmd_args">Eingehende Parameter, sofern vorhanden, werden als Array in die interne Variable <strong>A_Args</strong> gespeichert, und können mithilfe der <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> abgerufen werden. <code>A_Args[1]</code> enthält den ersten Parameter. Das folgende Beispiel zeigt, wie das Skript beendet werden kann, wenn zu wenig Parameter übergeben wurden:</p>
<pre>if A_Args.Length &lt; 3
{
    MsgBox "Das Skript benötigt mindestens 3 eingehende Parameter, aber es sind nur " A_Args.Length " angekommen."
    ExitApp
}</pre>
<p>Wenn die Anzahl der Parameter variiert, die an das Skript übergeben werden sollen (z. B. wenn der Benutzer mit dem Mauszeiger mehrere Dateien auf ein Skript zieht und ablegt), kann das folgende Beispiel verwendet werden, um sie einzeln zu extrahieren:</p>
<pre>for n, param in A_Args  <em>; Für jeden Parameter:</em>
{
    MsgBox "Parameter Nr. " n " ist " param "."
}
</pre>
<p>Wenn die Parameter Dateinamen sind, kann das folgende Beispiel verwendet werden, um sie in lange Namen mit korrekter Groß-/Kleinschreibung (wie im Dateisystem gespeichert) und vollständigem/absolutem Pfad umzuwandeln:</p>
<pre>for n, EingabePfad in A_Args  <em>; Für jeden Parameter (oder für jede auf ein Skript gezogene Datei):</em>
{
    Loop Files, EingabePfad, "FD"  <em>; Dateien und Verzeichnisse einbeziehen.</em>
        LangerPfad := A_LoopFileFullPath
    MsgBox "Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei`n" EingabePfad "`nist:`n" LangerPfad
}</pre>

<h2 id="cp">Zeichensatz einer Skript-Datei</h2>
<p>Damit ASCII-fremde Zeichen korrekt aus der Datei gelesen werden können, muss die Codierung, die beim Speichern der Datei verwendet wurde (meistens via Texteditor), mit der Codierung übereinstimmen, die AutoHotkey beim Lesen der Datei verwendet. Wenn sie nicht übereinstimmen, werden Zeichen falsch dekodiert. AutoHotkey entscheidet anhand folgender Regeln, welche Codierung verwendet werden soll:</p>
<ul>
  <li>Beginnt die Datei mit einer UTF-8- oder UTF-16-Byte-Order-Markierung (BOM), wird der entsprechende Zeichensatz verwendet und die <a href="#CPn">/CP<i>n</i></a>-Option ignoriert.</li>
  <li>Wenn die <a href="#CPn">/CP<i>n</i></a>-Option via Befehlszeile übergeben wurde, wird der Zeichensatz <i>n</i> verwendet. Eine Liste möglicher Werte finden Sie unter <a href="https://docs.microsoft.com/de-de/windows/win32/intl/code-page-identifiers">Code Page Identifiers</a>.</li>
  <li>In allen anderen Fällen wird UTF-8 verwendet (dieses Standardverhalten unterscheidet sich von AutoHotkey v1).</li>
</ul>
<p>Beachten Sie, dass die oben genannten Punkte nur für Skript-Dateien gelten, die AutoHotkey geladen hat, nicht für die Dateibearbeitung im Skript selbst. <a href="commands/FileEncoding.htm">FileEncoding</a> steuert die Standardcodierung von Dateien, die das Skript liest oder schreibt, während <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a> immer auf Basis von UTF-16 oder ANSI arbeiten.</p>
<p>Da der gesamte Text (wo nötig) in das <a href="Compat.htm#Format">native Zeichenkettenformat</a> konvertiert wird, werden Zeichen, die im nativen Zeichensatz ungültig oder nicht vorhanden sind, durch einen Platzhalter ersetzt: '�'. Das passiert nur, wenn in der Skript-Datei Codierungsfehler auftreten oder wenn der Zeichensatz, der zum Speichern oder Laden der Datei verwendet wird, nicht übereinstimmt.</p>
<p><a href="commands/RegWrite.htm">RegWrite</a> kann verwendet werden, um die Standardcodierung für Skripte festzulegen, die vom Explorer aus gestartet werden (z. B. per Doppelklick einer Datei):</p>
<pre><em>; Heben Sie die Kommentierung der entsprechenden Zeile auf oder lassen Sie sie alle kommentiert,
;   um den Standard des aktuellen Builds wiederherzustellen.  Je nach Bedarf anpassen:
; Zeichensatz := 0     ; Standard-ANSI-Zeichensatz des Systems
; Zeichensatz := 65001 ; UTF-8
; Zeichensatz := 1200  ; UTF-16
; Zeichensatz := 1252  ; ANSI-Latin-1; Westeuropäisch (Windows)</em>
if (Zeichensatz != "")
    Zeichensatz := " /CP" . Zeichensatz
Befehl := Format('"{1}"{2} "%1" %*', A_AhkPath, Zeichensatz)
Schlüssel := "AutoHotkeyScript\Shell\Open\Command"
if A_IsAdmin    <em>; Für alle Benutzer setzen.</em>
    RegWrite Befehl, "REG_SZ", "HKCR\" Schlüssel
else            <em>; Nur für den aktuellen Benutzer setzen.</em>
    RegWrite Befehl, "REG_SZ", "HKCU\Software\Classes\" Schlüssel</pre>
<p>Das setzt natürlich voraus, dass AutoHotkey bereits installiert ist. Ansonsten wäre das Ergebnis alles andere als zufriedenstellend.</p>

<h2 id="debug">Ein Skript debuggen</h2>
<p>Interne Funktionen wie <a href="commands/ListVars.htm">ListVars</a> und <a href="commands/Pause.htm">Pause</a> können Ihnen dabei helfen, ein Skript zu debuggen (Fehler zu finden und zu beseitigen). Wenn Sie zum Beispiel die folgenden beiden Zeilen an sorgfältig ausgewählten Positionen einfügen, können im Skript sogenannte "Haltepunkte" erstellt werden:</p>
<pre>ListVars
Pause</pre>
<p>Sobald das Skript diese zwei Zeilen erreicht, zeigt es den aktuellen Inhalt aller Variablen an, die überprüft werden sollen. Wenn Sie bereit sind fortzufahren, kann die Pause via Datei- oder Tray-Menü aufgehoben werden. Das Skript wird dann bis zum nächsten "Haltepunkt" (falls vorhanden) fortgesetzt.</p>
<p>Generell empfiehlt es sich, diese "Haltepunkte" an Stellen einzufügen, wo das aktive Fenster für das Skript irrelevant ist, wie z. B. unmittelbar vor einer WinActivate-Funktion. Auf diese Weise kann das Skript wieder ordnungsgemäß fortgesetzt werden, sobald die Pause aufgehoben wird.</p>
<p>Die folgenden Funktionen sind auch für das Debuggen geeignet: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> und <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>Häufig auftretende Fehler wie Tippfehler und fehlende "globale" Deklarationen können durch das <a href="commands/_Warn.htm">Einschalten von Warnungen</a> erkannt werden.</p>
<h3 id="idebug">Interaktives Debuggen</h3>
<p>Interaktives Debuggen ist mit einem unterstützten <a href="AHKL_DBGPClients.htm">DBGp-Client</a> möglich. Üblicherweise sind folgende Aktionen möglich:</p>
<ul>
  <li>Haltepunkte auf Zeilen setzen oder entfernen - die Ausführung pausieren, wenn ein <a href="https://de.wikipedia.org/wiki/Haltepunkt_(Programmierung)">Haltepunkt</a> erreicht ist.</li>
  <li>Den Code zeilenweise durchgehen - Funktionen betreten, überspringen oder verlassen.</li>
  <li>Alle oder eine bestimmte Variable überwachen.</li>
  <li>Den Stapel von laufenden Threads und Funktionen anzeigen.</li>
</ul>
<p>Beachten Sie, dass diese Funktionalität für kompilierte Skripte deaktiviert ist.</p>
<p>Um interaktives Debuggen zu aktivieren, starten Sie zunächst einen unterstützten Debugger-Client und starten Sie danach das Skript mit der <b>/Debug</b>-Befehlszeilenoption.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> und <i>PORT</i> können weggelassen werden. Zum Beispiel sind die folgenden Zeilen funktionsgemäß identisch:</p>
<pre class="no-highlight">AutoHotkey /Debug "MeinSkript.ahk"
AutoHotkey /Debug=localhost:9000 "MeinSkript.ahk"</pre>
<p id="debug_attach">Um den Debugger nachträglich mit einem Skript zu verbinden, senden Sie ihm wie folgt eine Meldung:</p>
<pre>SkriptPfad := "" <em>; SETZEN SIE HIER DEN VOLLSTÄNDIGEN PFAD DES SKRIPTS EIN</em>
A_DetectHiddenWindows := true
if WinExist(SkriptPfad " ahk_class AutoHotkey")
    <em>; Optionale Parameter:
    ;   wParam  = IPv4-Adresse des Debugger-Clients als 32-Bit-Integer.
    ;   lParam  = Port, der vom Debugger-Client abgehört werden soll.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>Sobald eine Verbindung zum Debugger-Client aufgebaut ist, kann sie durch das Senden des DBGp-Befehls "detach" getrennt werden, ohne das Skript zu terminieren.</p>

<h2 id="Script_Showcase">Skript-Beispiele</h2>
<p>Auf <a href="scripts/">dieser Seite</a> kann man einige nützliche Skripte finden.</p>
</body>
</html>
